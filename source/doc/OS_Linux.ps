%!PS-Adobe-2.0
%%Creator: dvips(k) 2020.1 Copyright 2020 Radical Eye Software
%%Title: OS_Linux.dvi
%%CreationDate: Thu Sep 15 17:06:34 2022
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: SFRM2488 SFRM1095 SFBX1200 SFBX1095 SFSS1095
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -o OS_Linux.ps OS_Linux.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2022.09.15:1906
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 4 2020-06-09 08:32:19Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/addCoors { 
  3 -1 roll 		% xA xB yB yA
  add			% xA xB yB+yA
  3 1 roll 		% yB+yA xA xB
  add			% yB+yA xA+xB
  exch                  % xA+xB yA+yB
} def
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (original)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul         %	\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { i dx mul dup xGridOffset add y0 moveto % draw the lines
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  /i x1 def 
  GridDX div ceiling cvi 
  { i dx mul GridDX mul dup xGridOffset add y0 moveto % plot the labels
    b 0 gt 
      { gsave c i GridDX mul a cvs dup stringwidth pop /z2 ED  
        w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse exch GridDX div z2 2 div sub exch 
        rmoveto show grestore } if 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  /i y1 def 
  GridDY div ceiling cvi
  { newpath i dy mul GridDY mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i GridDY mul a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse GridDY div b 2 div sub
      rmoveto show grestore } if 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 4 2020-06-09 08:32:19Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 4 2020-06-09 08:32:19Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-blur.pro 0 0
%%
%% This is file `pst-blur.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% pst-blur.dtx  (with options: `prolog')
%% 
%% IMPORTANT NOTICE:
%% 
%% For the copyright see the source file.
%% 
%% Any modified versions of this file must be renamed
%% with new filenames distinct from pst-blur.pro.
%% 
%% For distribution of the original source see the terms
%% for copying and modification in the file pst-blur.dtx.
%% 
%% This generated file may be distributed as long as the
%% original source files, as listed above, are part of the
%% same distribution. (The sources need not necessarily be
%% in the same archive or directory.)
%% $Id: pst-blur.dtx,v 2.0 2005/09/08 09:48:33 giese Exp $
%%
%% Copyright 1998-2007 Martin Giese, mgiese@risc.uni-linz.ac.at
%%                     Herbert Voss, voss@pstricks.de
%%
%% This file is under the LaTeX Project Public License
%% See CTAN archives in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-blur' is a PSTricks package for blurred shadows
%%
/tx@PstBlurDict 60 dict def
tx@PstBlurDict begin
/Iterate {
  /SegLines ED
  /ThisB ED /ThisG ED /ThisR ED
  /NextB ED /NextG ED /NextR ED
  /W 2.0 BlurRadius mul def
  /WDec W SegLines div def
  /RInc NextR ThisR sub SegLines div def
  /GInc NextG ThisG sub SegLines div def
  /BInc NextB ThisB sub SegLines div def
  /R ThisR def
  /G ThisG def
  /B ThisB def
  SegLines {
    R G B
    sqrt 3 1 roll sqrt 3 1 roll sqrt 3 1 roll
    setrgbcolor
    gsave W setlinewidth
    stroke grestore
    /W W WDec sub def
    /R R RInc add def
    /G G GInc add def
    /B B BInc add def
  } bind repeat
} def
/BlurShadow {
  Shadow
  /BlurSteps ED
  /BlurRadius ED
  dup mul /BEnd ED dup mul /GEnd ED dup mul /REnd ED
  dup mul /BBeg ED dup mul /GBeg ED dup mul /RBeg ED
  RBeg REnd add 0.5 mul /RMid ED
  GBeg GEnd add 0.5 mul /GMid ED
  BBeg BEnd add 0.5 mul /BMid ED
  /OuterSteps BlurSteps 2 div cvi def
  /InnerSteps BlurSteps OuterSteps sub def
  1 setlinejoin
  RMid GMid BMid REnd GEnd BEnd OuterSteps Iterate
  gsave RBeg sqrt GBeg sqrt BBeg sqrt setrgbcolor fill grestore
  clip
  0 setlinejoin
  RMid GMid BMid RBeg GBeg BBeg InnerSteps Iterate
} def
end

%%EndProcSet
%%BeginProcSet: pst-func.pro 0 0
%% $Id: pst-func.pro 861 2018-12-13 20:40:06Z herbert $
%%
%% This is file `pst-func.pro',
%%
%% IMPORTANT NOTICE:
%%
%% Package `pst-func'
%%
%% Herbert Voss <hvoss@tug.org>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-func' is a PSTricks package to plot special math functions
%%
%%
%% version 0.17 / 2018-12-13  Herbert Voss
%
/tx@FuncDict 100 dict def
tx@FuncDict begin
%
/eps1 1.0e-05 def
/eps2 1.0e-04 def
/eps5 1.0e-05 def
/eps8 1.0e-08 def
%
/PiHalf 1.57079632679489661925640 def
/CEuler 0.5772156649 def % Euler-Mascheroni constant
%
/factorial { % n on stack, returns n! 
  dup 32 gt { pop 1e32 } {
    dup 0 eq { 1 }{ 
      dup 1 gt { dup 1 sub factorial mul } if }
    ifelse } ifelse 
} def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/Pascal [
  [                   1                   ] % 0
  [                 1   1                 ] % 1
  [               1   2   1               ] % 2
  [             1   3   3   1             ] % 3
  [           1   4   6   4   1           ] % 4
  [         1   5  10  10   5   1         ] % 5
  [       1   6  15  20  15   6   1       ] % 6
  [     1   7  21  35  35  21   7   1     ] % 7
  [   1   8  28  56  70  56  28  8    1   ] % 8
  [ 1   9  36  84 126 126  84  36  9    1 ] % 9
] def
%
/GetBezierCoor { 				% t on stack
  10 dict begin					% hold all local
  /t ED
  /t1 1 t sub def				% t1=1-t
  /Coeff Pascal BezierType get def		% get the coefficients
    0 0						% initial values for x y
    BezierType -1 0 {				% BezierType,...,2,1,0
      /I ED					% I=BezierType,...,2,1,0
      /J BezierType I sub def			% J=0,1,2,...,BezierType
      /T t I exp Coeff J get mul def		% coeff(J)*t^I
      /T1 t1 J exp def				% t1^J  
      Points I dup add 1 add get		% y(2*I+1)
      T mul T1 mul add				% the y coordinate
      exch					% y x	
      Points I dup add get			% x(2*I)
      T mul T1 mul add				% the x coordinate
      exch					% x y	
    } for					% x y on stack
  end
} def

/BezierCurve { % on stack [ coors psk@plotpoints BezierType
%  10 dict begin
  /BezierType ED                        % 2,3,4,5,6,...
  1 exch div /epsilon ED                % step for Bezier =1/plotpoints
  ]                                     % [ yi xi ... y3 x3 y2 x2 y1 x1 y0 x0]
  ps@ReverseOrderOfPoints               % [y0 x0 y1 x1 ... yi xi]
  /Points ED 				% save Points array
  epsilon GetBezierCoor 		% next Bezier point
  Points 0 get Points 1 get 		% starting point
  ArrowA lineto 
  epsilon epsilon 1 epsilon sub { % on stack is the loop variable
    GetBezierCoor lineto 
  } for 
  1 epsilon sub GetBezierCoor  
  1 GetBezierCoor  
  ArrowB lineto moveto
%  end
} def

/Bernstein { % on stack tStart tEnd plotpoints i n
  12 dict begin				% hold all local
  /envelope ED				% plot envelope?
  /n ED 
  /i ED
  /ni n i sub def  
  /epsilon ED				% step=1/plotpoints
  /tEnd ED
  /tStart ED
%
% B_{i,n}(t)=\binom{n}{i}t^i(1-t)^{n-i}      (Bernstein)
% f_n(x)=\frac{1}{\sqrt{\pi n\cdot x(1-x)}}  (envelope)
%
  n i MoverN /noveri ED			% \binom{n}{i}
  [					% for the array of points
  tStart epsilon tEnd {
    dup dup /t ED			% leave one on stack
    neg 1 add /t1 ED			% t1=1-t
    envelope 
      { t t1 mul 4 mul PiHalf mul n mul sqrt 1 exch Div }	% envelope
      { noveri t i exp mul t1 ni exp mul } ifelse 	% t f(t)
    ScreenCoor				% convert to screen coor
  } for
  end
  false /Lineto /lineto load def Line
} def
%%
/Si { % integral sin from 0 to x (arg on stack)
  10 dict begin				% hold all local
  dup 0 eq 
  { pop 0 } 
  { 
    /arg exch def  % x
    /arg2 arg dup mul def
    /Sum arg def   %
    /sign -1 def   
    /I 3 def
    /Frac arg2 arg mul 6 div def
    { %  a sequence of x - x^3/(3*3!) + x^5/(5*5!) -...+...
      Frac I div sign mul
      dup abs eps5 lt { pop exit } if
      Sum add /Sum exch def
      /sign sign neg def
      /I I 2 add def
      Frac arg2 mul I 1 sub I mul div /Frac ED
%    arg I Power dup abs 1e30 gt { pop exit } if
%    I factorial div I div sign mul 
%    dup abs eps8 lt { pop exit } if 
%    Sum add /Sum exch def
%    /sign sign neg def
%    /I I 2 add def
   } loop
   Sum
  } ifelse
  end
} def
%
/si { % integral sin from x to infty -> si(x)=Si(x)-pi/2
  Si PiHalf sub
} def
%
/Ci { % integral cosin from x to infty (arg on stack)
  10 dict begin				% hold all local
  abs /arg exch def
  arg 0 eq { 0 } { 
    /arg2 arg dup mul def 
    /Sum CEuler arg ln add def
    /sign -1 def
    /I 2 def
    /Frac arg2 2 div def % first fraction
    { Frac I div sign mul
      dup abs eps5 lt { pop exit } if
      Sum add /Sum exch def
     /sign sign neg def
     /I I 2 add def
     Frac arg2 mul I 1 sub I mul div /Frac ED
    } loop
    Sum
  } ifelse
  end
} def
%
/ci { % integral cosin from x to infty -> ci(x)=-Ci(x)+ln(x)+CEuler
  dup Ci neg exch abs ln add CEuler add
} def
%
/MaxIter 255 def
/func { coeff Derivation FuncValue } def
/func' { coeff Derivation 1 add FuncValue } def
/func'' { coeff Derivation 2 add FuncValue } def
%
/NewtonMehrfach {% the start value must be on top of the stack
  /Nx exch def 
  /Iter 0 def
  {
    /Iter Iter 1 add def
    Nx func /F exch def % f(Nx)
    F abs eps2 lt { exit } if
    Nx func' /FS exch def % f'(Nx) 
    FS 0 eq { /FS 1.0e-06 def } if
    Nx func'' /F2S exch def % f''(Nx)
    1.0 1.0 F F2S mul FS dup mul div sub div /J exch def
    J F mul FS div /Diff exch def 
    /Nx Nx Diff sub def
    Diff abs eps1 lt Iter MaxIter gt or { exit } if 
  } loop 
  Nx % the returned value ist the zero point
} def

/Steffensen {% the start value must be on top of the stack
  /y0 exch def % the start value
  /Iter 0 def   /MaxIter 200 def
  { pstack
    y0 func /F exch def
    F abs eps2 lt { exit } if
    y0 F sub /Phi exch def
    Phi func /F2 exch def
    F2 abs eps2 le { exit }{
      Phi y0 sub dup mul Phi F2 sub 2 Phi mul sub y0 add Div /Diff exch def
      y0 Diff sub /y0 exch def
      Diff abs eps1 le { exit } if
    } ifelse
    /Iter Iter 1 add def
    Iter MaxIter gt { exit } if
  } loop
  y0 28 mul % the returned value ist the zero point
  0  
  3 0 360 arc gsave 0 0 1 setrgbcolor fill grestore 1 setlinewidth stroke
} def 
%
/Horner {% x [coeff] must be on top of the stack
  aload length
  dup 2 add -1 roll
  exch 1 sub {
    dup 4 1 roll
    mul add exch
  } repeat
  pop % the y value is on top of the stack
} def
%
/FuncValue {% x [coeff] Derivation must be on top of the stack
  {
    aload 			% a0 a1 a2 ... a(n-1) [array]
    length                      % a0 a1 a2 ... a(n-1) n
    1 sub /grad exch def        % a0 a1 a2 ... a(n-1) 
    grad -1 1 {                 % for n=grad step -1 until 1
      /n exch def               % Laufvariable speichern
      n                         % a0 a1 a2 ... a(n-1) n
      mul                       % a0 a1 a2 ... a(n-1)*n 
      grad 1 add                % a0 a1 a2 ... a(n-1)*n grad+1 
      1 roll                    % an*na0 a1 a2 ... a(n-2)
    } for
    pop                         % loesche a0
    grad array astore           % [ a1 a2 ... a(n-2)]
  } repeat
  Horner
} def
%
/FindZeros { % dxN dxZ must be on top of the stack (x0..x1 the intervall) => []
  12 dict begin 
  /dxZ exch def /dxN exch def
  /pstZeros [] def 
  x0 dxZ x1 { % suche Nullstellen
    /xWert exch def
    xWert NewtonMehrfach 
    %xWert Steffensen 
    /xNull exch def 
    pstZeros aload length /Laenge exch def % now test if value is a new one
    Laenge 0 eq 
      { xNull 1 }
      { /newZero true def
        Laenge {
	  xNull sub abs dxN lt { /newZero false def } if
        } repeat
	pstZeros aload pop
        newZero { xNull Laenge 1 add } { Laenge } ifelse } ifelse
    array astore 
    /pstZeros exch def
  } for
  pstZeros  % the end array is now on the stack
  end
} def
%
/Simpson { % on stack must be a b M useXVal   --- simple version ---
% /SFunc must be defined 
  /useX ED  % for algebraic functions which uses f(x)
  /M ED /b ED /a ED
  /h b a sub M 2 mul div def
  /s1 0 def
  /s2 0 def
  1 1 M {
    /k exch def
    /xVal k 2 mul 1 sub h mul a add def
    /s1 s1 xVal useX { /x exch def } if SFunc add def
  } for
  1 1 M 1 sub {
    /k exch def
    /xVal k 2 mul h mul a add def
    /s2 s2 xVal useX { /x exch def } if SFunc add def
  } for
  /I a useX { /x exch def } if SFunc b useX { /x exch def } if SFunc add s1 4 mul add s2 2 mul add 3 div h mul def
} def
%
%
/LogGamma { 5 dict begin	% z on stack
  /z ED
  /sum 0 def
  /k 1 def
  {
    z k div dup 1 add ln sub dup
    abs eps8 lt { pop exit } if
    sum add /sum exch def
    /k k 1 add def
  } loop
  sum z ln sub CEuler z mul sub
  end 
} def
%
/ChebyshevT { 5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
     /k exch def
     xtmp xtmp mul 1 sub k exp
     xtmp n 2 k mul sub exp mul
     n 2 k mul MoverN mul
     add
  } for
  end
} def
%
/ChebyshevU {5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
    /k exch def
    xtmp xtmp mul 1 sub k exp
    xtmp n 2 k mul sub exp mul
    n 1 add 2 k mul 1 add MoverN mul
    add
  } for
  end
} def
%
/vasicek{           %density=sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  2 dict begin
  /pd where { pop }{ /pd 0.22 def } ifelse    % element of (0,1) probability of default of portfolio  
  /R2 where { pop }{ /R2 0.11 def } ifelse    % element of (0,1) R_Squared of portfolio
  dup                 % x   x
  norminv             % x   norminv(x)
  dup mul             % x   norminv(x)^2
  exch                % norminv(x)2   x
  norminv             % norminv(x)2   norminv(x)
  1 R2 sub sqrt mul   % norminv(x)2   sqrt(1-R2)*norminv(x)
  pd norminv sub      % norminv(x)2   sqrt(1-R2)*norminv(x)-norminv(pd)
  R2 sqrt div         % norminv(x)2   1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd))
  dup mul             % norminv(x)2  (1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  sub                 % norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  2 div               % 1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  ENeperian exch exp  % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  1 R2 sub            % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   1-R2
  R2 div              % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   (1-R2)/R2
  sqrt                % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   sqrt((1-R2)/R2)
  mul                 % sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  end
} def
%end{vasicek density}
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def
%
end

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: cm-super-t1.enc 0 0
% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: SFSS1095
%!FontType1-1.0: SFSS1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecss1095, tcss1095, lass1095, lbss1095, lcss1095, rxss1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Sans Serif) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFSS1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-201 -321 1477 898}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839D875E6595524AE250B4BBCAAF88358
42414E09F7CD675ABDF96AF981110B63C2828AE397AB0AA97C0D36B4316AD714
87FF55BDD36ABB42613BAD3FAE0694C475D86E9E070C777B8A0E30A11C2B2FF9
FC63CFF9DFFA41BE0B97B741567C8D094A56CADF2C0312D7AE73FD1B0A32825A
9D284B11D225DBDBF36B22B7259B2368188D94E48FDE06B9765F0506A3591930
7003FB93745CB604ECF641423E6914B22F4438B899518565AF7FB18ECD248A9A
498B1344691D3A1C3FFC21C48C65A08206F5DAE61C8A5DCFCDC426F0E568F431
092FA359E319B476053EA5F160FABCB987F2B5CB0A3BA1C715596D2AB9947C60
579B980B09DF6E0979FE9608723811E9AE0AFD659308EF2AC9042B9600CBD293
A37F84667E7F3DFEE4CFE9D1A676A5728CAE9FF2FD6AC2E3D46EF000EEE19E10
EAD13C12B347F0C8F656C352CE9E25FD1DB2F1FB9965818541F694C65ADA45EB
805911EC74CECA83AD07803D129189FB1A09532349290F3B994839E260B4F8D7
84169359C4206458E198125D6D90557EAB5F57DF90D3A0322435898FD833873B
18ECAEE64FE29364E8B4204C39EFE2051A24CBEEFE58DA480FD74FD1FD86932A
FC4B969E2A5090480D95036E13BEC4562CE21073D35DE0DEE2C8224EEDF6CE40
9DE86D56344250AD374E336AC4F81F679E8AF6631BC115EBC4A8ED2CEF6FA189
350B53164C8FE661D9AAB92D176F1B4CFB8C60D3A39A8B1E620CA659E44717F0
215AF7A4BA2B8092777F0CFD69EBD2EE17ED9E0287820B33E66C09D06F5D6CDB
FCC261B17A9465BE54D65370EE9E4D5B2FC31B28DAD678A97D3069932D257762
B73AA6817481993F4120A18FD3FC507042053282E1FAEFB266D72CBB04F0CF2F
C626464004701E4A1945E305952357899B311D5977ACBD405937690E9735BA8A
48F2CB508687FB49285C7A49268B60A93844BD219F93227EF1D294028EA0BF22
332652C74E0AA12A6D589BC4018439FD1AE9FE32146D1F1388918F900620B439
81F87BCC618DD5963566DD674E513D791E8CBF3EDC01EBC21661551F3335ED4B
815DDF4EB47B927D808831828D60C6838B3048E1322CDF33D70DC6311F85618E
C5EA3D7C807C1111EF7A06657B71C1E241F05B92EADB2562EF83C9B918E4B808
DAFDC06C851D07CAE719657AD3FE2A8B8B9CE13CE03B4544962EADD3781195A1
B1A57DDBE2CA7D3FB0E35B0273A30763A21D9E7D9912992BEDC93477704F6E8C
7C663082F867537489CF3E7A7F1CD02EB360312CC34E1E8D6734E7076E8D2193
932FAB7E562B87FF8A0253C03376BD946A174EC1A60F97A46F4AFD6E9EFC799D
DB50730574F346A8D1B0056A4F3057FB802A83DBAE8EF68B71960883A6DBD009
91254BDD8C3E9DCABC41977A5C7391D8A704B421824D87D8B4CDE4650B116317
04A2C6EC747E88346574CA0123D3237BF2A19DC4C6641266B504F4133F43F762
533D3E4F642DF961844E3009F4F0DEBA62956C07E4A3A2FC70EC24B325522F64
B543FF09B88D9BCB94CC67A72C8C0BF8E0A0172F7B1D202DE33C40ABEF308B44
37FDAE11DEDF31797AD1277312BBC3799D4D93669AFF90DC783DE6191B4A5FED
8656B20DE6963F366A5E5B34E90552DF6EE75BE31EC678259BD9B919BAE4DE01
1657C5480EB49A520ADE8226E7D8CBBCF374DDAC47E01700F603283E0741EF2F
23E761AD82D1D8A49E921A543E95182C70A6EBB550F865A4A4ED66BFCBCB7B0B
261FDEA1531812C1661E7C7E90390C732F7168C8AFF6E04CD744442EABC51525
B755A6CDB4157E231B35BE76EE9F2180151577FF7A7C4754B35F3671361E6BFE
B0F6DF8F6E08B280A5DE35B6D2A517E03610F436D722134CE36ACA5233F4A6CA
A538F47A212C7D845525101D92E78065FD6060B753AF6BD100261A6CDA280902
D3F7BA0B93C238476269624DD19D1AFE2AC6414E3A51F1FD15B89234A997054D
54B94E1596E9067AF2F9A0E57EB8FD9C28D5A9BFC0C8FCDC9044694863DA19BD
08590F89023A437A1CCEF030FAFDEFA9CDD96F8EF05A78F03E841887B573C1E1
65BD1812D1E8AD26188AD664FCF5A4442346328B6CD4FF7F5D7A7F6993E34805
056036D90343F81C9BA5086C7C62A81FAFC70349F8A90932CD017D54E39521E1
028AA93DD150735524FBB355183066983F1B60ED1008C9573009A0848C8843A6
0DC6C1DF28AE3C51A22D69AD053377364DEB71C748CAF18534A64C91B43518BC
2CD3F8ED7BF1CE5DB62D75CB4E704276634970D5D22FA279F7A15337DCA7EE79
9615F8497B919A4816B3586A008D953CD8044F30E690328F06818BF0E80636D9
349FC1367947B6127BAD55AED3EEC87358BDF987D0E15CDCAE835ED2F1D6AA91
940D3D6F6E252435A2F4A39F785395668130DAE81B884347254D92028CA6CD8B
3FB14173DC1061EAA6DA798B26E5853FD36D91546A8FF6D529C5F085BDE380B6
80E1A7BBE8999D9FA5A6C956FB2938A9F76FC92FDAAED3CE4A1144F1E919FDB9
52BCD16016B76397D56B5BD6BF109726F7F6B7A3F7AC3ECFB06D349AD934295D
DA39B95D0654F0817C4F0A043972604E3D55DF828F903A1E8CF2FF04137C706B
0CC99D9BB70AA5BCAD289876941D51720E5573262D5AE4BE5DBCF56DC130824B
E56C9FD65C0DFE3D104403B4F469068B96FE776AA998F195D3203B449591F1B5
267CC2B3B39D8710A0770BE0D75CFE65E10B5D46B48D95B56A049C11FF103A05
5F5A12B54BFC21D3BA3CDDD85018920ED59DFC941EAA80902E3BD33404D241E1
4CE0D6E4F12506BF9AD9C6FB6B97270E30E1C73A315E523BCB2EBA36143280C6
5FB85E6FB23F76E486ADADA8AF511EC5FE39B6D68DD18F4406AD9459756FFD8F
5C7127505F30503EF61601B6895D47D5DDF5B592EF176138A89B3DA47AEA9D20
B3CC8EAB7FF4AC4BE85F04A06D159862B0A3DD35B0FD0EB25D48CE4F478E134B
B1207643EA125B11AC842426054F8A3F6FFA358E963B7973638F057D59030764
7DCD9F973E1848913A1DB0AB5C03EB4701E7EC1250F3EF14C2C0ACEE037B8ECD
AC62DC739D72E57729A552897A74624F1978245ADC0BBC1D1C0D5D0D27C4298F
0B6A19C497B4C23E80E82EE2D639FC50ED087DF4FBD194FC6C6D326AAE519775
8559FA723C154C900ECBB896C9CA2E4AA52D6814C3A90F4945393EF8E43F51F4
78F357336745BB0314872113A07FE22A71AEF1AC4E0A863F790FE3B667FEF544
01B7FA5BA81CBDD4A9A4810B43D3887BFF80AED1AF453585D9CD9D7AC97323BA
866AE01EC417FCFADE9E7E10E5CB7A367D4166C8DD6B727B5F77F1414AA87E14
294101ABF942640133FE0175E4EE205D1A3E3AEFDEB0C8BBB979C49CFEB0423C
4EC4A2497D763626A7494944DBC6BD6B8F8DD2C43A0D815E9A58420BDCFCC5BF
2684D1507B3BF4591D3F63B87490338692E1E8CBCACA6F9D79D26E799F1D26CD
A56B940E651E3EBAFF365FBB1EF36BE6029B707453F8EA6D8A282D58BF100A9A
5818D5A1793EB14386433B74064D2F2DCD1DEDCD3C5C8AA13AF8575288FDCF31
4508E4A8B82DEDFE4DC62A046EC8B824073D327F74F81E717C0693016570D7E0
95A90359FAB5F5116296B8817E29B0750288F0C66140E10C8D9673FE2693BD0E
C5884D57A71476C7810AF897C0CBE3E964E8D652C3178E92971FDBB75BC2AAD8
11459FF3A535895B925AE0B79688C14177398529BC5134C2BACD51C4C9419439
0C7B599A33B2EEC3743AFB006E526F590056634749B082DC068BCD3B6B0B1244
D999AE70E8FFFF566E55DC9309628C36BFA67F73BE3A7C9E858998F0EEFFAAA9
11840172E52AFCDAD19BBAE2C2034613631837410E4E76D20488347C58632DFC
93CAC3915932A9CA79EAE32CCCDBD4F1E6D49CA229298398FE76DE14D5021FF1
F7A2B6AFEC021C3ED8551E9E63F2D7A853486251992EDA8A765317A981EFFD65
FBF098209A70A220DE65717A302BE9999C1EACEF89B5E40E102D9E515BFB8316
9956C71F141D2C0CB6F43790AFFE899B00CFCA5D663D4B934806C61442FBA663
6097D65D9F39908B4C85C13AF52E30ABC70787E20624CF500757712F7A57D067
AA78A9CAADDD8CE0AA7ACB4B101230BA98145614B5F1C30736D6FAE715E2DFD2
F64C7F7B63DCF473340BF3A87097F1D066C4F907E009D476263B9DF7576B2DA4
6570BEC9D4F25425EFC1847436FAC285BFEF35A039F29922B22901C4F7B92E7B
3F323E05A2606874FFAC512364DF9BB709D9B7F9F720A49A4429FFFA616375B6
97B7C5900C4305DAADFA26C02688AECA858A5D81251AD87A3BD2A9391257080F
6684C90F828A19AE931197889EB33F7699F237A32F7E1003933BF3357599B097
9A9F14B265ED2C78DFA32814948D56DE3B408336BFCDA2D4E24B5E8CE8218C03
BDCEDCED8E64FB925D4E8869D9BC3C471623FD7A4DC61D98D55F11AE5AEEEB02
49A27F54CB05C4F13D8932D2E3C04788044A72FE5217CF628681F2B015C731ED
F9EAAC2DDF5FA0E5F1E246CB946401926ED3331EF02025DE5CA8D7F86B434C1F
A9AFF1C1E017AE3ED5C9BA38617C56CAA782B3B2BFF0B6F30ADAB249B3A82F7B
B0667F0382E30ED73DDCAFDD96490D651504BD8B5A22F3BFB665D2C005B2EBCA
29A9F8DAB063527EBFF471A38606AF8719646B114CA487BF7E04C11C46EB5B30
0E5010C87F94ABAD0B88B97E6CFC79522882073DFC905E2D6DC016812813BE80
39E67277818D61BAF6222AF3A8699246DE3E22AAE6960FB51396405A4F2DE27C
FBF067ADEF88D148CEF6189F168985186420ABE61F4165003FE0BF9544167C57
4432BA176B4B5DDD2776D6CDD0DBA9D8CE6B7A5889FFDB89256567A5326577B4
6609428A9AE5CC05DD047ED183A031142AE385E82BA799670AA29A6A7F44262E
EDB17C2F9AD865D3E5BCBAF2BED6B4EC91B8319ED0E2BC6A4F42A65769A6024B
EC22223D901819D84C6274B75247E7AE6939D00ECF6F889EE0893982180511BA
9CAFD3ACCB57FA8A3151A268EBD36FCB34A44710846BAD4B154F9EDEB92E92D5
1871AEBC24CFF248E7655220C1551563BBB228CF88D6B87D9F1D588051972F26
315BA2F314DA2144FBE4520AA693768DAF76E5570DDE1CBD7460D11C5A25887E
0C5F1C963EE2BD777E6FB60644CAC2BB6A9CEA78DC92873DCC986EE326A20912
D89ECE699DC79AB78AB7B3BDBC554FB1967C5EB884B0FBE995EDCF0D3DD6CD2B
A1490902D796340FCF9DB6CDE7CEF52B08E07BB6A64B8980F39611F32DC7AD92
34D15EA651908BBB0D5CE138BCE0D709937FBC2104F83F5B68A71D6747595CCD
064AAD13E338F79E02DF55DD190619E0BD113AFF0D930E98BFB08CDB7B28D517
F3760EDAF90435D2E21CE8C3731E27B0875ED86B498D92A3A71CC351FED7B3F2
5CB93469D2DAA3ADF2041B9888E6847DF03008F1B8DB1A674DA9DE4BC7350CF0
38C88EE002EB69FD636A4A1AFEF05DC4CE233CA5F8C80875B760A3F8F73495BD
2A847A5A09E747FF356959DB61E6BC63B12E22D00A2EBDAAA501F2F8E7F34CD7
2AACB96FA7D67EDE445845E8891E0BA906E9A5F16BA0F639D3BE97B7151637D8
B1EAACAC8306CD4D4C72C30EB44CEDA8F3D8D7D59C6DEF2BD783747CAD62E5D8
454B79501D2BBC4448F45E494EDF3A75C620A66B0C315FD66951688C19353A80
30E57E09617A60FE0920EA407069961EB525E31B3424D56944D983CA19F601A0
2EB157BF0EC4298B879C6C4BE08571872EF80B1402D72D75FDC856D83908AB58
A7A6C5D8CFDC844BD3047F87471B086127C2815F527F070E680B42E6733CE444
23C4E7361001731A095947F4AD2C4C657DC455853F2B7383D91A42DC79434778
89A6763155E7FC33DFBF8ECB25C5C2CB35296542BB8E9FA85EA609ABEB0363D2
C138E77CB5C4240EC2725F9D08F3896967A1F58695A01F1A2873392174BEF8B9
FCF87FB11837FE4911AEF91DA5ECED2AAF303A4FFCC96EEA5E07ADD886773AD4
3BE7E571064F4A9A9DF9551D56E78770217580D371C6BB3F6F636C5E19460405
6EDA520EA2753FF836961013209625ECA0BBF0025F8783A4400CD702B48EE3C5
3E43A0518046B04E4A2A266E4FC707DCE6085255CEBA5479223FB34F4A59ECC4
344E7567F47C776B4EC0FEE7206D27C06741F0F200D8D30987825538908C3036
8CFD3ADE4790E8CACD957127801C3B0ACFC5613463DF726CD05437F6B081CF3F
5EEE5E5A96F1DCE59877612DD8099F6BAD9A5BDBB8BAEFDC759EB54647FCD620
0A48DD72D728C10B343E99B8A0EBF1B460D7698A1DA063448A07DBFE0080A6A4
93180E0D3B7697CB56747754CAF92197901E7BD4892E1D22C121C7AF19BA31B7
7D62FAEB6119E1A3B962CBBF49CBC0FB6FF4164D26BC056E2790BC1EBE06A612
BDF5521CEA49EA484D7208D6FA8F9D85AFB0092E7CC538FD572BF889296C41ED
F8BCDA576DE358244C2C5682E21BD9CAB1D2032EFE6B204CB34A57AEA082CAD7
58F9E2BE60107646F9D6C9B665189F6E884A19015D3BE601C0B258E9665CD5BB
A0C3F507C4D001B7C8D318613CBE99BF7D04B70E643F385D6B52E2CB4CA3AA4A
DC2C770165FAF9C640672801A7E57E4FF02D8F8DE6BF0430BF2B6039464D02AE
4C04C34E976D3D474FCF52FFE8D10E060B6C106F94AA1EE1206E431D2AE3252A
B99013E2893E1788C1D1DB4507591F85053EAA16F51E8DB68A9ABEACB2F60AE0
3C2AA3B126BBDFD13AD7723A0015AB002038DD1C774DD1A5921F726C0529197A
A0700E5C0E43F98C975E0547E13688656F585B9132481FB6D4037D7E1DE8CF57
B6A60DD4DDFFD517D9A61860BE740448DDF6CE1270429B2C617BCCDE708FC1DA
5F51080632818619911CD84DA1CE262C7253F898C0915BB7CC8F9337AA8C8AE9
FE5120547C39B0EA13146417F9C48EB2ADF3F46BE339A32316087C7D998A4CCA
F794F922361EA7984902A63D52891551C995F9378F5DE92439DE7BB6EDD74545
F7F5E51607F96533B417926EE7E1396BDA22BE7C8B5E04EBF216A6EE79233C41
E2ECBCD645F92207F8517C68A5AFCE84D0A6C47FB6BBC4854BF5E77AB625353B
D67F4AD63E2047CA13360593D016F19EAFF8BEF4A3B0896043B74D12DDE546C0
CB164E886BDCA84D8F1D35B12DE5F22549FE68EFF8E0CCE56623CAE0EF983330
4CB4345C80692A4BC5434A712310310B883C79BE00C1F25DEF55A5BB22AAA4B6
6880A36CD4F92ED11EC336107989D8A645A32F679C3A002F5DF18D158FE3F826
9101D9D7821941B188D7F8420C41D09BC5CABEE41A461ED958FA0227BE9E7D8B
7DB8AC8F315F3441B03AC09BB3323D232168981D7839452575C7B3F44BE55BFB
BB672F233CEDBCFF5DDB509F8D2ECA075568EA926C12C0D38F941042919DAC4B
D02CCE5FC6093564301431AC809D44514582A7D6383A20310542C1039ED26270
5E6AF3433F2D3D6443D6DBF4C0C7733A6FE9AB76C0EE36D3D51AF93DD574BA41
92F93CB7A93A57314D09B33B79516CF4256C1AFECB306237FFC4344A00B7AA07
3453B24BA74E4212FEE057267F030BD6D3F9F1E0D7C847C04D58988D00402DF8
794B1D73940FAA3C88840F5C12D91FE68158CA53371C73B3A7BF755EC54AEB8C
0EE218AA8828365481E82C702F2D9A5A12D38DD15B52371CC6EB04C5DA0BEEDC
74712CB8A6654F600380D34209F5B4A158DF3084CEA25DED422E0ED42FFA829A
4AACD811B9B1D1BC2B47072D5C082DFA6D5DDB0939D8AD42C0B9108FB8E8F904
3445D4E0ECC934250B86A2B91B82CE903FF159171D6532306F07A1188ACC0BDA
DD12E005E4823F9EA8E3A8294D816AB16D3CCEFB37D3FABB37E3BD6F09CAF327
C6281EE8A87E95CF3DF3FF5003761FF2070A0162C2301E3DE6320E4F7F571EA1
D80C46DE51CEBD0C96DA06996634DE71F20FCD1935ADA40DB774F03B570D1768
79F7154DA646C7F6A2E847D5AC15A72BB3B447F7AD46331A5B0ECEF799D966D6
7132DB5C681FB3C18D1911586F2061A45D8BEA5711A14994D7039B6934CC29D6
B2A9C791741098C5E3499E7D960DBCE77385E78500879B375DF84B07D73F13DD
5324947DDEB019500E8FBCE8F368D5B241D1A622A3F4C20897BB8F73A61AE9DF
20F80836963C56832DB6EE80758F84193A413B4358B51E801985BBC479A084EB
933191AE9A655F25DBBEDCF558F0B40F457A6A17493323B3B8A330B20D41EBA7
212F86907A14A80406897974D32BF9622DF292C95D28C14D8A91E89B60358623
4E8877B35776792F57054140FAA50D3B0EA52186A8A19A8653CBC3FF333C089C
557483220714C2CD7EEF52CE82070FDB68A03C052D4A7569A98F79B5522C0493
AEEC2F8945783A3F7FCBBECAC423EFCB573CD2D0DD4DCF5CE8AC412F2052DE91
65B5FA989AAEFB2F85EFC2E8EA390D2DE1C39A2F11B6493FE38E02D37953FA4C
673E5908EF90C974BCC28E06AF94C0A01D586FFFC05DD36F778D8BACE6C39892
C2E678DF07F6E5F7F9DEDD098FA179B8EE9D4CBEF1D42B2D5DF35592C3A28CBE
E9F91E1D792D0B8E7477EC215FD698B62154E1C731321F5516DF5E60F059F014
BB18B3A8DCD0B58D3A18AA37D4C5BA15A449D65D7499A52D6EB6C1B74A091CAE
AC8D1C72F497E2A010E3F781C21B44BF5BA2E45B4D072D2E0BFF6CDEAD70C437
B55086E8EBD986221E8122D490DBD04B9E2F62A0A3EC3584F133BB7A04B342AB
A1ABBCD4488E8EC1633579C98021581552A90F911E2634A4B9ACF7ADE5B5310A
4E7BDAA5967AE09950B54CE2DC59D27EDA8CF314DE4EC1350AB9C6BAF7DACADE
9D61D66B29E5BAE53DB33906DDE3119DC7F4DC3094FEDE119533E2D4EF2545BE
F5468D829572F03455C7DA5B0D8F5268C9A289927BF5DC27EE4640F8A261D425
41141BED122CC724EAEB3B72A578578626A29B22DE367549156596D297D1599A
F98436A0B7B9A6E4EDCD8F47DDDB8C1FD5D6A3AA4917F32C414A7F3F60C6E35F
0701933C63DFD34F5D29D8112BA229C30190F6C75933CF06B92B0984519550B3
7AA729967A8CE3B177F3E639F5B7C4BE79F40127594F99F206791FCA7FCBD3C4
947B9E8079EE91C9516038B041C126971884A2540043B1C4EE64CEDC583C1A7F
674AB560ED0E258DE2ACB8E3A59B0710C2DF4AEA2A2B4B88AF0EC8AC16DFA47E
1B7000011D58AD4F1BFFD47621376F2D4F039E9F68CC6BD6F513909D28CB3E5A
EA955D6FE3C36F5646D347BE04848870653436239582280F19173974EC6D3D1A
C023AA8D72172B74B834CA03400799772D58532B1C9C7B474209957BC4428FD4
BAFA9943885CDE037B68EDDF89AE9F42A1B304C5FA77ED80A55191EFD63D205E
400235F3CD2DC12881775281FD7A8B4132D5C35C47D639FC228DAF88B63591D8
1401072CA100D46D385E0EE32F660557E8829A1C08169CB9C24AE272994F6B0F
B3C71B91E30FDDEE7FD76FE935118E926046C6A82ADAE5B52EB05F1D54C4BBCB
47FFFC4D81334D762B22C96026E9A36A8E4D25E7A0656A7ADCC2A73404EF2F20
0272BE38AD6D773BEA2232D411483F52E6FB5257BCC840416783BA0562AB6D2B
F5DD0F004C44B0416432737C313B4F646A804961F2C42FC7E7A9A798C19754DF
BE033E3B19D797A46CB808A697BEA0A9483EE99BF322B6E47DA1C3F5F9490CAF
0760C2A671F875D74FDC16F7C12380AC1F7C1C713AE7515F881B786322E613E9
1F9FC7B77053BA09D2D5E9B7BFA63949C6C3F6ACDB5B54101E9619375DE53969
FF8398AAA049AB1456ADE77CF8106836E03BB6DE888AE4DEBE945C3A1C0511D1
5411E37050FEF0A02207D3D78479CAE6B97B372AAEB7D2196F268B19D79ED71F
5CB50FD185D66E23A2EB8934E203E74A4A667246DA83057373EDBB248FDDD2B8
88D1686ADB776566081FD010BF560026C7929C822B2D6F34107C57FECB73CC36
B5E771DBC8B83AF2281BF07BDDBF280DD4F4356D4326F87C42CCD38EE4FBC54F
F23951E5696FDF4D007164A240233EEC81E6BD6BDD84B8C2B99C18C9D459C960
AF8D960F48B313B56F6268E0E1E8BE2C0E11F342C2532475E58CE3AE0562A215
645EB12B667DA781709118760645C9C49D9EE84A0060048ABCE3EDEEEC9DF6D9
9DCCE68307F61E46959F4BD5696BE85B8D593063A38EE0DD8027A65A8CF77E9E
878E4AF18385156FA82ED72114C4595E276160067B75650D2A07E828E6A21013
F90A6E7C2DC16E55B0210DA28B6FB5C06EAABB01E6079A509AF443DF095FC288
009C83E451E4699578EFE86444E038C64D853FCB1F307B7D5279693A30CF3D0F
134961FEDFADC87F9A6BD2BDF3C5D8E1519C16A4FDCD3CE9B789431B7D80C701
1520BAB1B8243C44C16189F0C9858C72A4AC08A7FED3C30196D09CB977F4BC39
A32DE3542FE23B6D5B81D9E40075D5AC3616724739C8EF126232CCBFA4E138FE
9DBE64A159497D60B7410A819AD837C8E0A50DDB1D16331DC1C80D5C5A10B7D1
2C7AD520E65032CC2B43EFD9536FD889143D270A83D931C7AD75FDF186A361BE
745ABE04376E7B9B7FF778C0DF3571334454FDF188865D489F1B6C1824BA8BCF
41CF6F541896CAA7CBB8170028516B776330F48DEED0045094DD293828B24922
205A364D0D66625D23CA155ECDDAACB0486E38458EF0F9E033D8AFA99F24613A
6D3822013FADB1529E7275E4F1CA7A6579FDE60FB1345DD21902879389F4EB9E
A3EC69BE255D30EFE44648309A5EEA80432E7C895E1D6B6837EB54572896ABAA
9C83228A6F2C6D300DF25D928F961BB5C241EC207578300BB9AB8890BE834395
06DAFB251B23BFBCE1E746D439A803654EACA3D9BC926418F8377C5F6D8CCA81
75E1AC72773461F21C269E3CD58667DB2AD95D51911ED503778477B84FD75F60
3BA497B3016AEF07AC3FD8E422A302644FC3DC48390ECF9C678AB0C38F8DBE13
883C79AA1B0AA8F3D5E4457E4854A389C267AF3CD9129C9618A51AF9ECA8F9B3
713E46614B86598E4C467FFDAE19ED8677E073DECAB7F6E09CB128868FED8DCD
280707025EE5635B1B4BDC7D3B620C086778DF4E7181838DBB17081DBDA37A83
749F286A748C0AECF0D7A692A78FD661CBC496891C6DF52F02458885476ABB68
3D055C2EE312FCD242BCC9217B0D6E609142CB112A3D04BE7F23AF82DCAD704E
0E1D20FF571F9A9BD855FDCEBD51E5D2F812B2058EAC63EE31244708DA98BE2E
CA44ED2A286AE56E4F269B6D742FF12646B1AB10971C91175B41164BDFAEF130
B7722C43BE1820E33DA8963B0D8B6264BA3E32C5BF3AFEAA7FD150AA2FF3C6F0
8CE1BD33A23CBDE3CAC706C1408738765930821096075286503F8D14C34EF31E
BF9C261A0C1CDE50903C4D6D51C010753B93F8A8A3710A784FA9ED0A9C33ED28
08F753B1038ED2867A7BF34F98F47B44BFB2CD3CC1B3B1DB2F75D9630E8925BF
BEF52D7E2177ACF6387A93054695E7053D60018586E85B963083C3BE7EA53FCB
C2186179D736308A596D9350D777A7507EA9EC11EBC1A37B6E4921512A8AEB87
0EC52583D5F503F11905E855AFD0117AECE19B1033783A77BCAE825F77DC8569
0631413B73191E6124630D9FB9699AC5B1CAE2DFEBA6208182304ECC59FDE33D
D0F046C39D51F7561C63061EEEA2DD9E6F6A0CEBE724EF4372ACAD38670F2032
559F4AC2E2674A6ECE57405B1797B219FBE2C49914CF8231F4032833E79BC094
2AD42DFE1AF9F90CB16501ADFD98C10862CE88CA2B720E50CA8061FCB65FE30A
DCBBE90671A81E85AB737327E35836F56EAA09D62DDA226F884ED572858FF188
F5D2B5B3BF4ED02F17DFCDB46F8F719EA6B868631E2E8375FC755296916E4A36
647606F0E2D4C659EFDD1275FFE443A0FB105409CAAB189C975B1F4193018159
A812A12FD245B4DDDB86795B383C24C26100CE57364833686F5FD13C261EE3BA
55A310490FFE07489F1CDBFD8A5319D0ED74D7340776EBE1C47727CF3F0E2ADC
DEC7FD074DF6EA17C3E011D9CA9213EAFA917229F1B5BF0068B4DCC61637B9D5
39B293B18F346CB94DB8738C97F80E062A274F265F25998AA465B556A28B65FF
C59DFB3D1551C50EF02949DB6E4912324F44C8750EF676B81CFC563BAAC9CD5E
C2A75CEDFF292D748E67B4DA30668BE165E698886D4F5073B9566C1CCA98B623
2A3515F3D5530B7421C2C336C1B296515814FF315BEA05654E19F1D872D8DCFF
C3C07F8CB68BB5E7053CC1D40E0B6603D727907D36D318D4B880A6DD9DC895F6
8A7ED37B3F448BE5BD4E95636D422F032E38A5A2129251D58E8FAE0C11F0AC55
EA0D1A9BD4756E9377875532332406AB07A0DF3EC5B0EAACF50EEE6D52A25FDC
32CB71CBD38BE6177EA2ABA80F249F74E9012603A5DE3210A2515B2E719D2B29
1563E7DA1729E998A3EAC8AEB9A6C83C72EF4A3FCB8BA754C62FBA2E93261D3B
E535A7651031919DC00754C3084F498A853950ECF9E4995DFE56F6F3ACF45DAB
73800162E0E500694814BCB1B0BDD0A9751FB6166A405E44664E2EB0CE3AB664
B3415002BD868AB38E0E9466E2111173F455294D1FAC0B4670ED6FB1EC137F3A
EFBC6B277D976C9A1EA4B6F506D55DCABA7AA118BF197DD13ECF1B5EB8F5E2DF
3CD89233F45930220D58FF212BC90E9D9DB7E38A539E96EB5EB20B7790284617
898CA28C00DC35AAF773D74781C5E5524C586C47332EED7F5EFDFEC95BA3F589
8BDBF91C7619F00122BF7C82946EEB738964EA580F50FC1F6A1D626D0A983DC0
A41F9956FB39DC911C09FB7D79C63F54D27733CACDA75401708948360A9BA6E7
6D95F03F90B0B5E941F2B129211AEA58B09A8CC00E2B577866F30684C7E3080B
F169389ECBEAEC60C2E2D2572B650AAD8B5CE8216DDBD1D7E2F734546E495A04
4FC33DD05BD3347DB2D12C44024D83BE962727A87F0CE1F49A0555895731FA6D
48676744EF6BED716699DDD6CC9DAA27A4AE9475ED769B33C7D864F5CBF9A0A1
759D4C740836E659E5F2A15BE5695BFD6B9220894D444940F3DAF448D3A93916
25B43D688781FDCC11DD9D89BFD12BCBA9858B5C0DD1CFEF804101DC0D24A063
A115077D254F7BD6840B7C2C8732137D29CAD8DC6F129DADD35887FDCDD0F494
7FC288DE6056368F22F0FD143C29A8D0C4AC16A46ED1B76B4FF0ECC884ECB543
698CF4CAB58B01C12FF2850FED7A73ED291D2DF6847F49E9EA818006094719FA
5FDD91ADE684F48B12DE96FD235A7A4B44A2A8A934F61E341C47AE2B0D2A3EDA
FA289A23122AB5E3B1BA5D97260B8228AE75F949A234754F2373F462B00C16BB
904A4931216C3752AAA20F46A50B323E9B385591EE4EFC1F7DA34D5D34571415
FBACADEFB21824C8E050EBFEFAAF3284C571F105C820567A1B0A2EB33ACC59D7
F7F8877065A8A060ED974D9C83C645D2EA3E57314D09628FE78CE2F1D5A261F9
DA440C7D052CC59EEA83CA2CCB109C13920641E30377C7E3499D24676A07A92D
F4F893F1347FF09B49BB1E14C98B025F4C8E2D9C20DED9D2EE4FC303A4173FC9
4FE9620445548A36CE094F7FAF3A67B53EA91AA1C92AC6E48C340C6A42C8876C
0974853511A2E609A36BE4ABE27C02499DACCD605EA6479CE7297A3EF575FC0B
FBE199D4F4002DB9727060C2455CE4F1EF2B6B418FF434710EA3BDED664DA90C
EA66F4766118458112A1815A98C8F1CFCA7B845F480E6F1348661589F60EB04C
7B9D11B4F6F86B3552D43B2AC15B0072A0D719E992C5BDF2B5DB2C325615AA6D
4800BB41141B924BF9B767A68C408569C35A4BC4CAE45E3E24617DD92415BD33
51467D2E57EB956D38AD4E7CAEFD56C1443F2CCEE5B8C72527CD8F060A1B2FF5
21F72E3A6F6ACC0C7CDD3216FFC3BF466F0B27280A482EB960D49697CC285024
D9177AC69B922D3DCD7CFCB1DCD08E683890452E1C3BD0EE7B12F77257437F70
5EC16F68CC8C71829683B7B0F4E445068ED0466DBCFCA44915B3D05803568853
CA06B410D56E6FC0D63356D5272DDC86450C585A904CCCEDDE9E6AA83330D592
61E39615FA9FB46EC58E8E7CCB9F8404D30B9354F4E3AF0767CD694F4CFCEEFF
17533ACF43F77B2A5E99325FC176F29C9DF1EDBEDBA52EDDB625E3510750949D
65B7ED0E47E1BF088AC3BE0EFA21F38D22417A2844B54471F61C138FED8495E9
A06154A4EED03F106D26A7D45CEC40270070D4E6EF5EDC9A43981E75D854C751
62AF5E940A8649CCAD1435EB1073930E755137336045CE53B9687D0EDED4E934
7FCC9BA7368075BCA7A8C6CFA36E3A5F3012813806BA31E7B197065AC2109D74
75AC212B79210D6A9594D2B4DC00B9888C45D34C4B19692CADBBA392EC3CD8A1
AE25331B2BCEA8BAAC74A4FA7417FCBBA872CF67E48F2074595F954DD031C8CD
EC989F71DF6CE6612BBC35DE763254730D44AE3228673E63A566910F3AEA71C6
87596C1417D1FE333CFFF8953DEB1D8FD0DD655E4AED4ADB17591D0FA25534F0
16DB0FBC0D4CDE3ECD53CBD507C4055B055B6509988A2F417935204C15B93E6D
BC7A65770A7EC76E434AD3E1D0280463EB95E43EA42A6D437789B21C4132BFE3
62063B628FF0CC95365EDE54E76970878C6067631A886ADCFF2E5C3BA0135F16
61D0FA291FC8304142A1716A1F634BB14B7833598650477E3D8692FBBC5365E0
57C4E8308E6FCF57EBC550AA574FB19D17959D22A53A89F72D31C310A6ED9864
CC45A90CC0458188EFC34F5FEEB627C376E03FE1D7606518B8CE0F06FEB43911
431DF8C857B2D3CA518F28CBA0004CC7455D947FB7FB6339A37E76EE438640A7
9D675B0CF2EAC0F99CB99C7BDA9D1B996FE5CE82EA7C2046EE600DE778F0BBD0
7F14AB9D3184D8F7A38FA3549E6698E551A61693CCBA132C8FBA6D017E3CB67A
170A84ECD0E6D107F9C2A418D38D883EEFC11A41EBC0BCE707CC6ABCAC4A70DC
803D6C4CB8CD6E3F806EAB1ABBC2A4FC7F2DFDEB3C462F1A5B0617D83543083D
7F3B45936654AF41688FBD7E84FF4486E983C832A98B649C6C54CDFDC55D30D8
A40DA82DBB1517934E07AA63B6DCD4F6ED6CDEF6F5FA0A3F0B0D36C0637553D8
BAFCD533806CB395E18FDDEFF24742572C96A8AB762979509AA3879E50134B3C
C4B76D3FD3BC6CCB694E271ACE5E614C85386F6A23DE85B305712185B5862764
BBE75210C334617E619491302D97E608E8665D642BD1B0AA5DE373E72C6EEC77
D7A030FC7AC311A9892DC061A249D814386F9C86AA82975A39AD4C1483279722
D602C06DD2425AF07D275D8CCF3800F99765BE879966F7C905B3F8975AC76439
59F8A835AE6D8F84AB906518260D336E1F242307AB8AC978DE2A18F138CED28E
93950B2D03AE24123CB3543A61C433021FDDE8823EB67C9D1BD976F001DDAA6F
1D540166C13FFAFBAC30C6BD9F47390147D27FA2AADCF6678FCF2AEFE4AA6AE7
2E04FA10835036CFCCAF755E3BCFAB839CD5DA9798EE83DF721D43828F916DE9
F0BDEE6BCE076DDBAB965BCEA1F0AAA1F8313DB39635496720CBDBAE07350474
D35AB3A40BC71DF2E65CE4FAF61832EFA63E44798C74FBF5E3224324E18CD74F
4F650B381083B721D23E6858A8AD58CD6EE07C1BD320C74F4C99291E61CACBFF
B4AA064277D1CBA517DFE28F5B6D3B37D5E4B79685499C64A8DF852446D52E83
78950177643662B27C474F02A27D84C1C644838BAFAB55CFC805D3E66AD860BC
F49D86215B226C58CB67B58A46E40B68A5754DB4CD13FA86AC251F4D2F7FF1F0
C14AD20B61FEB919689998333E09402EB328E5C2F55D838E02F902B1187050E0
034BD63E5C0EF28ACFB5CEFF47F4BF1ADFB9CEF48A86D2149AC302ABB9D3E38B
E0D53599B93465A5530D29DBB992A5DA63A9007F055C459EAB19D506661C6937
BAF6EA5E2D2DE0F9F09FFF53B837EF9CACB96B27F56DFF0C89E0BDBA6770EB54
1D41649A5436A4A4ECF3BA9F3A9BB7EE547734C390E778566780A8A747E0B92F
9461B0898B5626F6552D80EC65B012B7A250FC3A9E3389DB8098C2D231BD166B
9E91C0212E377271BCC15BAC1F37F1315ADC183392BA78E7AED105AED1487F5A
644C8BFA54765009D826B55A6C24AD24C81CBFD4E22215B3AD57F44D58BF58C6
DB533DA731A59A67751B6874DC75BCC45E61EB50C58F194C140BE0A5109FE65B
031644FBEC0C9FA9C631E01104D36772E4C1C3969B0AF8F58F35AD848DFE736D
A2924D7C2102CA70
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFBX1095
%!FontType1-1.0: SFBX1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx1095, tcbx1095, labx1095, lbbx1095, lcbx1095, rxbx1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-227 -316 1723 930}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA0E2F461BA16EADB32842B6D00C76F8A3359BAB9
9CCDA63EAB4501FF88DF4CE0D9DC9F071B528726352196D1D889EC0F0512EAF1
A6ED201F5B8FD2B90DA9585F5B2004EC8159EB426405D76A85AA0ED1D29596CE
FFD55DB52BF5C0325EB43E789D2128DE66E59F9A7C84CFF09969406DA529C87E
3410723FAC317F161388C55FBDC43B850230989AD991ADA95B1CDDC4D978E722
8BEB4E338C3EC48106B4274FD9FFC7CF03EF238D8160A515EA93C009A8F2D3B0
1CB8041F5EB86F1D975BF4EDDED8B7D2C81B665124CB1562B71114FA44449C6C
4DDCBBD36BC95B0E569A5A6EA9219B151426165BFEAA914437CA89EF4B0F5911
AC054509BA0102D462A183A29DFC304DF74A289A052531CF1C505EB94CAF245C
33DEF613E4F1B785DEC94402A2C46B2DD4FAE5DD176985E45A03D85E442D7D77
A7586ECE67CC2360820AC46A8CA0DE0852F2F3F7ABC9D4FDE78321A4B63ED2B0
AE51F2F1CBFAEB6FE8142B4877BBE69FE6D4FEFAB7E5A8A4B22803992910064A
F998A0573C898D6EFC101CAE6E1FBEB97001A62893B76CDA3996BB92B7C2B8D8
F5C16CD2FBB4F8D9DDF27E66377E9BBA95CDFFFE02D05938F97D05AB348A74B9
1D39CA72320F8788593D99FE7CBBC69BE81D60CF58A584C366D2F5874A3CA93E
3D630E60D2D74E3CB14ABB6B38E8B409EF705FFD7B13420650A3E56C4B5AB090
6D15C8CD09CC2F8B32005F24D05B7E5EF52B8BA4F1C73CFB0A908D42CB6BB6E9
507EC5AF073CE78791C3DA714AA60198B87689F05EB1298F554671C81123C070
925E3F07DC46D862F6C874E548187A5EE7C6B713D5BF66A7CB3F258D2B99BC48
41EC9202C3D02C9A2CF71D52FB4D0EA9DF8BA01EB2D2192FBDE6EB1E0A7EC955
13D077AED82C96F3A8D32180720DA7474138F847B46D021414BCAD1629F0954C
CD7808E026A4B5D79809DA84748C1DD5A1EDB6AFA088E9C1122555CF98C46549
F30B5A62907162B395AFF56320A138B76191B06FEC97AE75953891B02DDF53DC
CBB20B24E56DBB752A5C0D7940CF7E3E521FD1777DA4A2638139FF78B960298D
1627E5DD2BE89CA00374E2708CC47EEB701A6D026C56A4B495AC3916730A33E3
F20BE70B1608FFD5E07D666781A583899A9E954CE4EDD9144793A659B499C192
207C1E52F523C2D6CF26F77B1BFB04A74E32536B7C6632BEFE3B123CA985B721
3FB2CDA7BBAD5C07718689DF3C569C8BCFC0F8BC5E075CD64CD6230EFBA46127
656070359652536BC1176EF4EFCCADBDDA29266D238C0E7C800DB0E22BF8000F
D3DAF9A8B70334512ED37A8812D914FEE39E343EB23944236E5288CDD4B8D323
578F80BA1F68DBB0644DB800ECDFEE43E42D956605142993345431B9FF2E3660
D108DA86E2117BCEDEC347C04D58988D00402DF8794B1D73940EF5CDA5F711EA
0BE543BAACDEE7682FAE1239CBB0BCC0D1B9351FC2667B316184CA25DB43961A
A1C22EBBF71D328B75CA05456A731F177F6F99EEB4BAAC06004DF835495ED5A4
9C49FCD5B1F03444A2D651AA5DB383E3747179FD54E0955DF11800F8D76645E6
A7C09AB7C7CD9922E8788E3B508D7F77C8C341A1FB529EE1252A1158C125100A
5B42A2E400A501580CAF3C9BC9C74EE0BC48854DF648EF2A0C6AFBC2499BEBE2
613232E4866B0F82F15A18E9324C7A1B5C7DC8375A1D2E8D121894EDA87B3A96
3922A29E00BE8334ABE712B0C3B23708AFBB897F101BB80A110DDF7E4E761488
03E20DD866B8AE8BF3ABA756B9D8DD0E3B5E495E3070FEDE72BBAFD87A45386F
9DC59839783DB864303DE8C85969BE5AC5245A0270CD53E72377D6B86CBA8331
76323D1EA2402B20E1C4E68C55F1C6CE31AEFE7C8215D7503417B29FD16BBC2E
221724547E764D44F5A021DE5973BDFD4B0EC4B5A6D5DB3CC8716D1EB0AECCFC
E96209BEAA676650FF0DBCD65A89DB5513B266D00F71935DED5AF2E670850928
D9E6A69CDA5E108DFE5DE022D24C8DA18BEC0A790ED8BD50E7E77F002F99E34C
64E6BF6959B6E245417A3CCD30C9B8053D310B4D8FAD6185729F7C3CCEE8A9DE
3EB39D72E9C776AC7EE344A718174809E3C057C10FDA8B73C48A1AE933CD7D3D
2C7AC2D5BDDB2548C637EDDDBB242E8DC921CFE8851CD927C5AB6220E7A9E2E1
F20A66019777719D6D13084BC8BED1ABE47EA36D0F5282F33311497AC69F71C6
3F014D07370671C52CEA8A5E53198522C434869A0C67906B55C46E56F8C53790
FC92D2D39862E3081AFB5C0BDE232A458F3E2A5F38E7A3A97D8A6EEF387C9FD4
AACCC343705FC9CC20609255F68F76666D9D4647002BAE0876BCD353CDA8353F
F24A48188ED97C54815465EB7CF6955084AA74B9E8459ABFA31A96A177DE5AA0
0C9854DB2D25E958FD56FCE76D0DEB67A47A2DFC20F2318C9F6FDDFE21C2CF81
2CED3B67F6B17546BACB6631A51EA218C8811C7A73FE4972A46F1CD9A89D9F64
ABA4B585A674CA2D5F3B0CB9D33D6AD3777D15E08308220151CC188E305B068C
11A8020D1A155FCB44FD22631BF2BB54874F6206780CCDF810419D871BC103D4
4D540897B6A16ECA55BF3294FBD695FBF074392D4F6BC29FCEE662B55AEAAC11
55E269349BA2A308AF8E2F749E5C419AA6FAED36112D021999683525D02165F6
6089DD072A91BE85FF1C6DF2C65642371FDD926E05A51787E4277BE65DAEDB3F
4C55272621B9E861892DE53E6410EB703B078F19364D0ADFF64E22E62E87D158
1B01E528FA58EA6BEBDF5ECF8D5AA737E4100F76E02BF55173A43A7B825C2C6C
6FA277DD764C5A399FC282629FC4BC62DCFD957081CC3F7527E07CB3DA0D3955
9010B0C4BA7D1CC306EFADA2C371661BFE59A67FF99F199B75B3FC139BB72D68
973B646833D8E3F6856EDC61E235A2061DF8BBBE50B9B21C5157EB399437F353
34B9E3DCE9AF9D6ACE96BC6BA8BF0A9B61DE2EEF671E9BA70B18C3AB8B2DCC91
CC57F409F72968773F78378CA104CC8868C27FB79F1998016EDE1BF93EADB348
14E293F241FFADC23C370D6EEE37FDFBCD69FCC9B4A41D8B3658DB5A09ABC99E
6E71CC6F0658A3230D245348785C7C06D6F28FF190611738A00786E5ACAEE8AE
D7E4AC87D23332D2E74E99A08C36AF8E5864D8C886E37B223E7F2C51FAA50DE6
C1BE4E5AD2BA141D2627A72926E2A2BC24B00085E830EE18685DE55A83EBE394
D05A5D8DDFB314C32FCBA85A094864E256176574204A324D1CDB2D9CF0F76258
639F4FB3F7422FC91F216227CB1244B88C6D380A1B63AA077E58D96A1A7A0121
1185A5DC3338C02C4D84CA628355222628BD156C286C0FA38C2194EFBD4740AF
DF84D8BD5565BE5CC90861F3ECFB53658F1F7C48A7FD83662EE051A1FBF642AD
E2DB69A102488F32B254FD6C1504519DCBF439B63B623D7A221CEB4D13C349F4
187F84F46288FC4FB53C200FD544568AF2B59FEFF07A21D84883585F79768AB4
F5AA13F2141B2F9F239D53E6DE2135CD1C89F2B41F9C2E82EA89EB37F516F7B5
2F59163237230115EDAACBACF2CFA2086A1B4379C45A7DFD86475B74A8B72156
6EC9A7373C3A46472FB60B4D1F0FCF49CB9DB4906AF58FC1F6C5828D0B9CA31D
24D0231096BB8B09ABB51061CE0E42EC4E0A062D122EA6217773ED5F2DD135FC
7DD99F76951457552073B6B9B0E18190439554DD19B40D032F02ABD7026C595D
A672834C4207FB1115A0B725EB707278503C2BBF286673E6775EEA0D9E272C0C
89D59051DD27E2545DC0F78182DB6E73941EAD36FD481E047F204DDE1AA36C33
209D2BF5FD6C097D80179D2EFD2936C1B63D2AA73221F6C261FB223E55574BC6
C5F188BA6CD7E211F0363C070B8712C34ACFA5BBAFC4AE780BBE824682F67BF7
46E85C18EABBA5C8859118DCE36A4C67AD7E76C12BBC90944D371843611D0BB6
25E227C1394A02184F9EDEB92E92D51871AEBC24CFF248EC622A009826CA2F60
B0166207F7F13475CD71A39B3C32BDF8A354C9CEC1281F967337DC487299AC4C
0D7FF5DA27B164A6E789176FABEAB6E0BFB6DF84EFC5830D796F810686720C73
00E1D7C5E3D6161FF626461B0D0857D1C425BB6FEC2597D681EB4AC7FE97768F
E3268CF65119A1C563F00FB88D12C24EEF8E6265DBE574300079E65214FF64BF
79DE14D5021FF1F7A2B6AFEC021C3ED852840E35B2EF8EC566BEAF52F586DE03
A1E87A876B6089B8FB12422B0DF8A4E24785C27689BEE6AFEF3A8A1EED73B688
26B15C388DDB60F5B7127CC969CCF4609576ED3B57778C0135B45F94E83B6107
150C7E075E43B2CAB8609B97E6B3DAA1159517D1805ED8C87D414E76D26763A5
93F6A5BCEC484D35EF5F04CFBAD0EC3673AE2E597FC6F6E71326257040F3D602
DF08C37E26F463FD66F6420A1CEEA62CEF406507863C1EC73463A3CD188E33BA
1D4933D7CD58F2DDB6A869318202E038E5A95E714ED0638E55474C540685A56C
AE5625006280C3E7B8C6FFAF960BCD5B1F6DF2AC047ACB40DFE1004711FF0870
4DEEBAAB06FD335364150591B14E138B30527B31C8DC9C5E650CA2AAAA97D466
2CECA00B42452F9B081A87B77DD815A2C792D89D49289F9FA56B907D4E496BB4
EC078808C7FC3F0B78BEB3B6C103F633F3FC889AC110C8C142BA24A42FA76D16
7DFD3C5717965515D075FEE814E3C00B666F6A3BB3A46B11E4C2FAC2B039E974
CB7CFAD7871CC1665E72E3E66F8396CF70657039EC1F69DC75B6AC322F6CFA99
0C70EBFD96E8B634858C202531B63C58F8A4A102843A33C4189E4BC7B861325A
9758F70935D55B1F77CBC94239F0697807C7933E921AFC4028F5784ED6F378E8
7DA7F29B16C314B427BAEE583A9D84E8462D20F60E926E8A89D6B762991BBB6B
FA280789C3ED974E2ECA66D922B3BD404A7F3F60C6E35F0701933C63DFD34DE6
5A8440755E2B8EDA9D6A7ED3C9E82219D50434EA3D614134C01FBAF94E5FEF0A
A1B272005EE7C57E4C4C6F050BFCF9BAAB997DDD27F50C57C59B296C0FFD4459
C787E72CA42858ECEE53D018076D984CF6E0EB68D666A4E0190BC27A7957EE58
BB069706DFED8CCB83B7A86D23A7659626B33FBFD83BFDA810B501DBDEBBFD0F
FE6E87144F70BD779B62DFADBE3EFFF68A4A1AD726E0285C0222D3ADDD327581
47044E35227D5C3994B4BC193E4C99697E8FB895DDD8C16DBB6CA0F6475E0F7B
50A348BD2987A45AE742E8C21E789822AF2C02181867086C784740030C7DFA44
F1681CA7065AB4CB3A32830A649AB64B224A00DB9F8F9A1FA8B971AF90FC665F
3BA7017D2C31FA4F88EE95D0F96087F3D15991E2FEC3DC70352A2BA5099C8A06
B12DF089A3FA319936DAC83ADD89BFC13C48AE524B553B5A2A39617CA09B5971
E03D05CFB6E36BCAE80FA0958C0E007F6BFBFCF91DE8DB87B5ABD1B2FA9B3BF3
7A81C784A4779B52E1643116E662CAC5F8B14B95254007B9D0380EF02EAB85DF
E5440B37DFEDCE8E745F77D7D7D793590791C0E426E316B77A9213FA3E00526E
B158A5EF039C8EC1CA3C34F9656524D52576B17B9A7192A22C5FA368BB3DA8E5
5145305ECFB83AE2AF651CA12B3A705081CC23838F40C75723850361521FA8F8
7902348F5E820D43058F54E3CCE95A3C8013729C099BDB489FB39310DFD6E813
05795931B9F172372AC98EAF239ECC12E3F31DAB29A3ADF95527C9D06F5715E7
0B5340644466D71CB12B6CE4300137B8912D7AE5E6B3272B5700B2C73E29A912
F74987A92834594DBE1286FD7FC66E06ACCD4947A02B4D568D4129F84A7AD62F
FA636726FA0E6FA452898844BC982842784C178C1871EA17BE70AC6C1FADE16D
67206C7D1482E5CE3D7050D3452EE6BD699856E44452F8EB3FE16D40731746F4
A1668C93BCA4792AE6E67A74DE94C10E7EE856F678CDC305F4854C0AF672BAD6
3D84C9DF997D62692FFDA54D9471EA325AC240BC23B08C7CE8D0F676C748CAF1
8534A64C91B43518BC2CD73BE30E3EE0443FB925C4500C7A0C383EB01628FCD8
D9565B65A253E51D926CC76EB33574DFD554E4686CA77F47567A9AA1CD0DA9BA
C3E928F8E398CC63106B5EECC114ABAAAA3F24F738F371A77BB00E9A42DF896D
992E80AD18D17984E42D6CB66CD6BF4C7596D64D56477F8CC3E11FB631092942
71780FFA887E795766249EA1ECCDC25C60E8A0B111FE2D35A349CE60F9C5D444
5637ABE3360D50E0C0DD154FD2B35C6FBA117CB7758BA8712AFA49FFAEC452E9
DA468B5307F5F9268E6712C3E28552E3BBEEB91AF7DBA27589ECE42E3B299869
9D33E3C7C77416A48EDF1542E0A4C0637E8B01B6B1E19224F72BD981937CCD8C
45F5DF610DBA35BE10A71EDB4260879AF4D7CFC781B13E773416315F914817EA
0C8CF2C3298CC3C4DD02730E6725EFA87A839D70015EFA7FFAA12B2568CD7C6E
8398C9234F71327898AFDDA45205CFFF5D634601567CAF564050C8E934363FDF
A52D71620C15ED37A68F4EB5A6A8B1C5C941C56651DE91B270668DAB550740F7
2E024A4CB1023956267F504811CFF2DF507FB4E356955F5983E4674953253E0B
2337E08D3EFB4524D4510C50B6E5740E92018504DA1F7F674AB560ED0E258DE2
ACB8E3A59A510C2E0A45979A7F8686CFC9364C6FD78555712C3E2B18E8D881B7
B6BA373DB1AEA9622ED7342373D4E53A78307DBBAF5E1E42B3BA7783451E38A0
1350BEB1F8CDE6ED0DD0410922DE98BA4DADEF06FCD73E9755D152941C5573BF
7AD0BBEBC8144180D453737E325995101E4AC4654A35AE233197E7213B357AFC
C84723B22E05955082E1FB3C5A13A6C28AC0B468A927AB5916C1A6B49354ADCF
2997165C6048B8E1CAFC0B0215E256C38AC776BB92C660DC8AF8585187CDFC45
0D810E36695C094E10B3F0D345E5C2D0E8FDC5F392CB8534D70129208909B159
7C87B56D310FBFE30A8E6202CF330146F527C1596CF26645ED27E09B090CA932
6D2B50BA2EAD6B142C77725461C3B1FE1F6A7D695F68ADB7FB80FEC1583A6261
7891054C2BA46DE5638F1F2033DF5B0894FA1D9F0DF6251318120C70A38EF77A
F4F16BC6658BB55A677FDA8B4A95221FF1FE7292D960B9D616A04FC01ECC659F
95BAFA45441FE11F56E173041508B2AE2C01FCF1BD059F76EF585B82E8079F45
AE936BF7DA3B1F8128ACF24D340FD663FE01DF57E50D28AC946EFC2DA66BFC14
6135B19093D15C45204A4608398E4383A318A73D7D479AC6673150F5488A7DBE
DD1CFE48A602015C439C16EDCAF80B90404645F7F5E51607F96533B417926EE7
E13BCFF206196B9530BDA8DDB85E1547F97DAC3F85283BAEABB9A6D43E0BBCB1
872EFEE41F79276DA48F633E1CF01C54A7BAD4ADD38DB3F94CB4E55D5F2C220F
292CC210EE9103C8B8602ED0BA6DE1294A53A585C8FC80BE028CF181A9E599F6
BB346B111AAD8ED7ECA7755578A057A7E1C28D2E27852D83C734B9FEACED707C
B490126CB37244E4B9CEC2376E66BE5B6EE53771E4B122317B6718E0BBC4D3C8
9BFCC2A1298C3BD0263C686829AEF1D8828C75812AE254ED0DE7EAAC5EA9FAB8
B70F9B6B24B9F2B52D8028486D077A5C8269D4E9849B0301E2FECF6C0E46DEF2
543F89FDC8ED5FF3C52548DEDD80FC68D8081478D1C737B95BC6DCEB56B62031
958B7443D8CB33BA1F8398DB30D313BD8221B520A748E0CDD0C0F80E6AE4E251
F1FF469C9CDE16A6122095C0F97115306585F10FB1C348CC4C685CBB70D2E2CE
7BBCBB7B1E8DA0B5C87DEDF27CFD603C275A1F76EC60E27BE464A4EF35A29066
189C6177D8FB4F95B74975423D3007A2A0806DDA31F029DC543284DF72563F82
5ED1D5BAFB1ACF97ADDA405D5E61D09346DD19DB4920F0B8EDA374253209B84F
F82DE0B256344507DFC2C50986A296D8665BFD59DCE46351F57E6CF4E12E294C
4C477A9037ED1E8644590A25616DBBF8B8DAE62999615F358E7F80EE2F677982
D3EA2E0349FB45EF6BFA0E83CCB8E9EA0E89D54CBD642A74904602DDC56B1C2E
7018B726A7EDB0DA98436C131841B0AD472D7D4488AB58230E33278D4D341522
2B9BA3187B8081B98489629B45ABA11C62B0E82E397CBF0758FED6ED30FB66CB
45E6F211CE0B2D0D264ECADA594526FBA26021B61B0F7AB89E5E54D3B37A2BAC
8A56474AD2927A99015287DD4746C530F01112306DDF63D6763A4864F738B75C
FE2467E3B7B7EE2429178BF90BE63CDF5944C94CE186B47C80847A3405A668FF
968B539014942319CCD54266AE5A8DFB65C0BC71CE0CBEDC1AEF15F65E201E95
81896D3C22191A7607BE41450DA5B5C59D8BCF33ECD8F63FA2845A5618F6BB77
252CC454AEDE3FC303EAE11BC301567C15BADD31E15B4C6F384C66A461042935
1907ACBFB8A1E67B975830B9E88A4292D0405CDDEDF6081B4A5D1496B906E3E9
0BBA850FF1A8B2CB129D0238CD79E556B697F022B9EA6F5EF64C3EA2E5F47D87
0C0E0C7D7241E23D0CBBCDE0218E6BB90C96AC9A5A0DE2DB77CEFDFDC72ACB86
1E9F83EA36AC1DE52E3AA80BA1187D12E7BADE4F01C61ED3C74E1D923DBE4771
0970BE965FD31C3BA18819338798E5B95E417BC586BABCFDF4BF67F7AC49B171
E87AF4ACA332BDC9F9E9206C9841236414199EFB82B1D1E2E072DF61C35CC691
C59BAF37842784111025CC4E6B12A850C0B88086C8B2BDB0B3CE821F47490546
598B1382AA53EFAE26EA9690A56DC8DEB870A8B4FC6C2623660BE03D00CA4D13
5E01B3B32F989B0D34FC3DADB6FF462648C64926DDAA320C31750B8B9E9AEB71
23F979D74A4371EE98321437608A09A85AA2DF66E65B2DC0D27E003771D04D15
0A1BC63035AE94ED82572221373A56C6FE7E4A447E35831C06456F95A978BEB3
5D372C0FF503A97491E07D57C671D7605F9D205BDB60329C751D9AACD137823C
EF3EF3ABBE137775503E10022B1AC3DE4B0D654D240A2A8C720AEE18ABF17D8C
9ABF54DA82FFEBC1C1B7DEF14217ED30B42286360C270405A3BE70953AC16D02
8E875CB404D02520B59E006C1328C340A6556729C317E60CD8763B6779121158
C9E35CD154105673588C18B1082DFE762D7D2CEFF02C32B8B91CC234D42F6BCE
FA868C78F575E03571D1011B081D152DF3768EAA14E530CD5126B33BF5ADD5FC
78095AFD28A078885043E4F830DFD7247E7AD74C7D14E36616BDE8148E530978
13BFCF3FA616F67233CEACC73C50BA9A4348C427F1508AA5317CB8AA826B0845
7AEFEF2F137EFE022528E051FC41261E2FD14D584372B13AA894419ED3667622
0272D5499A4988B8F410180247DDCF8CE7E9E4B0412EA44B5F412078C349AEB3
BE6FE358C1B1012DAB5EB6D2502C4E0E4FB09B4CD634C430564150E9EF83FA45
C008DBEDD2808DB486CA849075A8DA38A83AE907F9EE264F8E0E96D8C6BDCFE8
1247787555106A2FFAFC6A4588E6B24CDCC5AD670ED461E740FA8FB196058967
5C0AA9B7D9C36B64CDC70B87133A1FE764A569DC348F052EADD055C97BD938E0
3C9BDA3387A344BAAC095EF9356946415EC90B0D9EC8D9D9B5BC3E26BF856992
6BAFA901628CC5654A8072E1250A760F16FA859BA4BB2386E3A698C125AE6CC4
F723C8084EB68AF71C46F140C46D6C604DFCEB28E11E14ECB5D75B5A0154B072
450D2733DA37838BB877721A6B3BD63DE90FD71BE4AE5B3DF3D7AFEB6DF21C01
7A5DCDCA75067DFCCBF38DD290A75F015150434EF292660F82E9BC228429BDFB
78D96CD87A5960AF03B2B39EE898A69059503D634B25C2CDD8F2021D82019BD8
08D64196EF68407F3075C0F43E6B8E5784A9F3448E3873FBC7A67C46F7B58BAF
F05F056C670717C5CC75BFA3B020A84C1430E0CCD1D519F15501915A9CF40485
ADFB51E5E31D3B8A985CF7B2AA0370764D869DF6EDFA24BA3F8E2B3489A2F536
8303BF092461159C6E265EAD1A9B59E83C0F07C0EEF482842F59F9FFBAC63919
EB092DFABA00C4A9D139FF222E949E21E30A9DF55158826B135420ABC88DB06E
31E2346C7F586144609B48899126B167FF207072677E7C9B49B1ED5744859645
A143B9D0C6A748FC65DAA9B0300541A5F79B0F2B3386D23A99E8EC34DE6DC1E4
71AFD57FD3DE628716FFCD6CACB3D5A1D59F87076955C7662A4BC5434A712310
310B883C79BE00C0CFA16B1D9822CE586EAD1438FBF0BD10A5E4335BEA1B27BE
C93CE5351D4B80212DEB31218F40938D39493945CE36DDDD5D327B6AAFCEAC5F
EB5380E83079F7821A44C27B78071D81F9578FBA89B6C81ABFB5DDD86118E92C
BEC882E9ACAE27783E583C4694CB0FA2B8065BC640A89E853DDACF54388975C6
5BFDFC9F6BC27D190935321FFC39B4572775B2D1CB3BDC3A20EDB088B45034BD
CD86D42A882DD8ED7FC3FB69C8C12B5802AB98FADCF7970D19A58EE814E500C4
AFCACF34824B14E2DA8136E92B007C46FFFCF9F11C573269AA3DCD7B3B2A0F81
30FFECDA4BFAF20123A5FD7CFE7D290F86CEEE705020FA975F1032B0C786713F
2E8F1BEEEF87F97725299D09FC25C30C7AAB3C4213DB20C835B0F0B694EB8C7E
35258572B07B5E6DA522FC3B5BB0705A055BFB4FFE29397D8AD90B03C8BD105A
913C910B28AD3DAE54AE89D7B9B279AFA154DB3BBA8E8BC434AF4C9636F68D42
1998F8DD0DC2ED0F38588227F4EA92C6B3F0FE67C13EEDBE27EABE615292CFF8
F6A1324476F6552F22BCE8B8A67D3F2F9656BC5F46723D407C044961104DE93B
05CBB259A56AFCC97566939A4CF024C1D055F5BDE06114E0A7974AD94901E7D1
914E7F1C15EF2FF21ECC4C55D360AE5F5F4F3F4ADCC21C4654C24D1337C6BF78
597793E561E81ADFC0859512C893BE2C84731284456F95627274D50A315DA931
A98BFBB545B95F4E5E99C82900E8B591ABF37C75D26D39E6FDD9476087ED66BF
DE95A29D15BB6656D456556A8E92BA399EF964FABC1C7B0B4E4A5465E41A12C7
A2A20F13A38EAC51CFB8E4C9BC29CFBC517B5109CC428AC71A76D53197A86569
A5B8F4E042D1D0DDF0A49EB8F5AC3B96E199F7C78ECA9E22092502FED73E3E02
D74030883D4F9DEB15ECD75987677C76A4F5274DE0CBB73B7E768B5F92C841F1
EC9D5C4E87D8670225DDD6A8C20BB05E455A2478F97600ACB5D57EC3C9F1DAC8
810369D999325F5DECB207E02669A6E5981FE766DA56CAE271F4DC09F71F2B4C
1EC7EAC3F82B5A2186DFBE9E8F8C025D7C70D0C5374A03E26EABCC4C8BA58B87
F82D8BDC133B96377BCBC846355E9AE763B98D4A88FDCA1F05DFF55440793AAB
62FE26D2A5AFF6D37D65FE355B1BA190E9598324D4264B35F893F7ABE0C01482
F21340FA5A1647F7FE4C297702263CDACA278DE35FADC38FFCD6C7EAC8F5078E
0B95CF5C9AAE4290A005FE76F1B7EC58FADEB73175256749F478B3BADC2A8439
5BF4CC5FC9DE80A30A31E9D23E00D5F4209598D1BF56F0B95DA2D4AFAF5BEFA1
E6D31124D773E12BA055773CA3C6D667F04D3623226B76008BCEAE72AA71D6D7
23A9D622CEEBD235DAAEE75F7CB4982A80FFA0A0E01B866FCDB1891E2634A4B9
ACF0CF370085FDCB35ED6DA310C40C5F2BE9200B237AE6E91146AC59D717ABCD
AD9841B17089A0054F2A2860EE7EA14ADAC93671972EEC3AC8F7234B6C380BFF
89B5F824FBBF161AA36335636803B4D1393A89FBB6EE8D6D77CCCFCAD28D18DA
6369EA5C4EECC58D570950170A486455EFCEBDCDD341E13F83437EDCDF044BA8
612C7C6EB6DEE9D130B8ECA6A1DB1F0F58116E052A766636F5424BDF1FA083E8
438D25279487E210875AF8BCE45C413C6B889393D35EC332CCEA3A2702423919
D259C37A436F9771C1C0D75FC74468A23E7BB9C144AC8B1B4228292A422262C6
6EFDF12D8E0CEDC184965A6E2F7097EBCC9750C0F66BB492E08D4FEB6F83D2CE
CF83E13D7D3E1F216F33D02958474AA95A6AA5318DA18FB6F41EFF9F2C9AFC7B
0177CC06B2ED051965873AB4645892A3032BC299EF2FBE9E7D8B7DB8AC8F315F
3441B03AC6B47820EBB2722067AA0FBD3918F7F9AB080A6C2F8A3CE1AB50B4D6
F8701FDE5E5F20766FB8750DA86E2C692DB9C06042D8470CF5C896D9FA630D02
DA5CA6D2FBA9B8DE91116C59F86FB08B814511908F244FCF5E62AE2E8115F8BE
89C82B078FF29265A72C51E4FA23D38BCECE8ED9357229E58E8388BBF04AFE10
808E3DD50B382998A4D6042910DA2DF6557C27D4551810F9CD3C55E227BF0DDC
55122864DC780BCA5096CC65DFC64D29B8D53D2EEC72DE470B6199D5C77D0EDB
1DF48D8D9B171A36D36D7C8A94C8D3ECB6BFDFFBCB9BBDDC6B977E4ABAE7C4BC
F5ACA385C426B95DEEC61AD90F14C51209B9264E3890A99E396911F3288CEC83
CC64406DE5D90A0823E836DF5A45D5AD320A6AFEF16EBB0A90583A8FF4C891B2
8B8020DD26D93214B50C9921B0A648E14E5C439561E72A1E7A2EECEEF2EC0322
7B64467501908072ADC6E6D3382A2F91D228DB7B6F29AC8DC0F34527EACD6231
A3277D35BCC1B3068C76E4521EF1391DCD542959F98DA33394EFCAD3A6D8328A
A20C5A974DFBF90D0FE840566D8413DC658E0C4E674BF56CF29D06E0FDEB52BB
39A425DDAA841DD21278B29AA4D0AC102C2CE017E5A88D3C98BEEA33887AF05D
47396440A52E9A0012C8BA3F1385D2B7FCCE08F7DC9E7CBF1169799EF198DFF1
307DF865EF0CED018CF2E5C49524482B0984EA7993E4D3D8BF6DE93E5D88DAE1
12CB8F8B6686EB63E592951B674C4DC9D1D04AC9C488F1294F88A89CEFE0FED5
BBE86FF84195CC4722DE985F12B6186491BCB6775B4C626C81807769138B0903
8FEF2D336D8D742FDE6295DE04CB1AFB0520A73B3E622CC4BB97B92D1A974A9E
6FC3D89130FB541A33C18EE27048F7324B24D898B7F861EFA48AA4D732472435
83023E060292F9EACAA9DB8D45F1ED050A58ADF464DA89A9EFB5AAD525FE8023
1E66FC63F6981EAA747425B1A874789AEA1B8216FE992916C3693E991C966B77
77E937320979E00A6DB2040327E83554A4BEA33DE8A5F26E06A035C8DB2668A6
715609C907FC3CE3F311E52BA1A2C68E50EFCA3437BC308DD1D17BC1BD3FC40E
B7229605912CCEFF8BAC42A5B04521465FAF9982B447F127F8B28579B7399A80
7B6B2A8F1A94A91EC59E980793CE160D39D502A9640469563ADF46EAD5456EB2
A09599E539AFF3EA59BD01580B0F7940C659903B3002C8A34C0A5A08AD4675E0
045EED0A696236EC2F58041190F8674FEEB2FB66EC78E79FE34A8AAB8FEA41ED
BA512F4312832B7426BFB35CDB2821B6A4014309941F6B67762AEA556116751E
1301B5E596FB6D1DAA80718F97F2805E5E9F6D8B10A78F6212A11BD51209A50D
C497A503B8DFD0B94B649E68E4E7196013942369D5DC9EB9E491D69A5D39FBF0
0F1BD1C54EC7BD11BEAC2CF89DB02DCC30A54D6AB195C00CA98D9F0AE1873CB9
50DED8E8F488BD4A9473D33FE910261C1095C6E99EFBBB3BD9007D52EDC516EB
48845ED9EC42BC96C6825C4847FB18E9532BA41B8BE616FC80F0316DB4434CF4
67E48E9C49E2D9F885C198EAC72B01CBC11F9DB3CC9C894CFD8FADEF7D8A2A79
3E055C3317A2B5866BF2D8E3EC22A20AC8D46CF6584EBDF7EED9F61E8E2C64C3
5A4BE47172FCCD9302078128E88FBEA1BE4201511C2196483CFDC0453803AF3C
71DB0E3AF79BC99A620CA6E7B65FE9833A1D90A4C4187C68E87D46DA13AADA0E
7143BC0FF754402B8DEFB8E5B2CA22485601F8346F5C944BA7A18B3EE2B87190
DE90ACA5DAE1C7D28F9D3C44EF68E4E09A0E22047BE23D1B45920926BAD7DE51
BFA04C72DF6347741E542778112A609DCF16C79411171D265626D50F769B57DC
4190210FCF275513D3607E64E3EB841A8E8337B03AC7220F87A1E63212A0B258
301D1AE8BBB5B5B1EDAD9B562E43FC3732903808D865ED5719FF72B7B484546B
0C86C8D8E7AA48CD384D45A5DCBDE532C9857825C183D7976E972152FD33A807
AA0C5DBA724909C1A3425462B65E7E04B6B784F628D631C559BBC8B7B6393FC9
015B1C48E45A2743EA914AD6FDF7C84BA385DEB552F9A5C90863C069C9CBD0C7
51AEE7894F616D93B36278E44370548FBB1B6F917B8BFEE7175F3E1E612D8041
45F43C0831A312803D2B0D2F53BAC5C65B413F71BAB2660961D9EA08B850563E
6D21574B04C786ADEA99C57FCAAF1A9A3426EC708CD34C7FDCA9BF0D7A880B9A
8293D458E5527DDC3870FCC7810AF897C0CF3E177C54BF5489AF272368F6B039
49183029A86F8F048DF19C47CF0A5D2EE095EE041C0EFE3C5CDE3077A25BF906
96165DCCDFB05394229FE02605C0916BA32DA8BDBDF167E05D7DBF00534F6F3B
9C6D4683C1DF951001CC6AE23A261EB047AFF828B76B50D48B92A7A54E325E9C
AEFE4F8D74710D33DB12FDD4C5AD6FAB2AB52F13D9503AAEDEB1A5F5F318278B
EF91FB6B10082659C90A0ACE5EF687AA538D03938155DBED39EE5B300E230E7B
E750C1AB4E40D9D8B957AF5790A7EA5900289C81B119A004A0358ED3BC4DC803
0B49B9C9204B683D8ED973FDF07E48AFB64E0434CEB24277DC0B14A3BDCDCA82
2244317E02B1360F90FD85ED85A28753AEFB7BC8830794397E739C254AD376DE
9C9FB69442DC88166575049E84F3915C0B74DA8A1592EB66C3B7E95C4C141808
25184F6C1759E48E36BBC45FB55B56AC02A0E1E6DF44AA45A8CF48F425AAC086
6A0752BA9A8959A0E13A259D3CB47377A99EBDAEFB98DC6F8448F94BC4FA4D79
09623368BCA4454FA6949F135B18F65FDA6674787356AD68E7D0A3B2B9D9112F
A4E69106EC58A67CC38AFF357AE6B52086EE890025CF7835987A370B50363947
BE61EF14D92C2A054496CE970F382EF913C5FBA5CFCC0057DB55988A2FAB40B6
BB51B6E6905BCE5758C506984081AD08B6139EC0A4BE0FB15BB46B51ACD7EF81
D7B87282AE964C4528E9DAB465DEFE3F0B55FE5E4D0A0A6587B52BDA2125CD7F
978D434444F6A11C4E35363E7131F82CE0273E0882C018EC8D23811D47A6AB43
57E3B043C69974C847113B09C57DEA2C82D6774603D1339C93DF2E5FFC849C36
8CF921F366E7041F52C6FCFD87D87E1FA67FFB67B27D43AA63BA00859B609F4D
668E061170A1A5CF46E6038E8DB9DBA306AAE7DBA33F3635387C811D6D99342F
9326416647BEE180A89CFC68BBDE58A795EDECF4BB0EE3F91D88643C9018812A
646471E8C20F1C5DE9D0FFA7FE80F879C3B5E9D6DED54B07BCAC04889E2E7ED8
891C13C10AEA480B771A9068CFFA9922353E5270D5FDFEDBE0864FF2F95B1A8F
65FDC80E3F594558AC5AC31B3E91DBAB6B4EAE59456EC1E3A123A099C7B63BD1
335E4C253D16818C5EF022FBE34743B3DE5124EA15EDCBCCDF38D6EFA9FCDABD
706BBE5A33C6003F23292E952857FA49DA47AB3DF5455B58774F0C91153F1E3D
458A078E33418E7C2B2E98190664364013332B6952B84D332B77AECBBC3F0E12
0A56DCDB935AAD0CAD5D40E28CA54E61FEAB68A267E547790220D291372C1B06
62FD76309938A455937501F333DFE05DD20031847D85AE20DA0887356A79F159
CF0FFD344C69DFC0AA6D07D1BA23B4C55EFBEFFB6FB3645354674E8D1E3CEE6C
21EA96600BAD5DA0EFEA0A20279816C67ACF82AAC656C94BD025CC86FFC8CCA8
1CF3203E8B4393AF49D85E5803C606BECCC8E16ECDAC50CB693C69175AE76C58
9CA8B2F48FD7E2F9D65479E0F787BD7DA81796DA835F45B43C426CA2765C4F32
88CF3F5E2BD715DF2C1BCBDB3CEB6BB8E72446E57527CD28508B5459F539E7B1
6BD09702F0CB64579DE0CC5C7DDD130C6F5FA16B886CE9606BB0F3230E3A863E
6362576C1C2FC4FCCD2FAF8CD0C2B0105A444191865A0FE148E88902FDBCC113
7BFFDD14780C23363318CA47CA1A93C5D22973FCCD6C62AEDA99D432FA6DB2B8
7F9DFAFB890E798965B30120D3745599B7A4983D13927CF20515ED111EB98D69
53FFDFAF0938D4DB98B45EA419B0974C5A18DA88B285C7C9DB23E160159D52D2
8606969DFCE66B500638CAAE75F8F6954E412C3E88E243E4390034503C71BC53
43F6ED7DE6C25C92D1DE622AAE00CFE404BC6687B7E22B3D3A5FF6F132564C5E
C6EC425F903AEB022DD47EE29C1F9E13A006EC8497EE756EEF7D5F29F9AFD1B6
E4B4A896E918F75DC70762D81D2F6540106F7B279B5BC6008578EB7722F2CCC6
3145CE9F9682AEB7A4DDAE91988D88C322BC9822523C0F413E2ED9778C284C89
3D523EB78493FEA836E63E94BA3DF04787CA16B5C33902CECB386BDFFC610331
7870CED8FEA8F04CFAAEB8AF484CB13BDD8D6D2A8781819F7B1215FC3EDEED7B
D2ADCCE7B5A42C593C7FBC135672D700773E0273E218CB02786B49026158DFAD
D86DA42EDECFDF1C4AF3F5709E5B97A6F71037620E73AFE52F4A1AFC05E77FEF
0E60C607ED7D51BEEFB35E772DCB63BD1489A6220720ED37084A835CDC6D4947
98991167F80FD1974A5D4CFFCEB7EDC76534528F907D53AFD5D50C6F3DC228BB
1F13249EC438F918CEFDACE8BAB400F6D4BBB635BBF0D18D54667FA101DB5AF6
59A4BD206608A7910D6E247D4B3D077C73A4F6FFB7C48B8EFBF1F6E2B26E0281
E13EE25EAC08943710FC6496DE09BE803BF4486BD7B736A5F1C621F2F1E5C2E6
BE6AF459607FB35F4CBD9F351B93CFA18A9EAECED24495023DAA179D9F993F00
25981C4F9E74CD776412E849D6E54672A84E8CAAA5784B943E1A55F619EBA43F
72B6583AFA2954328274EE3FC78C9B535CFC830CAEEBF7D356D61490A0BBF0C1
E6BEE66DB2256D5551DE2C4DA4143A4906626F483FCFAEBE34016A5FD677ECB6
C6EE3A062BBA51D2ADF7FA4D790962336BC2005C39200E554F008C71BA0FF8F6
2BAEB555C51ED45D7E2F79FF4A2D6E71457F94F9C6D4DD6995D41972E747BA56
8AABE38DB4C64D1EAB5B4A83A4278110F6132D746F547763613C6B28DD2B80F4
F0B2D3EA8769E162368FF66723E8ACCED62D592F9FED209CDBDB93E8C746CD15
EBFF2995F9BE99C00FAEE97A20A63399B28E406FD90DF002F36EAE57A639C50B
652A8E73B103DF32C07324B83D71AE7EE303F69264FC8EB4A60E2F35AE2BF075
610C1EBCED986A27128DB6FC8B45CC601350B1BD5F1A1B95D217B576DB17DCA7
98E981183712F8AB7B860459D2F6D9ECC74AEA67382D6406B2BE245A9566CBD0
0B3AF0901C093A0100C2DB33BD731B3A22836D454D9B36B6D210E2B4D7759383
1194C2EB7FF3E44C24A3F74A2746EDAD979630FCCCEA4A1FB209DC179AE59E28
C4A72B3838F886A23C87281744E40FB9CD654A27A736F901F247158CD4849962
B1836E13EC985DC1037FD755A0241C486AEFACD788B10ED796EB4EA4FED108EC
9C500F767B00854B170164249EEE31060322B226701935D7CFB6ACB5AA96C7E8
251D2D384832D3E38EDBBF2455AC2E09DAACD30A86AA9612A10D058A7CDE2E1C
BB7A97836EE2A0E7D694F135009981D99D81F9CA41BAF982A8FE10FD30ADC1A6
B6D621B1A7AEE1F42E3411E524596FF947F6B730973063483F9E807AD39872A0
240E51B650320EB2BFDCA866A2E906A079CB0E9C28EAB7220005CBEDC4F9CDE6
60E7CE09CB5340F1EF5FFE63A9BC93D89D49289F9FA56B907D4E496BB4EC002E
44779B9BFBF17F336BD706EF9CA11F2FD9646C185A0AD426259126F62704F47A
923A5E3C3212055CB749566765D9C77C40E6384EAAF6997A01D7335A08B8BE47
F16C0DB3A99E2A8784D635D8F9AFCD759798E03262121144B5BF0DFB5F106C29
C7C87BD079805A26E3EA765C86919074B3DE9E17E223AE24CA360B51B7323D8A
89B665E0B3FD7799F660F08D58ED1885E0977B67C14827EA3434FA6C260B8792
115E573419896327407DEDC542D8B5E3DDCB086045BA2FEE00D44BBEBC7724C8
3E86E960AFECE29E29F8AD91FFDF89C2327F6843D45E0661D09231227B0CD363
C0E4E80AFF94448AC4FA0BFEA6FE1951D0941763DBDB27CC98610F35EA132E01
C4E1B0036DAD5C10714EEFDD6ABE847721B58F2557289C60E9B6CA26ED5D96E0
210A09677DC944FE3E3C35D16612B3EAC9C068150F88EF5573B500C3C4C4C30C
6AB539D08B650E929DF3BC07B24065BD3918F7F9AB0AE3BB3F8BB2CF4D3A39B4
6E796114EAC8F78571C6D484C3A5F66E85711FC86DDE6CD9FB522BC1A313459E
8C2D0B0843DA8F52B4F40F2FB497B9A0F80E42D1CE07DF4BB539CDEADE6B97AE
B71A24ECA25546D32B2F30B3D3F7AC4994B8D113AA9EE75CEE797E7EB0B54BDE
DED13A24A04A9B2A7A9F0CEEFC0E41E5B4E80F6AAB46B06C1A57F868724A65D3
10932EDEC28969E7780BD9B18D3F781ADAE361B3714077BB50A1B80892EB8D5A
7C48C7EC5406DF4667CC374C399C4903ACB7D82A16D2AB62148C745AF8C748DD
429C3FC85114F9806D27148ACB1B8CF909690AA656952B903556C5BBD3F5D646
2E88FC7ABD822AAF698BBC60164BCDBB9980336556146A463F022433C3F7A3BB
3C56BF1F49E97A57EEAAC0FBDCEC1A8FBBFF6866C81C444AC83D31838C15C706
EAECFE355C68E71CA3B664D904C5120D434AC24BD1A6F63A62CB64A601F235C4
403ACD5800E528090977B35B142C0FFB9E1B54091420459777340D76C4F7F2F3
25F764F7840BA9C0FE90DD5444AE5154DBA9F8C4724DAD6FD49A55CBD906D779
FE5EBE3C809B5E797DB420BA7B291991E1C7F2A7EC3550FFC8AE3B8895B0577A
91BD01E98FD9DAEB4F85475A07CCD3172126C3068032B927272C9DEB523C29F7
8ECB32AAB90037AB90F83C2E0758A2DE86A7E5A86B8B6249A125B15FFDE3616A
D9FD1E2DC0BFA86407A133C608F3971275866642AAC9FC7D8983EDC4AB37C915
FC07500FFE9AC97CF8C57B1C3B47B941350DF5027E5A7B4D17222E625CCB4ECF
FE6DC9AD62FFA38001A1B4DE46AE551D219FC9727D5BD15949B724629306BC2F
6F70189743FC2004DC002CAA4E83F9B14AB9E96AA2025A3B61D5601D65BFF31E
807F1B6E44608496724F69FEB1E9997608D9A0A5850A69DA15A8F391D6AE23E5
A67CA1583EFB32956A7D1F1E282C9DFAC8A36B8A6E6701660CFF3F8F5D104D14
E1A3C12E158D43B0CD95E2E3A43E928EB6DE1D1388CCC86A82188CE782CC0148
95E2A174FEE7E8540E35D7100685D1538C1F3FBCFD7687545C6C31B2FF05CF33
082922CEE104A8A62B6121A1EAD35032AAD7DDECA9FD01DFE44D65B758F97102
E7AE052668307C7CF7E5722AF1647958F52B9834E46AFDE134B1222D03193CCE
50E1E3D663DA67028B96B1B0660663FAE2E26DC36DAA4B53EF5D8334D3451676
CCD188EDB2942FCD7BBB5593F52EE4FC9EC1255D017F15CD622EDD671E43B0E1
E62C81C49801814D17DF0378AFA69E24DECF644DF92D8B8F5D987203F0D6049E
C3865D3E82B989F287F0DCE919E3EC935DBA234BBA7D0D005AA791BED398D9A8
1B2F807ED4A60011BA4EAA13160E86BC6FC5DB541FB3A5B4D73EF37104AA8562
695F4840F8BD0B8954130F0DF2DD704E2065B98CB98BCAC7C25AEBB47777BB82
7D74D36CBE13F628CBB86F8883F9E7711B59DDC9ABB2E9415DC4E6065DA33F98
7A023330DDDE43C92BA6B171B667029D1164B08B871F24421D1582EA259F1F7A
B1E76F5F1FFB23D7AFE03DA19014712C397BBCA1AEC23DB8161FFE697DB855E8
4F91F4B35FED1E15043170DF892989A3EF2231F5231873ED6ECA3DD07021B553
642D6C2D216AF294E387DD0AB06327BB9A7E2301063AC42505970AC3D3FF5EBC
E7BF9DE543A20BDB91831892D3FFF9595877A75EFF02308ADDB66243B2159C50
7EB7478251632B77308A54EA2015933124A70BAB12612DD54F997FB6FBB9B91C
B42087D08220D2AE0F9715C9437C02C8ED058EDFB34842F006C8AF17A8080473
BF69CA8E18FE83169956C71F141D2C0CB6F43790A9C1D4DE325BF0D0C7825123
F93EB424BE4784985372454A70C8CC75EEE08AF87D35058F268135C68C370757
7295BBE5D0954F2C6C8561307AAE8C841F112AE139D6C3E8B60AC36C14470606
E1C45CFC708D9BD043031A9D4907F986E35B3C8821F0FBA5274C89E24C9D76E6
38D544AAE5E21F4D9D3444409FC9537BCE1004454B952104FF25A308FDD23BF1
D4CE6737B4B8A3706DC71C0E3903C9A02FB5E6F680E612EB64C4DC165BD6C64C
44F44E82D0CE542875A40DBA27D040EC76529B35184A5169DB538CD7BE94B7DB
285BED83257190C7AABA31994558E49A0197FBB2324E140E54ECE3D53DB6F732
A76E3C20910E80529B92C4DDB92FEE258477A403904CA67979BE73C52D9F9CC4
136302B073719ADA7FB3BE0C5F8742746D378D38A1E25B2A8B2804D700CC61B7
402EF3A3946904477A22C59B01C4FDD89BDFF494224F151033604D97D3B9702D
4D50D3D3DB10AB3F114572533A9980FF3D916655D89834E38211966FFA5A2219
D0207446CB7F89E7E043D714AC5EA8A56C95F6BA49C82E5B2DD8453AE6BD72E8
0497357128CECC0244FBA682D467B7DEAE5E9F4EC92431567EB9E9DB9711B79D
64AFEC83D11BCA7FC027A8BEE1C1E2371C4C176971728D7C0B86C0F36365489A
A74870DDD50AD6D2FABD0596D75B15CA9D1DA958D1D8C3F8E9CD8B7325926341
79DBDE23EAE9C6F785DDA0719EA69748B23E55BB67C8944F0BA68B37257BCD7C
90EFEB424A7C83678BA3243E65595B8732E2B19DE55FE783011B6428E6515652
F28C4620862D182284949B87E8AA47A36B20257A352235E375E0396754D72B8E
07D88674261E7B2FC87CBE05A66B565EEA96A1E94119319564D2564FF75D93B4
A0A3D0DB545AABB334BE55B8CA9149C697E1C3D7AD9BC5EE476160DAE623DA7C
C1452C2486F2FD3C3DE6556825E83D3819AA6B228F8DAAC41F83631B1AA43814
C04D6A74612165B1A2C7D28DE4918D602D8DC0DB495076BDE0B1D3D7EA8DA614
1FAB71B98FA9E6E983551A8ED8F31ED646694761626C06A26C116FAE3D7CC13C
AE61A848CB5901132A7AD2B4452EA124E9BF691E62D5F6C2269655E345DA0C36
64D697C14AD81FD21C78AD58185F12C35DA41A751E1F2A45093F0BFF9FD747B5
517C5FBA3D0C0F2B1C8E564F4D36CC3A1069D70F33A9D422C9C8BF73E226052B
23ADD62A621741416E28E8041E3F097C004C0CA4DB8344BA524A562540D49C64
3B1C275A2E675DF1C1D05BA1769223FADAC96BD33AFD6A8744D0503BD80CA66D
99BB88C6C432C99CBF5E0D119757CAAD0E6B7B2AE24FB038366F5156BDDDE477
4A2569AA86A1528A7FA837C09BD30B32B23B07B3A5EBE72DE49D9CD2105CE37E
95D3FB008B6B798ABB1AA9BEDFB4A6D2772699E88355072F2482EF745DF2C871
2FCC472919D07BF4C6790FD9A7019F8237773FDF02E750C3DD1D2D677623EBC9
A26686D164D3AF841DD212C26B6601D2C46F29FBB5E8B18D8C80FF6F9A5B4451
65CD1EEB000C7F4BB426E8A1A18F9D75EDAB64F7CB02B6A7E3D2EA7E209D3A7F
675FBC2AD014690AF91EFBC21F2F94F17A5D641FBDE3A1433C81CEE40D1F9CD7
AA600B063E544A3BF67C26199F4CFED43E7A202F9E1A08155633A268F8AECD9A
16BDDF982E40B27B813011F86451038393F09D93AA02E6020DE60F39DB334B80
0AF62C1165C7AA99EE6C50F9CE2829B3CBAF8B7157FB45B99020432E32B14995
E1CB4F63F4075DA1DAE4E1217414EDCCD875B66B6B26B032BB18F0469728ABB7
9E3282120E9C8B6EE66A64B994E59CFB4A0C32DB04EC3DE29616F30E1E15385E
9DE04701014D660A88ED9AA16D28268FA0AD37A3FE40C1BBF4BACA11E34C4EF7
24DE847CA9B7F607219DFA09C49FCA368A95BD9831FC2FD73B84A97E53FAB4B0
F820FDEBEBE78366F2E24448A9DC564016B2B8F09CD6C0FA64C4C33A012BA8DF
34E6906B936FEC4AA1CD48EB85343E1F572EE896A742E45F7DF103A21F68C6B7
606788BB50584150FD9F20D8DD35A327F7155571EA45C0DBD1D62822470A0E3A
8492FC7F49D214E22CE530B7A0D325223B0B505C3538499FC4D3118876178795
C91FCE22F4C8A65A42FA94211EC142D0CB5EBCA82E0F1BCEC647CD3078449619
FEE87D8BD45DCAE04925F97E2A1B7B06BE807CC850DBE51B98E87341ED829846
97315759C4883B8DB284C6216F3DF57F100E975F1299B40FB629334135136A7F
160D59F47335C6BD3FAEC387246D731662D089DB20810CD9A0BD9287216B3F35
0203B3B9F478F4A5EA92965299128F4E2A12F92243834DABD109E717F6BB1F31
3E09D8E4A67AFEF808BE4173FC906521889A0C9DFC115DC19315AF9E383564AE
605FFC87A39EA457685188B5BB3A4C870D20E9F7313AACE39E84157CFC671CD1
F28AFCFF88CD75451308D727CF5394FC3B60DF6E7B14C30B1161A4C9F6D432E1
F9DEDC219FF8486BAC6FE61FCCB9DE7764D4E9E28F2EAF91F965A4006E979082
F4AF5DD7E09081C6DD4E0E71DBCFF8B47F3298C58D121F8975D3A4DD3C071CDB
AF2EF1D532FCC47F6103595CCAC5A559B1CBAFD8DAF20EC2927F2D03CCDAC117
E2CFF0736237CB2459342CBCCF51962839896CE752AEF6F13464F44A5529D75C
F0BDDAF0F2D9B415964D6814A891F3E28AE71454D8DCEB144F7DF3687B5C829B
C536995DDED65512027B6659E24E59296C575985D8C7450A479D0BCA35A97065
9CC11A5C2F96045A6AF46431B8B36EB1D00FFD1FEC75241566615BF049DC8A00
72674DD94D98A35CCD6D6277851E8F99BF680A329A5D1A92D38D5A229EC8F2B1
121D45078639320FAC56BFD8A2A2EE3FABFE8AB812F5C15A37E1B0650861E438
B826324A83F47F9007835214F4DB6FCD9B5FC905BBAA2DA7AA525B7D815051E1
3E77DCF187C23C092436CEDDDD8300F651A13E6AB3C72ED0488125EC36FE6B5A
DB9C6701581F0B9CA59F7093096F655E09FB58AEFF47567A6C8CE8BD3AC60FF0
402BE2F0C7EDE14F0ECEFE058CE1181852571EDB9ED47A16E4A2AE0C89620818
8A6E7394281198F8FBA47402EF079A212FDA4844C4444D85FDC3758C7551288B
A72F9625ED37DF935CA8EC1D25079E58A2D3A0CAACBD253AE2AA7829AD3061CB
929D4141062B229D7BF762A1BEE36D7695CE5081123ED6FDDC5D4EB6146BF162
E87E4DBF7DE80B802379492FEEA5ED6DE0C0DB3EB898438CDD8AD163E9DF9734
6428F7E75D793A39DC0DEC4B0FC18ACFD19D7D24462879E3BDCDAAEA97506691
197FFA1C4623293A2F566ED75629A25AC2DFFDAD0374854719261D1560E53EE1
81C1052B3E24DAD4EFDD9AFF3B516B0B883BA5630032D330B3D58F98433DC065
F106EC17C248C1812CF8BCA336993A2C160E72512D9AA86B98F5BE946D276143
F40A990914D5ED0E70A958583B8B765CDFD9BF7B696EE775562A3574B70829F5
6A0F68E3F4A74364242AB5410156463C838A7562272BAC6F475686E5C2353C22
B40BAEB735878140A2F32949A30CBC7EE92394ACE497975DDD347E0443AF7261
32C14B4FB094C73D331DC8CA1E7F4E516150F152E65A20E3F4DB673A4119EA19
1B4ED24590DA1C4383D73AC3F5E956BCE7A74919B02E4B527CB7FFE47A001B63
1E5F0791311878BBF76A8F82E725D5F7F175566C510E078CA5777D03021111B6
133D74C777C2799BF1999CA43184CB805E69895A680B6C649BB1CE588C53A19C
02955180EF292E0DC5407CC3F7E56C2A91198B7493E437048A8911C37C482929
8BCB20AE3052C4754CB66F70753A2533BCCCF296217E6A9B0453843B43471EE8
948D78B587106F93450DE555B82D657DEFE47B3CB0EA1BDF6B5657F8266312BF
F868758B6EAAEB62691620071EFEC530C143D473F6A00FFC70102E77C71EE69E
D8D93D0C8C72312DBB4D024FC5C3B7886205AA1CB23A8F3CEDAF276AF30391F4
EF989D691D397A80AE6AFF6FD082D05F4AFC92BDFFCC840A759885EC8E9D5F0B
B3D70557ABD1739ABE0319C125CBA93C97A84A47A9B91CF17BEC4F1E1A4ECBA7
AE79FDEBC092DCBC33C44DE950F39D08F99D613AC1040960C551DE012BD68CCC
2603267CDAF23B54220CEFB12857A830F17337C9E88907A476C5C5FBF301F754
2537810AA332A4F4E57FA5BDA3A748A268D7879EDA9069F716AF3FEBA3F331CF
DF9E31FB1C22BB04716D432F14EF08274CFE5844E74E9F508DFF7BD6BC663FEE
506DCD659927E767D18EFC70C446AC43315B90A97934CBA046BCC7E72F451505
722AED2597765C6DC9643FCFA9A227947057611CC9155EACE5DD12BAC08718DF
CF6AEADBC0F61E2A5D45C1527A9CBD35406A3E24FD769C5A0795E6AD5FE663A1
B2402DAC17394E33CE75A28E3C68D09C4F80C7D97BECBEB5D445149D5966A488
A851D6578766315EE1D8056081247AF8B9AC132E78966A41A08A355A5ED32722
228C2C0199FDC372642D3E1CF48E50A43F41F9CF0E07774F236409010DBE817F
E567496711B0ED53E7A9C6D6F91CD97DE614C89F230D9CEBC0EED4A829F0D162
79A686E938E0156FD22153FB6108FD5214ECF8AD4C56321816388701D4E17106
14E32C9BF51B73C30F7D107F9C6C1FB0B2D42392D8645420DA9FF50C734047DE
9D60CBE24CECDF5285469F520FF773570D5FC7E994C4C6F92C397C1EC3E7BCC5
7C2611AB6639A3984298BB2ED951B664C2CA57F4CCD754A6AF453C301BF5F265
C93731E075B726AB7272D6FC86E1BC29EE2C67789BB7265E7D9FB2974B8DEC60
C3B6D0372A09A856E90B29C06D30D46E611A9F862ED85C1CC919DCC7B4CFD0E2
B520862C9095B466DF550A83E63C31F705C1C021AC24F0333225990F045F2801
6AE468F303A0924AB323D38A56318FC83AFD93C3F999AA8298BC0A633D9F9324
C9C6410B872FB8A36276DF018EBB361E71EBCD7C9FEB8F5C36555285DFC0DA7E
CFDA9372A8298B7D9C7282C9D996A9C3EC16273DEFC736E4D7C1D6B76A6BD2A8
C03635B7AC9591449ACD05E15E4935C6CD22DF17420FB1B56AE925E5ACD58906
E69B2ADD1B0AFB6C58628E27DE0496CA2BB0DAA572A2680C58E747E6050B6D41
DE54563CCBE21C89C17E0087413A931D59E631944726AAA9F6847FC07D73B0B9
BC5074ABC71F0E9B089B10BB01489F6DC5BB298C1C807704594A23471FD2AC9D
93D11B6BF4D4D89EB815D79A77E67CCE521B5A44C3A839901714E36DAA0E4C51
D3A70DEA1DFDE931EB3A83174E3C19C0E6F1215613223C44C9858D9D43233383
C2074EE83B65DBCC8E5C87F559798F67105FCB4D07621B185909F81F119545E5
81631302086500A627D987FB82947B2534293112FF28ED73460FC210075682B6
E664E84C0100576E7CCA97AC6E977AA9267C77D813C6A8371A75E826E75EC004
92DA1B4F905FDD273EA98F634AA4AAB0D9A5401B9E9A136FCF068CC0F72ECDA4
725446FA9C8E69CE77771906DDD50E3799A3A248A5F518FF251F4E94462F26A2
0A79122886DDD3BD7EF20147A3472B748788314ECE85B8AE4E6AC0F2CBF071E2
D262F0E8178A5079E4EDDA3BBA5BF7AE55E162BB8DBFE1F10C071D2F0112F884
220CCEEF3CE8424AC2B357E7B1C4FAD6D2BA209CB93062B7433F105027A719D5
C1AEB99E95C584490980819579C646EE0F2EE9F0422365F1BBD6812DF97B2321
86F5D79046BE033E842A8C46C46DFB79CFC2A4B19CA245DA4D560A0C3C690C80
47DE213F944E8F2C083AF5D3619D55AC39A8A7A3B5FE4C40D9B0399479D62DEC
F747ABA7F7A74092CD993BFD9F23ABBC9691416EE3D523CEC32D8322CB0FCEA9
4B1259B7DC8C4DE0E4B13F04895FB66D69165045A41E489F247FA569E65713E7
A40D5E320512BA1BBED442591F810788F273B367D9ADADD3CA38512516ACFC1B
DF649030B37E452F995E7A9CDB6EAA6FBF26C4EC017F166D80869E49B6ACB828
3AE91D8081641A19D067318E1A8791892B7E342986607A8EB421164A7116C3BD
E1E2D62BBEFC31F9C03CE11E63677B481B9F19233CDFC5B5BD3BF5C5C7BF5259
50EAF092A0DA22AD67A6166E687DC0239CB458C3F73C8BCEC229092B814F0815
BA181E7FD3C4C6E51C16D25AC613D2990299E65D7352783A728AE364BCDC7161
DAE6FD154FD2BB82044D4EEA6792E6FB8CC2B0C8EE68EAF4965D0050572B7196
7F6537AC805F86D1226C69D3A2CECE879A74F58E9153ABC09F68C89AD113DB26
69675E28
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFBX1200
%!FontType1-1.0: SFBX1200 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx1200, tcbx1200, labx1200, lbbx1200, lcbx1200, rxbx1200.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX1200 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-223 -316 1694 925}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA0E2F461BA16EADB32842B6D00C76F8A3359BAB9
9CCDA63EAB4501FF88DF4CE0D9DC9F071B528726352196D1D889EDDDF3B8AD19
A05A98215C1A2AF1E98BA6D25E3EE92459564B169EE8915C4C3A77E21AD623DE
4B78A134EC9973C88752BA636665292269AE953747C9605B9769A15E719E8036
4E368E46C8FCE60112D1F5FABB556AD834401D6250529F3A1BBAA7679464B857
F4746C58E043D98AAFFB21E0368B3110A911F98D0C1B16A668D8B3CE65260AA7
E9A3FA32A95349AF8AADB1AE65C05D8C83A10ABB656256C77C42E4E4E7DE2DCD
F47BD54EABD080A844C8E3D14CC76E40490EAA3E94371067AE92388A8875BCDE
93EFD646F6FEAE17E4C52BEE62060D2107B620D9A948B3B3D8D3E06E63A714AE
B5932E76384D2E2B15A5A7827EA3A3C15EE807555607FFAA1AE58C5A95B6956F
A16D46AE1028B81C056BAEE21114AE2C87B3419663837BB87F79416D58E30833
1FF10EF0D5B2112E088F63D9E747D792CFF5B74F2F95DBF5C54245C517F937BA
90AFD6EAEBBEB6707C6C751315331053A0BEE3678476A7BCDA1F939D98923679
067F136F7824411A8D5148998105E3E823D55A18FAA99F4AC12EF14C4BCA4736
E465782FE9E81CE4F3BE271CE14CAC803470BF4D71CAA1DCB8F66E98C454EC3E
87EA1A0591FE3E17ABB7966756814704B71BECE2BFAC375ADF5FA01E47A50599
153D7ECA922399BCCBA829F968AEA1FED8736770EEF2A57C4DBEA8B6AAA7D199
C5ED748B1E66537C09C6E74557C374075B6AC5FAB13DCE13ABD5A5329568C41E
6212F9DFA1923FA3C5F286F172BB33A5A288E1BEC5AD2B494AC912B6E1810583
74DA24E163B47A7A3BFF48BE11C88F59AA46C65BD88B93A5AE30FA18D8F6A5A0
FD2C18FEAF1789725CFECED7CF1C303C79DCCFB7464618FF70369AEA783AE82B
07CD64F4C202A4A34D50173C7943F254E06ACBEB75E343C61835C075ABBB15A3
322AB1C6EA139168F5ED5537ECBF73F4A2B27B0E3D466810564606FE190EFE3C
35EF5D79776E1B6C45332FECCB58F1004411957AAF9C33D3F1944460CA539ABA
4B651FDC7752052A37B16BE3E37E5BFC689B9104B00C6A7067BADE297AE0F532
F49A93873CE97AE2F4DB699C4C63D4E5CD297C1E1F881E98B4C2F82A3387C365
44F2E5A63B5D19876C843A1E8CABD37E561DCD7CEEF8BB47854AFF78B79C1368
35FB80A1A1D0AEE7CAD249D107511038FFF70BBE951E4A202AB7955546163F0D
95C371AA67319B6262F32C9F6EA34F8037157A56657DE220EC3A984F03FE04A6
2528116239C6C5BE8EDCC6A7607AB9B9BB8106A4DAE9485490055F16874B0E2D
3A3D7887C8F9F74EC962F33217264AE7D1F7A64467131D1A1D2307FFC103D614
DF53994CE65A13C4E5FFE5AF21ECB1F931B95F0AEC70B39B88803F37598804B0
D5A10AEBE74F3FE437C34D2851A81479331B3249CF8C2EB97FD6816B0004FC21
FFBCD613E05F4F6B1A686169B60C930CF301749EFD88C69AC5E31974DE4626DE
D3046577807E736FC6CA525C595BD10C610CEC80EC8D5987FFE680D0E6D90DAD
8B82225BC778405F3A8D0793A17E90B4FE4102D3FB47BAFBF92707FD888C7218
F73060EE99780DBAA1987D809A73D78615D530DC147D68C3AF6E936116B72C97
0BD8C39AC821B1B553C36E2EAE9B0620A5F3DCB2121729E403E2066FF5669E61
CF95A5855BABF0AFA8542D26384948F9710B812463167264EFAAF379C271A2C1
7B65B7B83A70AA730E2B406E254A0154F891E0EEB35BCA1FF7E25D304EAD398B
3018FE6B4F370F7F61C0C0432658B880F98923E90E9529CCB017C0E3805AD723
E66ABAC687845150CCD96876E5366CFE5113E899AA0F1EB35A6182C521B0C4BD
3876ACE394937CE559EDF2FFF9160B705CBEAB890F194BF2331D4523EA2FCC25
D285785B9B3484CE66823FC050837B89D74F7872C976386C42560C0C9902E879
B75777395A19D63A97CD150D8B5A8AF99C90A66A6D4B7F29FC636E6A620331C5
B7284570E3532C2BFC6333306D67D26AFF97FF7A0DB12A7687AB087D4E7778AB
A7522C72A67EC9C9403C5454C17452983D5DC62258B55A8298A8E3D915597625
4961A5DC93684229CF7D1199FB762E7817AAF4DDC008B69549C9B946DA245FB8
EB01878B487485A275D5A9966589C1EF16030B59A64029BBB64407E8A48264EA
A8E26DACFAD9A265F8486BE538DD8D6D2A03EAB951FFD58E4931CABCF3F895A1
94912DEAC61B7606A35A42171D8C0536810ED16B94477FDF68D6E33B24F9B762
70CD87F10AE3299C87A0AB81BE39E82B54888FE6A8F9B9C27FEB61725A3BBBF3
0AFC5E0AED54074004E6AD5D712DE7D1D7223B45B1ADA04C0BBCB355236A1436
8F9BEF10EC0C46F4BEF90010849754FA587A90D95537F41DC5901F0D5993DE25
6BA78D04006F2F8F4931860169C695FB6E74B714D43DEE9C4102ADEF42CEC44F
BEA1958D2A5C83C65E5127DBF1E507F6D8F511C83745164220E600DDCEE451D0
E504C5A23AAAC107F6233B5962156E0C8A15AC52CDE0884F0F7D42490546598B
1382AA53EFAE26EA969B470F343080BE57AF5E1A194F88BB05F50682E8481AF6
828631D639413858E8A30A3D5CB2BF0F32AA0175AA7A2C22B67FFC2D6143F71C
9806AB120AB51C2D9CE3343693F8999E47D2C566D820C359201C2DB7925CF866
E58564B6E0CA20D5927E8CC61AFFBA2DB537E7017F96372E53E15D85BDE6A9D8
C2DD263F7D1B4A8F90BA856A229467D5A8493B3D41B290CA0CF7FC44E016ABDB
A0325F3739665F4BF41EB8DBBF2E83B5CB17DA3756A2E8BAC52020266AC2D700
49FA1259A20CB3C1B576B86721924EF1C33D6AED291F0B78C20D31272B624316
92CC6754D488DE309609D1A0A76151A94704E28798B4BB88F67843A718174809
E3C057C10FDA8B73C4851BB481BC86FEADDE5507E1D03D9328B94D7187048ABD
8C42B329EAC163090F32BC5951CEADC025BC2EF2880E068D61F2BF6D3BB779AC
C6EA36CFBFCEF3010CC15E87B571D03FF3863EC8FEE76891B6C4DB37769D0210
879CB10B2751443B3B63FAEA058D34CE83B43BB3AE1CDEDC650432EF0053023D
327951BCCE1C4576837DEDD0ED2C921C6515BFF9EA82A203B9F961ABF60091C4
361F282A454471E87C9F573B373001D829EFCB270CDFA3C9E1FDC750D18950EF
78BB34EE165936400C5D25554FBDE7BE9A167600E197E51313D6BF89706FAE2C
EC255B464BFBAAC228E128F89051869EA310158171DB4E6F8096CD1DD356B394
5B10B7644564502C992A9DBBCCA0DBCE9E2D02F8E5FD126184645E5B221C5AF8
F0F1991BCFAAD08DAABEE84A91DA057C832E564392765BEB8DDE9533C379A1B3
623B8F7C2A4A4CDA6C8DF668DA6D0B6A64EE7BF60351AC49A8E5177C359181A1
FEA912BC5C18909002301CF721D6DED47F0F852E129736A10B51E964B12086EC
F49B60F2F7A1D2F3038B305DE18E7B033E41C71484767D47560F3B3905C44BCF
9BAA186703F1EA038693E42035387598C775788080388BD3F177CB73C7BDB04C
1DCECD62906508816366E7313E5C886A01C12CA6A7D0F8EA2C3E0F4151A3CF5F
D0322CA1DC391E906EFE68CE9547B5F5B9E5E6AA3FAE840838D84349481FD63B
69215174AF9929BC9374EF96EEF806A967B12AAFA89271FEB3F5863D5F4FFF86
2419D4B6FADC84DE16EF2EEE94EF9133AAB82D3FE9CE7FC413683BAD6174B99A
D676530833A191BD42AB1C89BF86FD04838F3507B73F6F240574F8F3BEFB647B
D3E977AC97BDCA20108A9AF2ED902559A999AFBC275007ADBE32E69C4CA0F7AE
66099CFFC7248F4AD38D6923DB12BB8CDC97B40D88B407AB60CF9BDCFDC4DE9E
D3A314294C0654F4D037DF90A94ACFE5278D6CD43B35EBE1B1354266A57D3A50
DB4FAE0ABD62841CECDD178D4F777D2DC317821A55634B99CD57715540308E63
E0B3A8608075037BCCFFD81EFEC9ED8B48DC0EAB0F5BC948225A2FBE7A914C45
6336CD22E3054AFD0A6A63C1F2FD830262FBD4035211E0456B5B54D16ADCDE43
9E2D50DCBFF54CFB91C31FDCF330B0DE76A9161DC1DDD2A353D5CFE2C08C47F0
5D37C5352FFC63E2A1B41CBDDD82F10378E39A0430CB4BE25C9F22B3AA08B065
E3444FC2C65B633805668F5FB10E65339C65265584EA986747BB15FDD4DE6274
69CA129EE6412EE05A459DA8B452FE08476689354B337A6CFE211D8D38B59A39
A5092CDE38413EC544BD31F8A37DF8F37070A78B1D530706B3533DCA6D5343E4
C6A384FDCB4E6D40DCEC120210CA1018D4CD78A2C24E11CA961FAF0E3963EFDD
EC8E3F2B6B2C5D6E4B3281145BE61D1F77A77BB6782C23842AD98FD7260DCDF7
347108892780B7FE21FD6B0525A384A8CDF19D5CA53947644BF695C4F6455A44
D423EC88649C518CBAFCAB425D7046EE3E1072BA0ADD1F366723083804C7F9A7
525B256291C90C9AC7AB3B85DBC81ECAD2C38C7ECD11926B460D4E6667A0EB6B
38D977823C0210413B14BE6CB6DFA8E59875B2875DE4F7903B6BA51D1442706F
04D0E68D704039DAFC5A970FCCC3240D4C9EE4341045978D34A9ADD78E3A7282
AED7EB093765C2FF1894F735F962D9CCAF5E69D228F84A288944A5351781B0F5
6AF1A6329DF39B380DF4659E33C71340C534D7D0B6EFC932A876B9275789BA3D
D8750E1B06F80BBEE474CEDD5B6DE6379C2025C564A0A7AE4E27E8ECAF1BDF49
C01F6FF5C9812F2C69909D2B7020341D0C89C1E9B6FC7746D687300F90ECEA17
F062BC46E79AFEB0036DAD5C10714EEFDD6ABE83B72005D6FDD8032C07A41D1A
7215A0BD4CBB27FA865724BA1277352ADE15CF1B4D725E249B96BEAED28AD270
6D4873AC44919C05DF36AB0E62E7BB23FCDD72756F06AD2A7E81F55AD33EF84F
D46C2E9243D6F681B42ABAA3F931210CCA673B8DFBEB5F020C85BF0CE68DFF3A
BD0A5EE57C8A84B2D8EFE1BD8F8A15901A2BD2F718B80798D95D2F992426FBE3
4743B3DE5124EA15EDCBCCDF3C115B72455ED72162C1F3E06D60881693C4C42A
69F926D89FCFCB5E11304823F59C0FE3EF39A15DC99272E75D19F2562444FD3C
4C8C439B3952088F8E0B83A029478DEE48D9C6090A4BD77FC107023E1F52279A
E3670566CB0FCD92FD5D20CE56AB946AF7132B6E9F537141D6AA8AFBF25346B5
F5665D8B788B3F2BDD6541439A16C2088787862508B9B494251B3B1426C9F392
F2DC54827C990ABC421D2EA0B2B90B9B8A38465533F2601C1D1A85C48BAAC56C
78BFC4BA41857657A8B29FEFB4B949CAA426E90BFA7ED45DC18D0BD3CE45D0EB
F96AD373B546D16B296AD82BE4B03580C36A691DC2BA91ABBDD2298B5CFBA4DC
256194ECF721D1697918B3CF4CC01C1A83BB6AE25523048B4D30DECADB6557B2
75F4F922D89693DA726A73053891B66340DA7694AED69F8621C034DAD9C195B2
765C53A81A3D24F283A1569DE012062B6FF49BBF8260A33C35BA338890C5E4C8
99DC64EF67C8DD182AC5EFA2D38CC6490327C2AEC58B7FA43183502FD119F77B
B2CC480490790F99FCF18FF17C865DE3A73048649C1264AEE839C973BDD3B3DE
F8060D7DA45EC357F409F72968773F78378CA104CC8378FD78E9F0671D80ADFE
316D582C7A94D9CE534481AB8C6F61BEED947184BF290282DF6AAC777C4358DB
743E9A75F962E779D0C97A92E324471A9A4A7F1062066CF520A5290DDEF89978
3A4CDA71B0AFE3EFBDA7D8FE92737F35B3582CB342487B79AB412E0E08742F30
BEDA350762BBFE38C28CDCBBA0105E65E7D3CCE343B9B312A4EC512D72FAFF5B
8D8184AA8E08CA293E07BC5711AF753A3B9942C4174CE5ED92264213C0F02820
231144A034B28DE8C054606C74228EBDEFA3CE1E81F8733A39B75B1A1EAADB75
74B86EBD67F334D3F47F63FB8EAA71B39B7AF12CEAE9DC7CD4DE6CEA6D5E8BD5
EC5A3634640F4F56461B71D2C8D874D96193A289266C6D6549FC7650A0A94CF3
CDC202544F6DDF71881696F75A6DFF3BBD22D3D13C1BE7CBEDB95ED2D8F6CA2D
47F2F635AE071BD88B4211BB33FB7F0E042448478D3ED7AAEA539AEDA4BF69AD
7F8906566AD76F219F2F7A08B903D378CB64C96061797568761CBA3B95968171
5FA7A75C14B685E2004635A716F2B1DF76957A76DADA4ED62A64720208B55907
011FA7E06D460B3C819388782A2F51488E470884FF8A7C59BABAC786787D295A
46839E2D64649CA4861430544D48FD3B4371A08B60EA88791C93AD211DDDB191
039D40162534E82750938543066F7E02555B846BA3554E9DB7010A2F93DAF2A5
1516343FC1732233874CB0849460D974075C1675A5DEA0A6E0DDCFFCD07E079E
D27C588AC17A231A6D8A2E00E9D1A5C91440ACAF6ED66CD2C3AC01D34F880052
2E4154E661202970AEE825B479683F94365AB74A10D016479BBD871520582B40
F2E8516290DD4760DDB817686ABBE6D30D90247E2FDC407FF8B08FF10840FF2D
FB499611EE3DBCA777AC4DDC41555634A74681A192E2E22BAD05261DE457CC69
057C03A063B1A8A91278748916B4118FFC40381F36DFEB6612EF33A54D200583
71E18B61BCF05933C0C3F6F96B20FA8FD860487FFDE7E0F68607A45721DF8F60
3EC1F2B817AA594BF45A14D3D81053D9DE8B73DEF6159361BB0B9BD43D4B8D71
91AC6B278F434CFB044DF60E68B023385A6B989167CC9CD0F3A3BD3D0F938D3F
29A837695A7FC718877EA7F05386929D2FBC52DDC7B5D4B6F8BBB550CED5D4E0
167AF71471691910487ECCD3585CE0CD283391C768E5DF22F44CAD095BBC12A6
0345623667C89B016DFF186F103AF5A3DFB8861ED69DC71DE98484B34496DD28
C9406CAAB4233E69308A3D72D9C1FD8FA3C173B2E98CAF3E801A744EA7C17FB8
E306640DDE1AE69B3F43335234DE98908D92BB15A581380A0A7DE0827FA75055
3C848088BF730669D197098DBA0C8C97CB99480AE0FF7AEEE580F9B685AADD61
56AD3F923B9EA9629C9DA663CC9481C40BF2A2284643AC878A542DEBA7326300
222BE017AFBFDCB52862B7BBDB2AC67C7F62CE1890089B743CBD5236C1E9B872
93BC899E95B32BE62AB65C22D1B7875E8F942D6563AB16F7566449F2EF32F5DE
57CC351759712C928EAACCFE6E69CE9663C19FE1260718E819E27818D7958EFA
F27261063D67649EE91246EB7C76EDA0659742CFEEC2BC6EDF1FC6669E4E45F5
5E20571D4EE45BF11E6C079F28026E18F1F0B049E76D6828EC84D4C4F9D4ADCB
FDC1581AC3C449D6F2C58018340979E00A6DB2040327E83554A4BEA4ECA9A266
70B8E443EFB3FE3D19EED0D646ED676B5D06E8C9AB4BEE437A3BEE988550B82A
BECE80B99D68EBF1133D16828335186CF85D93D65F140BF764EE9A671F032194
250241914B37BE64662F0C91225BD1B26156259AB8C189DD4B02987E508A79C1
DE77E1642DE94BF4743C8ACF765712D191D61F120C4DB1F3583FD654B10DD6DF
CE20133CBE7E1A8A83E7A209F9D650554C0136175813266F6F19879FF71EB041
777258A7BC227EE015293E0E46F193E78C1AFC9DDFC0085FA0E9B03220929600
3CE197AD689B3DC622C4A0C295D1510ADD011D365BE2C51E76136FF3F141F9E9
D125795CA2DD5DEDD4B96D88537AFCD7FC3E5B0CDFCEFC68FD0880A22A2BD0C2
AFE5538E4E72C770C8A621F55CFDC073459899667210BF60478E29A0219F3C12
E645CB61DF2B4C160B584FBD4508C93CC5B71F630AF51B84332574EDBF2E28BC
3E39C1C1EF7432F9CD30A27ECB4E7912C577594107F3903E14A647CAA484F977
3231431265F2D5E1C843F00D43F849713BF4AE357E08D5AAC545FA14D690FE87
FF6A53EDB630B4C94657C5279043B23AEF6DB43221D6BC8BD82DF3DACE44B0B8
2B6DDD4DC8072ED454979C1FD5F15848C3D906427BCAEFD80CEF42D9AB37408D
2A094ABB1A7C12771DA5EB3B3886CFC12CF3AECB20D4B63EC66DD38917CAF551
1820BCB2E11A6248C57D8FEF4942F81C28B2C487F00545A2E2020AF404813E7F
AA4D0A0711CFC3E1A07E4B04CDEA21F7482DA5262CCC851A59590D85102F25AC
F6E001048059FBEBB4E08F06C4514B3AE7FE9BB56C4D3A5F87999BECED086AC3
16BBE3C8AABFAB056F12EBA9063EA635501E4F016AD1F276509DE842D5A02971
4B21FFBDF163D5A5E4758A6AC0A17AFEF6D5833DD790567258F37231EE02FF87
2387F01FB9B5D0E50CA0065FDCE02FFB4874A9CE94CA0E4C3E813D1A1E6C8A58
14C436B80D7D3EB5E7DF99222413CF9E1059BA3B89B2D7A60563B8506BF535AB
91E987EC114821C5A688746264DF3E0F0A7A224243A9295C8F56CAFA9CD3551E
E30A78B6B3BE154EC49BE23920450E495EA84FC7F024FFBE976D4963BDBEBA25
5907BCAC04886DC268901F80F24E5C67A5ABAD914C8726420CC95A51B7B8D79E
B492D6E28BA886982D6D5DD8F8620EE569599C3C9DE0774B75867918D78275C2
7AEA6C70514E171D8C0536810ED16B94477FDF68D35C4522F510C4E331B2B199
EABD5C6FBB3D43B9DFC8EFC9C962547C6762FF88E61625C9B896C9CA2E4AA52D
6814C3A90F49453B98BFB025F5F359C1CA80FDCC858BC7B4D1B6E0D00E487ACA
07E20B5C42DE54D4A7B4CE9F7038F8A1848B625252CED6D10B9841AAD67260F1
0E198B459F09DC388E408385AF3873BCA79011F342377D368B50D507E275B4B4
C2B75B54756EFE0472557C5EC4D1E9789043774A411037D361CA493C2263C6E2
9E42F38DF09636DA6761BA318462691E7324E788685B93211722529A61BD894A
4155C14892464AAAB6FE715954ADF6E34988D7AF69F20E647835068E4D0AEC8B
DADAC3FBFD3A4ABFA43D98F7802CC14696DD7A4243DB02953903FCA10DB2E4DB
36183486CC9D63D99B1C2BB8D58FBB57CAFE81B3D4127C6EC553972236127578
1D97C255A3D98AD42A23283407962BE269097E75CAF4964CCAD005A16FA131AB
54617F79C92A677E558807719D29130061A6581A4C71D8E6433EC880CE204B8C
B50FF1382EC89490CDABE011DD465C956DFBD53F8082CC9D54A6DDC9BD013106
5CB5DBE91994381A2F9E8B012CB7477D5A7CA9BC47BCDF7A20E9D75B3F76DA72
3FF680CC0CFC03EBD33AF534CB8E4EED04A6AEBBB75F5DCB6B5EEF5012B44D3A
7A11BFE23EDF22648F56EA12F34870C8B7C079684D4AE40855E052CE11CDB545
B15484E72F6E50F3CF3F625B87376E272328ACF70A793778D647070FC79D8414
6838AC10A9087E1E4585E2A6ACCDF43387ED935EDA3270A103648997E867582A
12B4F047F7A7C29EF7484128BE86B52C3625700E65F2C1829BEF90B2355F36CC
8C1A975595603D36636F5B2306CA1DCAC207A714564937D9191D9C2D41145F9F
6A7917586EB448C7085BC69220AF241975A19CFFBD22A7764D1C185323BE0798
C8CF6B4CC492912F64921C7527B57ED21821F45AB5BE7632638684D2688C8A0B
39D7C9910578DCD4A9EA0FFEE5BC7274D2CD151B1EA9E7010EDFAD84A56CAE56
25006280C3E7B8C6FFAF9496EE5506E704FE9656FA08283F4864FC090EF83217
373CBF3A0857CE41DF6DF341DE26A807850C6BD0FE3772611D0D878C709EB5BA
E08CA768F6DBF8FFCB633849722D77FF400C7B6D8C2E205322E98F504DA66567
768FD3A1529D6F0F2DE6050AC5A6A082DAA0AE14C99A551636635377DC9842FD
01B7ECAFC15B015AE3FECF5AFD35B66A64B104D2FD8D558E85E3C730299CD99B
C82F9E61598ECE5DAC3C9BC9C74EE0BC48854DF648EF2A0C6D012AF367B85136
47813791F346148A60B2EB3795667F45DE38AD2AD8BD6BA920C96E7B93DEDA13
173A469A14FB726ECB9315F66C2737293961F1AC4E279EEA4D1D24096F0D7E78
503C2BBF286673E6775EEA0D9E25B54922114BD94B65DC86690B13EF02D74EA9
D39562D1FF2E4D93870B6C5212F5E945A67DB5B35EC94FB218CD910A4ABFA6CD
843A04D0AA95D8C818D967C77DA00EA7C09E607A1B76D20A95AE94335813651E
A0C28574C876FBB39AA291DC7A51D5860673137F84A314499D796BB76A491EB9
34DC8B7CC410DE25F5D858187F901D2BFC95CEACB6C9BD00E51D3B6D24987173
42E55FFDF863C2637F87482A5A6A6AF992613646E81B76741019EAF70AFCF59E
60BA7D25DD0C4241F96D4133E38E633D9B8326856BDD3C2ED54ED10704ADB2CF
6330A0048393BD80B70461B2B85DC4CA7AAF5808B927227E51EACCB20EC7FFFB
8895B405BA3315AFDE3B8745C7054EB8F294F683C5759F304384CB5C243FEBB4
4920C573336C1657EF359BF0337B0E764ED67CDE83CAB9048F39400C7235BC2F
D6321D07A29C82534C3B205EDEA33BBB4893E2161095AFC1FCBECD5736FF4A46
D339722D7FB1C65E6479B93C3964A05DAE8DFDB43BF52997F7BBDAAEF0CA63A3
4DC522AA88D5DBADBBDE79ED2705CDD6001AE2D0F84E35D90D031F0260B13769
1B10396D015EECB388EAA1FD45E073C081F6C52C63A5696901EFE6AF127E3007
4CC3089C176237235DCF9D0CDE1D91BA212F5E2754180B1C3392D4241746E913
B99D21FE3709781FBE501F96EF6B96BDB5DF0FF0D7C58006FC8F9CA9609A2718
001316F0FD090A21A83D0334EC40669855A59E666DBA88DBC7695583E6D0C95B
B0B12D82ADEEF0F2F90794157B541A1EDF5BC57E563C368FC7CD7F960C58C4D0
926ACE3E12340D6D9384A4B8D8B01ADDCCDF489CC6FCBE00A4ED5B8D7410DDDB
927F5086E3AD402ABF22016B22075C1FD49634792EE72543A191750BFF016B38
A50E77F656B02B6DFF3EAE8F867510F664FEF3F95C06EF37427FC2343D5DEE79
7E60D7EAA6C3EB913FB9819B3642F18349E53DCCBECF96B048A43173A8BA72A1
3AED9F973DA79B49AB381C2C68CE685295AADDE7538098DE0F035EF43360E849
EC86CF1D1BE0F3C2854EFAC11A396D4C7506C7784FA04839437B785EF7082EA8
A7DA9113C69D248482D2ABE2FA79D170DE44B561BA134037B9F4136154CD2D87
57A9D9BEDD1BB76DAD53C28594E951D6816E6AD8769DB465AE81ED85296D0B32
9B82C90E71132EAEDA258E694ABAAB8513F6E139AD747A1FECD6F2778CB277E9
E757950D857556EE412A5BB66CA816EAE9676BD53B6F27341D59401966C04268
0EE16BC22104C54ACBE6E9B7609AD01C30EE9B0711D94D7EDB931969D40EE9EA
669779B509CCE1B9A42F6A8BD12495A778F6D608E63DFB6E9806F3DDB54D830C
F3ED902559A999AFBC275007ADBE32E3763F4340BB0E690A11D7D0E5E46C4CB5
1543AE87FE16F9FC4B78703CFA58AA1737E906541D2767BBDFB492F8D0322AA7
F265EB4C728BF69CDA7D7FBF73371514C2799C5749F11D0525852CA7D9F733FB
D0822E7A0BFE089DD3F13F2C840CCD27DE45E6C67C0DCD5512CD3D2CBD017F57
EC117AF693E5EABB8355134BDF0F155C4E8426E4A1D3745CB13E704C561DE0AC
AA6B4D82E60BC67209A9700C65041A5D2E349CB4264523AABF9ABB9584EFFB3C
8B32931366E3F026AA817EE8B8389AEC5668A47E37A24BBD39AFEA3293D4BA06
0D3E3FF5EAF38E35BDEFE3E2424BBD389C249A86EA1764EAD2D65F03B4F1F026
24B3A8C0D5431A86AF0FA336B8CDA68D525612C9671510D8B358A40B2812488A
DFB1B6698EEDBD94986802BD390AF25F8B3BE45A5172EBB278239FB4D7FE2935
E628317EB6A9EFEFD2452D64853844E9033250DC88D28ED7B92B3799CAAA4511
588A5FDF207489A295A1A6531A2155D48F768640F2E476302A0026FB345BA077
F06D0F86AD75DBD91DD6C5FC93340A9269557B7C88B47A4D2638B23221136228
80DF4A64763FDFB9AE2A8214A2A47DFF9A7F01AF160394A467DC59651BF15739
97E08AEF740A455F3E198D1F76401EF65079DD13F42BE007D82B221A423255D0
3F7B13EF156346123FDD5E8C40D0DE9534AB4846CF86A301E9605535FED6A8C1
937CFAF3F6C87B6F8421F24AA5C29E054AB0A976161EBEDC1AF9EC77AA451158
8A5FDF213B6DEAEA7EFB67FF141CA14630F57F3EE9E158AF9808711285EEBFBC
2919A28812F4EB4353E42099A6EB94275D51BD9C3400B20F87FD79E7F2E2A650
C0C690BC84861BE3814E003B811199F25D0192F869C1F9194479151DF3E66ED5
AA6B8268B2710BE5A47692A30D855B2AEE0C19B7D84109778F73820F99C4EA33
B4CB994AF8C72EBDE1C84F40FBD93DF08C7E2F54AA9DCB0E2AB4FF83A81BF40D
41437F413F2F04EFA42029A4E4D84599E3B4C5274009382A01F835FD4BD711DA
C557E8FE0607132B66A80659D1E8011A2C6F1DB68A60F212402AB65F33C60FDB
1228C5A8AF945D0F4D02A0E52BDBB1F743B60BCEA3173A61C7185DE0661900CA
11E00380CA61FD273A52C5D6D0CC6BA144B40D4D871D7C01672BCCCA9ED6E17F
265E13307B78378EB94F163C03D1E393440DC88B92AF861BC3B839038DBA378A
AB048E8FBE346FA2089528439D6165F63F35B92982FE59538CF640B911ACE913
FE6E92717719414BF8601419C2B017151159770FD1A7059B7576F4437E40BD50
50F10F1BD01F33E4F94915DE4DE51D1DF24DFB5CFDAE904A9BE10DCAB2A110A9
3430C7FFD83D3A3D84EE4C206592836097D9D3C970144007D7318FF0C4874A26
CBE7CBAF43C4096B2B5E39E3705F914AC5222C8F7CA58E4FBF16EEC3CE7BFBD6
7620B5D4DBE01307F6B939DF4E71403DBEECA6CEAEA9C635078CA1621C13AD31
CF98D22DC5F1CA1F31FE25BE2E6200A079342422DB0E16F53246EDB81A05FD6D
BFD96D75D6C3850D9388AB7B265D405D3C82A0FCAD095F7A8243E60B1974FEAE
66DE78A36E64C3A44FEED14EE902E71ED78C3F33FEB6121118428CE31C82290A
953A235F101B670A6EE75D274A34A52C47BA44A22773D7627ED7538635EF1C50
0AB5524286430D222CF1EACF0056E6383FE4475F39E70BB5F3F4F7DA25492230
118376C7622545415635E32FF316DC4A6F6096A1C31616BF3502D4CAB2BCDF18
517AFC09C2C96BB44C15C7C6F3FB0936772A5F30245FC3178918604B9642F4B1
C7650636F50628792AFA5E26ADDD5BDA325EF015975AEDF24F36E371CBD2E784
8CC54DB55821938FE01884BC46DF6738E2736BDA9E58A0ADEFA5B59A38AE9D82
FC2632D961F675590C7B6EC78F8E08F9128E0E63B6DD984F27AD672FAA0AD718
540112CFD20ADD3166022BCB537EF026C06C2247C937E8AADEC7224BB26BB873
92207F70C5AABD62E7E821D9E0D61AD4D8CB39D792D24EAC8FD83165A970206C
1F3FB5E2F95E92C9FCD24019F889A7107E9984A2E602F26E328351B0DACE2EB5
0AF4A02487966D005B6FFF950A4911CF4FE9B3F49D6ED4112D39AD6E93D0047E
439A0E82C694EA9620DDB62D650763F5EF59E908C9F441EFB7D97FB6BCC5776B
B46BC913F0D27A0705F44DFA21E0EF12BBEAD2EDEB63E9268691ED6D8984666F
74FC8944C5855E15FDCF4403059F34B31AA42310B895C45A886668A3BB6BCE66
7EA1CC851A59590D83B41FB0C364A26FC771ABF9BC945C595C9F98163FA6BEF7
618082763CE6FDE99BD7C01C4B28872BED9B0994E2BBEF9D69415C6DD09BFB30
AF098158952C04243C3D00DA2B28A21349A347F1B137375C37C62983151585EF
BC8E13F77EE258154973C91A06718003CA5CA867401D275BF62078D4A1C58DFF
D4D0441924CC860D4D43F5916403176768AB7CD6CFB7B03F874142624E82FE3E
98F6A64E7E8436F5B998263C2E8DAE9464492411234DFCD4B0C907E18AEFC14F
979F3CBC0DAC6508CD3DAE99183A214CFA004F89A10542E53F5093F01B5A4431
3480D1DDD172F3F7B5698FF1400CBCE11A771D1B98B28E60594607BF0CA7E042
CBF2D8DA4E014B8E92C9348D8990EFF726F3C29EB76ABFB5615E91914BC1BBF8
D940871F43249D4A6D09ACD781C7887349FCEB2296CB0504F911A13ADBB617FC
B9E1E80DF4BED149745B7006ED38A6DFD8EC2677B9C874725486FC899E086EB1
2CEBA294E01F2766DFB49E029FB39330A8F26C8A5902F5B49352F3B53341CC19
53586A8D7B28290136D7F43073AD578E7869C3267169C712DB35663B90EE6AD3
7907CF25D606C33DCA06BB2114CBF511921FB8757A04A9DF04054EC926026DA2
5D51A51F8E3B3E94B7C5510EB26133519F638D09F2799E35E6D07A9FA300E075
521A8C020B402B64C054592F4514CF98E3E29C51B858B18D0820E8BCB4EAB40F
BF615AFBFDD299ABF3E392B036883EA6EB103F12358E66442E5C615D5ABCCEBC
B1B4F9695B8E2F53EDF750CE0CC5BBFD3A2CD8541C74E528690D911412EF313A
F91B88D1432E6F6111C5C9FF76B54E43C104578710AE65C7F2726F80001BFD50
D266E94B76BF9CD2AF645AAFB23A9E6290130FBA1AF83D858B2A9EEAB8D0D330
012CDF509B2CF760AB25808E9CA43467F19D2447F42408EABAEF29491CA0DDD4
8B076529599D553774F7AA483EA284E788176EA75EB8A93867EDABC048370EAB
4E1C8280A7A3A1C0D2E74F6694ADEFBD2DFF922C3C5A8EEB465AA1770AFC3ACD
2FADCF142364DD34DF59A4C68A0FC20DDFA568EAF103E63671CF6FA989DE5CF6
B52F0F1124D8D5AA97F0FADDC671CA4C3A7C703D76BE93188EECE42E3B299869
9D33E3C7C77416A3DAAC90546DB21D444B49B1C0AAE1F2A93C4FA478FBC6189C
2AA2241E58AA1C2FD3803BB8E3D3A0B48E153AF7BCA866DC636190838708575F
944970FB7DCBFBB579894042917DCEE75CC9934D7DACDFEDF479FDEDA7E3E987
A01273C71907C59CFEE3C5642BD1D0CFA903B8E587609B2346113E066238B7FB
4F760B2052103EF27D6B15CBF564DA9E7801AB4857B6B5B2AC21BF5252C84E87
683C568BFA0BEDE265FE19025157FB5FAF0320C7CE3E72D2BE1D9D2BD275F52D
2032C868FB37CDE8AA255D3EDA7ACB7EB397CB24739A0DBFF244E1931A4EF3CC
EF0A928C3A985D8D83FCE614CD391B0E8B1D1914DBE9D633B6EE90E0B7F99B11
9BFEE6396B6770782DB0A8BF6FBC041D068F2BC46B30A03E33711020564C9B25
C68186CB0B1C4C7D1F24AB5D72311B35B564F30AA1F268AC3841B05860CE0FA7
3D3647BFFA2021E05D26207F0DE2CE73922F119C0DA609DCF57EF4F2AE028781
D52DA2CAE78CB5E75F4C6636CE7DB40585AC9736F5843E846F49F2F83F3F5411
6461500471693B912992BC817E704E4F4366DD2684B2737A6A325BF051784EBF
3EF0859A7077564F4002D3AE0268BBFB8D5F37AB238124545188DFD681702745
D81FCC7F1F703F8F37C76DF7F8B8508F98E9A2D5968F949C6FB9F5D313FA5735
3EB568DF82FF56753BC9B1D39A97CB6F6AD8C92457716B141516B7EDCB56C83F
CA0947C4237C2BC23D6363BB8FBFADFE316D582C7A94DE3F2A63B61057CAFBB6
1EEB4F1DDA7C8FF09637003210891584763002A1202736A20BDB5CCC3506D966
5B287EE5B5914FC368A5F1702D49F005CD4403ABC39F8ABC8D9195828D10EA02
F8DA0DC5A3F55B678B6F1908FD50BCD2BA1BB3D203E14EDB793BF0C989347A9D
DBDB9CB1C4B5989A6A2DF1FBE1986A85F304942D59B75400B09FFCC8DDD98BD5
3FCDCD9224FFED2804B3EFC25B60E41600F014C0462417DCBD104D888BACA0E8
10C3F26B0A00ECC14BCA53DDA2F5CE9E6EBB7491E91A067473FED96DBF7A52B3
D1546A0B9E06B018DBD0CF0B5F3FA8433ADBD62AD14A3C51C16C0F6BDFAB8547
48172F6468A2984848E290E66C5829C3B7386767ED53B42360B89664DD65F85B
5AD694AE2485065FC0F6A2E847D5AC15A72BB3B447F7AD42E0712892DA03EF82
51B1BE7AE04C0CA35E01CBDE9F945574DA56639B0B73187E5BBECDD40438009C
4FFF5F0DC1E6A6FCC1F86BB5FBE9737C90B40B14C4662A8D9F8B0FEC432CFF0D
39B25C3D2FEB16928FBB84B4AAAA1D595B314350D661CA284E8D5F89E85FAB35
6AE0C0229B4226DF766A3A1A89E2EA3E37DED9E09DC3606BC04ACC4EB5B37602
20784B99BD84F734AA721BC929A7B084731ABD9FB4EE7DFF1C731121FBFEC934
91B6FB68DD3312901D27C693037B93A422403278324D0A47FC1D716DC781C719
C0A9D55F20884B2881E3875A5DCFD8EBCF668C4D0F9223862CD77D8B6C6CFAA8
B31128DB251A621D3C9536538BFF0CC3CE5E9744D80653D00001F2C5636223C5
46F9C4C7A986EE3F037DDACDEA1007FB35D5FBE7311482160BB8D87A37C7EC3D
E76CAD9B73209678C72F9FD52AA43FC0AF9FDDAE01028E3911E20E85A2336CBF
C281260EC6CF9054F412BAD315F1DD1BE3E61DB226E294133E866F7FE7FB4702
38E4272264FA735ED364BA6EF5CA06B52D6D4D50F930E45A16B137ED5FDDE170
0F4CF2E459FEFDACCABAC5C8A3EDDC8450CE0204A91C9AFB22C8B517E676C0DB
72BE6F51E9801017303B7BC3EDBE697D819CA794037DE50A2961AB79F6D33C81
E9F44FA7A0759836308E40CD2E28C9C3C09A892EAD72C810AA761E8E4C350650
F57EC1575BC75D8B00D546AE378D5DAC14ED23EAD6AF27C122E67151797BCE0F
39638F73E9BED82B1610F40DF005DC597F9028B1D8203496758E37505D73F8DB
6B5C5B98E1DBB8CE5929B941AD87F3A8EBAA168AF9570FE6A3DF88B3BC55635B
B2EC11B6FB7A0AEAD3D46F6DF5087E352D55D492532D8A67E0D4F9D4B2EC0D07
D79455CFFF3B41E47175B78B6305AF70793A5240BA97DB63AEEEC5FD3830B89B
6B7A8805F554C25937510D07290EA97425045B53698381A50FDDF3F4CA7BFAC5
544A4DEB7B712F0F476D28343BC202D2751CD230117331EADE84C45DBC62DC1A
26D1CF5BC62C76CC9C789F1C78F3D68CF9F2E442A0279EECE987EB6F7FE5CD4C
A90D2D36F65FACF749201D260743F4BE40DF951F9D5B375874B503E0684D37D3
854F5D699298BA0B608E45C3073FA9CD78A273D3BE782AF68DD938DDFC7F4DB7
34F8AE2E958FCE87B231DB217F60D37AF23BBA434A5C71315425C8F8993F8DC8
F6A5D197B68CA96EB668858FD4EA77979C88463E964B167E685FB0E4AE73770F
4C8D2B5C13798C9B69821DEA07CF601B702526463314459B19DDCC4B7ED63988
2DB41CD75C3EF396FF7CA9679FA1FF16F54B2F45180B661E7D3132DB3D9479FF
E8A5459EC3BFFDA299D5EA36443D693CE9CE736AAA4EF9864DB6B524138A1E5B
3012B4EB84A14FE17D9B67A3BE75515171F443270EBF1F8A06212986508AA838
5970DA0D10A95388F5C3CB1796353C76E5B6718F3A25A38E8E6F5B097A85EA91
4E0463EC12168E844505FED1D8C18BFC79C94322CFDD487992BE0447DAD58840
C0032B9E1A42E169901214E75EA7314371AA799F852E3A3DBDB3157BAD5C1920
ABF7B69C404D7604868CDF0AA0F9FECEBCE142430645A3BF2C9AF1D1766E95AD
42571715D1BA1CDD71CF0040268E964F807238E2993DC47E633B37464891EE4D
6923D45AB9BBFABF2D15A493981B47CFA2962D31EB8C3EC4E64B9E338EA32E34
CB99C4BD2C95CCFEFE0A2BE8B9685CB18448DDECF05451FA578AA0D09DC4B31D
BCD543732BCF4294772E00BF043967017D3A693110AF48B6E92CDA734548ECD9
EE44DA5872157B1A8C0C73A5F162954B474F718B299D23A59666A82575BFD3C3
D78B3CAF2DFB7A57C8646E41078CEF9784A28839A38499F1E9C94C44B0757964
EAA77FBBFBF8D2684F9D511F59F3D879F2484C4AE736A2CF9AA314CD6CE075E8
82AA25CB1B0B87BB713B3707564A94D8A02AA47446C0C3B469F91873D1784C93
88C1F08F1CD849902B1A140D8A30C5AF4DF474887942FFE8C697E0C79464D2B1
0E531A91FEE03E20FA49D6C9704299515ABAF994AE81CE2D10E73A7DC2A0C74E
1FE5CDFE35E1F5FA1EB33BE5886BD9EB6C2DF4A8A22BCC06BE4116356A44FD66
993A30FC1E3D21433EC02F7BE6CA808302167102B33064A2E7F793548118816A
52F3891D114EC0A6369A665F60D7F01A6F94A66ADB057D9E61031177390B8ACB
746425A4B3841EC5E2D3F615B95CD19244D81140550F4F69087C51C0353B2DA0
CE47ADA562EBB30B43845733C7F0EAD4665D39401F23E4B5FD5C8F9F6041AD97
D403B897498780B2296D8419016F65E34F7ECD6121F608EB081BCFA979C5C6C1
379153E65EF6EEA3CCFF5C2E9082F6A006ABA7FA6C1D9E327108B28BADF568FA
1838B66A448272621F1110835E718EC83A4735876031E4074411EC6945E916DC
6AE2333D4E5ACF575FF893CFEA61A842025C83C4D4FDDD175F41305BD254610D
CC177F45C284064BEBF4FD0FCC4FEDF573B58BA27E61A162227DAB14A66CFF13
C554E7FECD283B2E27BAE65E591C752D3BA847ADA4F12A4B52640BF7BD3CA875
93B9BF23A3DE025491535BA98A5BA385E58159AF3986738A5C9E06E6C3416756
7B7531ED5A7CAC05C2E5F2AABDEE864961987BEA3FE4208CAE55D679EDF2E3A2
FBA9DC1D386A5D1ADAD0B4D91BBE1815DB55C8E362A9FF7D6DECE9F140854635
E3C0A05EE6CCC340AF936FD8ECD352149A0B9A9CF803AA23296FF13C35C77624
B02405C4559258C1D3BD5642E9885725F3623B6503667352709ED22671545D80
17BA4D62D075D3C5775AD2F840E89797E8708FD792B7522DC62F9AB3201C3C63
4ED7572388BD43EAEADE15872787FA60E220CB0BDB31F067C27EF82D154D89F6
DE4BF57EE665D35B208A0C02BFDD04D6449ACA0DFAFA0904283A96B95A3B2C1E
DCA2FACF577963532987BF81389806CF2CD42E99844E36DD843726F27AEABB1D
405B82B91A68BEA9F096DEC694AA9D32DA48600886A137EBAC778E0D33AC79B0
1AFE8232BBA234B28DE87CE1164A91D460642D915DA4E4E92EAA273CAA4AEBF9
87E69E3F8704A877303B34D920AAAC5974FE89729079E8AE5D95C12480996883
DD0D1E63342CC29738F47BE723344C2AAA9246DC7757B9C03FAB40155C75B990
4DCC7A5428560576F71AEEC9AAC0B81A013361049FB80A139C91A6A5089E3776
85976A469E3404883E42A05C12CBC23E8A4454696A793F339E069308278CC59D
9DCE86EE1BD6A5B5298B1EE955E0146D38257D9380752EE12344907C71637225
F99474A4111F0D78D6F9FABF14B72524F767956D1E52580ADD1FA54BA2E4945D
4B9225F753C282260E1F397EB126E1412637009FCB3624F372DB93C9651DAAF6
7490BBDD31EE1305F7B8645D8E277CFD5CD4508D11A05EDF7295FF73471B04EA
C1C43C5126F91315EC686F92DAC4762DEB28108C5C55105310F4367483698D44
BD52B7642385765E48FC7DA322BDF53A4347FD7F052B6B2460D07A7926C3101D
2F6D204F66D10F6EA23C6DDE9EC92B49A69E5BB7ADE237ED6FCF0CDED8129A9A
9996810C2392C167771D3278FF11AC47FA0ADEDF9E99E25AA03410079DBB7C34
B675E08F6D579DB084BA620FEE557A9407345250041CE75D5955300DD171BCA1
9F4644044A4EADCDF754C8D3D1408831B3E7C6F7DC6C5A33B064ED7BE6AEFCFB
5ABB90BD2FFBE4600011DD6CAC491F322F0DDDFB5C0C9149C446D8A3F0766630
1C0FFF47973F46084A9BE30785A5975776DB7A3A7E7DCC3CD9C0A6B4A537B270
DBCFA904E6A6B37E04EF7F3870E47ABF0A6C6F9F6DBC495B30AAE4B922E434CC
3CC52A9712FDCEDC71B6B56D0397B8B5A08417E492F8B7D79E3629B3DA99263C
B587E8F125EE1F55AF8CE41AC2E781D945E626B2222E1EFB545D94E8B2B8EFBE
199CE525A1E00E73D1DA82DBCCB6ED5F03C55EAD2D4278D750151AABD1EB2203
E8BE84028A37D00FBDDF692506DB409C04F758A1B92F7E9F6F2D9CA68547E543
B173B8E9A483AA1325B9E6B738452D9F2AFCAA66F291EBCF794DE40802D9539D
E74ADEBBF6C89F325FB59D167C64C82FF2B5EEEA62CE0C463EE12FEE956ED67B
7940054AAAFFF1E3960D009C296E925AC9CEBDF0FEB298FDB70A95FD8C4318E3
F900CDB8C23AC1ACD3A04198E4C03685029CB8A963600DA2AE2257D7BD1A58A9
0B48B7DBD7D590A6EBF96EFC750BBDB6C18E387C3C6D5922390AEB11B034C8E3
D2434502BD1E78F03092E8621A64DE2A81A46B4230FFD33522AB00438A9C9D46
B97973820FA717E6F7C54A876AA1471F013201B0F5D7EFEED94D47266355CD1B
9E0879B81B9E77FA53953B6F4F3CC78BE76517C7C3C4FDE681B8F75C0B445764
430F1AC65A7348A4923B5F5FBF96FCBB4B278FD346CBD632053C1A7055D7E268
A26983A98FEEE317229DE7CCB96D99E14E65E8B94A4438B6E4E29F7A322FC15B
0FD6EE6F218D6B52510840E0CD7B5DD77C4DE2B0B287DABB5B1F7CE5FCDD5149
617DA48ECF8341031AE95C742AF9BDBD5F1FA9A1D6D7CA46855EF3473FB10BDD
001E99631DDD423E7A0E381A97C9A12E86667A7DEF22AA178AC52732ACE5A343
B4D20854083C7D69031C0224FC26B2ED44064AD100A3D93DA630D7D2A8C14590
3D67D8A9D0967713436EB45BE9DDD77F6727535A327E1AB8E508C369123D4F6C
438832D40400AA4BDDD6A9F1537E61E7B82F9077CE34481A1A63CE6008A9D43D
657CA79C97C786DC303E3508B0A3264F79C6A4260D3A75A10DFAF6E0D311DDEE
C677AB1AD3858038BACE88842CD9226B055F87ED7E2892659E1D2A77E28325B3
F9FF6918A962BBE95E59B801298C13C5616A8A4503DB47F1D3CDA46E64EADC51
7CA1208461A90A56F54018C61A8E9A9DEFFA0A29AE1F313CE5DFCE2BD80FA4BF
5FE3F919F40BEB6FD7B2E5D263EFC0707545AD6730D6F87A2C5BA80E357E9172
D08CF89DBEFD6D19BA0E6F66F5AE7EBB176D9196E421179ED9BFB8F4F819BCF8
4940C237E56AF2BDEDB7E6362E3FD0EC80034BD8CD69B2DC5E3623B90CBA49C3
AF6E4130FCBD29C22DE9C97D8F5AB948ED224EE53B87D5E55FE10D906FFBDE62
D5D6F74A81ABD916548B5379AB2AAD1CD4D7C04309075988B393883D7C15E0FF
A00C09D3C7BEFA0DBFC1363DFA2FCD9564452C57272AB8C0B17272D2075CBC76
776E68997B33091EF14EE09664BA97B5C5FAD4692A1B38D8E20C3F10AEB46333
68F4A317CCCE71FD41288EC710EF7755F12429429C0A667BCECA71F03500BB87
6821A80F567EB0AB6FA2155F71AFF4C72D15939ACEBAE3AAC033DFFF1EF56106
18EE8BAB24CB2D7098C8A6F8E898643E5C8AE8108B125ACD55863BFAA97518BD
DB8B9C3E00B98C514CA6D716F2715375D5462D9425444E637F4CC01438E59611
1A99D3B908C5193441101A97556DA4C1ACE3734B8D6DD3D9830CE5E45BEE23FF
22FA04B5B64115C252C6F2F2383C8AE81391BB70A9F5DC52B7C16D7D5B94D23D
089BB7FB31CCF1B0B38AB803C0F3914B8A73E0E4A9D889E5840543B63645DE2A
02E022128276AB9A389CE9D13D20B14A77CB0C7AA5360AE3733763B66F6A6110
027A768486E9FF857A0D4F9D4701057F3BA08DEC2CC0ACFE20CC7835F203EA61
65237A2C2A61680F33643C6E36A138238F7130EBB2C2AB1F4A070D4105523B17
4B158B1E93C3AFDE767C2B97260F6D66C87D8323D638F605262E0ACA9687A126
3365E525CF49FACAB93140B5DCAC6A40167882F83B916754C1C12E567F4DC2DD
BE55491FFB8E8BE2D5CCE2DB6BDFB57234099FBB7DB895B18C0D73F123253EC0
ECA0D3986EA27E328F1B3D5FFB9E0931B1A837F20222F03A890855C5FD89D2CA
5B4A2BDC8A3529FAB349AEDA85C69B47EB92DF31A6593A64F64F78B166366FF6
D1EA6D8F6AD70C271D8501D9F19EBEC8E915DF6FBBCA2E8C15B15920B0157EBB
99FD7FE31F70BE4C0B13C86D436EC60E30BCCD8A6ED7B329868CF567EAD33C38
2A63FCC6E7B4559FA44F4D4122CFA0DE656EC2D49860C2653063BE9094888739
F24D364E32FB24DA2DA855040744544F7C3DECCA6B853E0319151C2DA86453B3
F9153996D05AC6AF77A1F2A15A7EB664ABE9C5A4F093277B5D03A1FEAE38DFBA
B045F79B7667C16DCAF3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM1095
%!FontType1-1.0: SFRM1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm1095, tcrm1095, larm1095, lbrm1095, lcrm1095, rxrm1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-188 -320 1445 942}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839DFD4B92DF0482493852D12053A7904
BF6E144B9488970F220C299E80886366662C1276120E72472BF84082B9EEC729
F7007ECDC5A850C88810EA679DABE81714004E65D938DA9ABDF29C949A52EF02
EDA8451563235D51286E9133FFC7A27067DF0332ED614AC2D4FAB88EC84E6CB9
FAB41C933E84B88097BA8742BC30A81416D1CAA3545F08E2554B28362B99B79E
FC42281922B94604AABAF5F7A9B8E2D9A4358F38F2382EF9544B859D098DF243
034CC475CEDEBF0EDD0A60C907127BB32F7D85A62A44E90B4056D9B4B2FF3A49
786032C6B25794E2C0003C7852C6B0688351FBFC43300FB0B72880BB7B58BB61
3D1064E7D4DDB128A9B38EF7510B7E5F82BDE39489E2D1DF08816781B13836E4
89390F84577F31776FE43A5F94F817A4AA4A698AA4AE84B178FCB65F1B5A5CE1
334417595F6E40849041565BAA497F6E4B8F4305D849128C9A26A98B909EABE9
8F2659189ED27C588ADC7C744712B4D9AD0C5DD25D1233E979DE7F53C5F1C47C
E9DF254086E5EC70EBC6B7E080060BA72F15E6BB75C75011B15B7ABB6BF761DD
428FF1BD688938C75BEABA7DEE2AF49364D2E198FDC7F8FA2313BBE598ED3703
7ECAAA4670BE3A85C693ACA829A5936778BCDCDB38A5981D4CAC8994E2B2F086
26D8793AC1393D49A8F2FE391F0EF8899A767F6A99C78F239001C028002478AB
E12A94D59AECA66F54951972795B4EDE80F67BF746E85C18F990C54B1A2A148D
DB41E49F264DF5FC0C890B501E1DA1C0D5ABBAB86B8C3C4BD9808AD436AA8DEE
050F18E90E9529CCB017D9D48DFAD3F8C2D69C77F37924E40EEF507C2069ED41
EC4BA5059F9A8983D858523953F8245D2B8AC53C60CD071C47F6E34CBCCC8B2D
D96ECB3D65C5F091826733619122A5E291FE16EF8C01FB54EDD95A82087F4E69
B7BCAFCC13B34B86F06197BEB2C71851C9B20DF35015FA19A6504D71557DA3E0
DD04D29C5BA37BF4193E5E18DAD2FDB2979ADB9D6C366646D36014824C1C2F4D
025709D28EECB76E4174BB1BC3EEE0ACE9950045BD25A5D100A2D77B00EC7C75
91504C0D2368CC90124239014A0C4CFD2CD60E22B004DDC927339E34C7F7733B
15FEFE23CA179322EC361EDF1B48D266FA7EAD71625AFA29921EB5064AFC211E
202ACABE394A95196DAE70D660F9249BB09E25134D709C289E519506B555EF47
5C1E3DD3FFF69BF0E7C6965549CECBDF7BDFC6FA4F7B74BEE2016701D488296C
E28432B97C5F79B80DA189C306B3C07408C7AAE52BBA3269401FCFF5E6D3CD5C
5CE68BD1F946C6DADBC5FB8BADB64DAD461DB208B1E2A278771A42DD8AC6F44E
FA75BD20BEEBCE9EBC2BE1D00E487ACA07E20B5C42DE54D4A7B5F2711ADB30AF
5F9D5784D0B66AA0C3A2BA95EE94A5EEDAC954C033A1BBEAC0D02BAE213BFBCD
BDDDBDADDEFFBE1E3A1F715BA7A47E9006CA6B2A9896172B801881CD78D8D1C8
A91AD63991615A2DA3EAC1EB51261B2AD4C243D76451DCBE91BC31763F5B08FB
D9B21015A30F225E1DCA5374D1C2D78FE64DB80B78261A2B5C8EFC8EC3B4CFD2
992998F6B9230D2B3AB4979BF5E2BA0169B709385B88D9E484D8CFB5489ABA2F
75C4E676C5E99F047A3B033815C699B778AC96D967F64D7D81F133BB7A04B342
ABA1ABBCD4488E89DA5A892CF7E111BB1886A94D8CA1BAE98C95DEA8966574F8
F779FBFEC09764D71E2268DC61FBA0685CB820D72ECB55FB8FAEDD4D4583395F
CC2E7C1611FC07A3D50158A6820F38BFCBDB596178F69D922051B6B0398A8758
5CCE4E01E4993456140D36B603BC38A07E5C5D5E99A4AF24BD0B954723107396
07EAD9ECFF2EAD26879CCC010CC8C274E96374977E6CD6DE427A7B7522EC6B60
6CF186D582DD972D1E8B8F3068B2120159D36D3AF0118FBC8ED28F580DD78AD0
6DC1E54CDD8A7B0F05CE4BBD2B941A82174C1EA4C2A10E6927E99D9CDD7E3959
0DC25FA98B2F04D195EA7A7243B9C9C340BD4EA59194239DCEB5862DDBEBFD36
8D3F08DD9C414C5C11852FB77079D74C259C468B363D4B83985578911A854BD1
21E7D4C05FAA12C4E4845E8A53A2713774A85CF35B444FD036A383BB713B8300
7F379A04764E8FADB2EF290479494370B12022A3F78C61FB3614B78B00813F9D
03598AED8C666B1700AE32B6595949BF12A758C3C38D3816323CE98EEE5EFBB9
3FED447A85F1453FE88C13A3C38649DF8E6F1FC9B1350298C532CB0E3605EBD8
9BACE1D1F81A332B982DB2014261F449D6F8390151441FB33550D3CCCF57F306
16144B40044F517FB66E333E78D20FAA31813F237D97CB57C175752100590F47
C86EA3DE3D0E2AA0C91821A00DFE7B803EFE60AB58C993CF26410D86F3813391
6034D121C15494976145BBD51020EAA8A777AEE0E86EF8B6EFE213FB4AF28271
7EBAD2B7BEF010C57198BF56F05A4CBAD8D78B0103F27560B7410A3A59216060
DB63D12E3BC09EE9A6DD43BA3486375883C30B805BF5958288CE88EE0FA2402F
8A7548AE264923CCA2E1381DE84FE25767C311C0B087F4A711B2F239A11365E6
034F7ABF23F8008831F3DFE2E62DAD3F671582DC6962E8D89A331B9D2D990392
C923A50BC1C753776282D5D1C72C4BC7009F6F9F95B32BE62AB65C22D1B7875E
8F942D6F54ABB8EF345623DF51BC89E953E1E2FDB26C0B8140A92B6C9D37E426
8D2ABD68B87F1BF9898FDC61977589C35CB2D3EEE26F95EDC4010AC0B6B1D7F3
3D5B4ABB5CB42B58BE44EA60065DBEB6CC5282B8B292BFD5D3AD6497203AA20F
102C82B381865C38D840A16D980867837CF7FBA37D31D46D5A8EEDA916B33541
DFF07C138C0D0A3BA8943478FAB7895D90AC79C64F90CC5517CD9D127D676D48
1FF9A3FDF88E0F5E176DCB6FAAB4165673ABD3E701F809808D9043A1D7989CE7
823D3D2F362BB8D6477599D9C7DE35A014F89A3C3BA79968C8239CC2EB0EBFD1
D67944B75FC0E07E5A83E25F55292361DE380EB0DC9B725F285733A9BF81ABB8
9CE842E00DE1D71DC16F79A527CEC0A3F3999655B65779F6249574CA3CADF103
DAC3E370947424A61F76E0CEA5063A47330276FD372C49FB84D667AB71BE74D8
035586D80E384CE54C852E31A78846FC67C3CE364DD002263CD47029F73EB762
BD6BAF9808711285EB2EFFC49C628C86531E9DFD7406561646065CCDE27512B9
68ACC608BB0F79650251CB35E310A2AA528D7F527B7F0ED94405E883D263755D
F22CD473E75C3610FE6C3304ECCCBCA6260C6D7171FEB7E93FBD9B984B052702
14412B7A3814D0016DE9C5BE1A7E68114CE9FB43285967E9EF4AC83E885A1678
AC9E2E86B3D334A2D29A1C4CF0A001F21988012BB901EB24223824AB96AB9FB5
ACD95991BC2D1537359817A494E321A4447375FB5D3A527440CAB36919BF4D82
DC3F05516C89CC6330078F34FB8A45D59FFC9AD3E6923EBCE1CB7C2B0748CE1A
90F3F012E6D6E4C5D95853BA4CA95C8ECCFAC48299B8AB580A32EB30BDE3AC5B
863182E84045A162E20C8E7F06D46E167022CEF503CA4D3AA63B737B0D57E5EE
99819226BD1563B6B6DBC8BCA5DCCFA45FB75F2CC2708C1E23A5FC8357FB2847
C143CC6EC6BF8699D1A13E7D573ED08F73B02781297FCEE456DF62E587D918BD
C79A29F579CB9B65A7A4A64B54C63FB3E204CF2F99B6985191F00B4CFE072340
4EA58C71FBC8CF082E1F0171DBFB86A1BAE76D02B56E21B1914DCA979339814A
C97006CF6A5D0B205865DC4E836C7F9D17B7877E08526343D51457E28C5A8B93
3E8B73C1AE5B8B26505067072D0251F4BD101EEE8608E3683200BD8FBD2B31E7
B6DDAAE2A20A35076A749642D48FC6BAE78D2DD58B2C5537F8E5596DD33473BB
42FFD3BB8217C1B5A77E1B079BF6F871AE15997CA098E7A4ADB34408D06E8E1A
E2A82CCB5F7B296BCFBED031FB44E2FF5DA5714A1C1D74C489F22E57C98068B3
8EE8C9F376D816028E8DF78DD00B4D44D94D457AB4506676DCF096D642AC866E
8073F3B3F2B3A0D32687221DBE2188E2FDC086244B3925AC7853A03771CE0A5F
18CA44B23C1D26A3B34E56EB3844AD368A839C898783B98945A1F921411D8FB0
0F97B4EA47596223F2FF5B5161F0CF281363B7DFAD216D26ED6F9FFB5D69D312
1321BF3C7BB8441296F8C117951DB4BC850FA4E58C2F22031E5D3CDE7E167319
017ABF12800B42CD21BBAAD7F22D53E865CF7040AFC2F3BF53B6E6ED879EBB38
28A46BC1D59C82FD020879779C83CF9529ABE41F7F866D4803AB8B1C26C46A08
4588FD07B87A625E696027382F87A30A31E9D23BFD125AF67EE7BE0E1B393FDB
13FC3B396DC0CCE72A74B9B5C4AAE16FFD99CB484614F227C502A96C815D7E3C
CA60A1ABCBB987B82DED55F342604AC1A4DB880D095A7EDD3BDF8F21F1084822
4F235ABB8581CB84D70C5F15AB12271E6E12FE6FF643B6B833A0CBE0ECBE0E8E
0F4DEBA482090FAFC229BA1A993DBFE4D3BC277810686137AB4F58C8CEA2C160
EE1312C979D9DA9EAEF9AA8C50D4A3D5CA8823A4E7A3ED885FE966833B2C6445
945A1D3D9B1E4ED1AEBFBCD90A5B66974E062E1435B0BA36639F0C60AE2F9DC4
9CF9662297C6D7BCB5BE9F738108A19EEB133902D74030883D4F9DEB15ECD759
87627206DD631F6D650BCD6278AE4F45B4060BDA12DCBB72F6F95E4F0DB6255D
18B359DA6BE76C9F4D23A45B81F398196E6E6CE8DF21C9F77A787AEE2E7A5EE6
B5EA7451F3FCD9F2CCD28F4D7870B89FBE1FFF5EC70F87CCA4C8D30D5AE95E30
1B56DEA09150C50FD35A57EBD17C3CF29FD17D24BDD675C0E67D55C4FBBA8C76
364CF039DBE20BED379F83354F77E797A327685A59E5733F876173A10E1BB40C
2FE0ACB1C471C3B003661EF1F2729556E93802297CF6901134E306C9577DD41F
1BCB58B87ECB47D200F5A5EE8472AAEC545F08D2A3984290DF19B0AEC0BFF6E8
11A8097DEB8A1F6489C8B353BADDE82D88C8C0DE4ED8F7853E8D633051EC33B6
D56F5BD022F4EF4B5B2B0A500A0357EF9F5845AB48A84A757BEDCD01038E3609
2F79420A3BDA2A10214F0A6CBC2A01B3C3630B16B8CFE33797676042C9970508
0E1DDFF4464AC49E4B8E3821635D8DF147B6CDCFF51C9A4E3B438D14F2825BB3
82D42A374359856426802CD3D730F0AA1705210A3A74148A7B268A838EF961E3
CDB2CAF310D9616FE0C6CE2CEEDBE99A3FD444EF68954F6EEFAACB711CD41A19
9C0540918E2CB0A8BF6FBC041D068F2BC46B30A03AFD83B7B1A33A32AF20DA21
85DD55560F0D18FDD94529FDAB9004FB01C784E4B5441570FEE5E2FCAC99180D
8097B19BF3D84205529682947F1C6D1EA367589C59F314217A2ABF5E3303786A
7607BECDD416F7AD733B005B45F8AB84DFCDC53647484955D11568863D9C550C
26992BC9A2BF3A718F0E6D96EAC81E6F0C763E0074A58831AB0E74097630F02B
2BD21DB87F2E36CD5D0917BB65C8D4956B0541B0FFDF54D1AAF7B0914CF416F1
41606ACECD58573F5F326A7DFDD83498A18582CEBDF19D90657C51475FDCA1F2
E2BF973169AB01EC23F830D63E1FF9624DFF944506418EE4AD1570F44595901D
E3454D76B755F3544C948EEE0B5EC77BA070C12F729035258CFF95B4E9C6E472
00F0601ACCC2D758E55D621FA7D5041D31F9DB843750893697A0FAF3A9A8AFAB
2DE0E7CEE1D3F46BC460B4DBBF3FDC59552B6AA31C8E8944F95B93C614992A91
791ABF1C59D868369DBE4A6739292F125A94F74317ACAE809C3F47D6763BC96F
A5D1B37B0F599384399213BC5F364126ADB5ABB29BAB52EB8E57C50CE3E42A6B
412F9FBA2D7218262B37A194EDD77157EDD61DBE6E378C54F419FAB7C9E5006F
BBFAEFFF2CCA62FFD10BC240C421205333BE97472148DAB4601462D5E4C2CF8D
1A1BDFE92EEA4D44E9F55577D929DC9CC20D85DB94F4DA751DBA42440D81C64C
56F64969D2C10F025D415F266214259A48571D7EAA95BD4E4C90D6C21B249D03
A9B6B8C8CFA443C64C860DC33BB123FC9D031B23026BF6887D83D37702FCA395
752A982E8E423277A97C4B2BA515035AB0B6FA9ADA4A6FC232154D1E1490B39C
6E136AAB5B0440DC16E494EE9589432DD04F968558C89D12E3A0A10B31F96F02
9B6ED8EACB2A2D95C8403D10925D64940447E1436AB8D187E6ABAB6A554F2B33
27D780D50CA5E2DB14A9C2E7B5950C40FC72BE8D6FEF72372CC051A9D51F2292
F00A68A98796CCC53DEE5AF9E6B42FBA193A90CC49941B8181AA1745AED61D15
8D22EA30D1DD0EE6B51A1675D2B472ABAF412F2052DE9165B5FA989AAEFB2F85
EE16BC743E52D94EC0088091C6263682315DAF25DDAA841DD21278B29AA4D0AC
102C2A0EADB653B04F2614CD81E64F1C330C0EA54A47B8B39A244DF0DB86666F
4B7EA8705F3F56FAFCE135337D2DC4029CD5D1200A48DD72D728C10B343E99B8
A0EBF1B460D7698A1DA063448A07DBFE0080A6A493180E0D3B7697CB4ECD3775
1466B0F02A6373CD7DC036F8E5CE260BA610C85984F5C1CB17A516F2D6462E88
FC7ABD822AAF698BBC601323D883181D75E60C035F8D18F1A619D0F36253D687
91A864588FBF39609F5F30FEE1266EE5662883670E6E54378D78B9A9DE9BCA9E
3AD8957DFEEC037B43F9C72B59ABFEC89FBA480002B95C916E5CF6B6A655DCB8
D5D87415CCC791B8B7754DED7769F5DD27BF1714F0704EC591986ACA7725672D
654BF3C49AE5C9191C0D6DD4A64E1F4023DE10B2C53D655B89FEB287179DDC25
F2E3490A972690BFD64A3CDA16F54CF8BA929C597C6925404CF1DE6C94828F34
F883AA804CCFF043B20F58D71DAAA6B8E692256CBFC73209E1F467B74DAC6AD6
BC184C2882FDE2F5C3163413695546687E7A916939CCD8052AA5333691805D10
E2094A521908A8311023D5A1E217D15E961F741BF53D4FC5D149A6FB4BB5D300
D2CE49F5DCB6C591E015E612499CF7749CFF387DCCF037F012F62927A0DAD63B
8E7A4C9D199972073CD015DED0189456615D5ABCCEBCB1B4F9695B8E2F53EA6D
60C2CE2A907E2A75DCD807228D7AB167EA6CC5AD81A37A60C5FD340E4304BB80
E16FEE9EB679AAF16A793C795088A101B9AC60D3C84357C07E3C8E8BA1032D7B
D972EDF0882D95421AF2CB54C593677426C6D0EAB511C33791604721FC3A2ADB
B52362404DB28A48E24AED2400613EEFF3CAC487959F78D49BA22E867C0CF1A5
172E08420CA5AD5037A9D09CD2ED2B179135060E6B43DFB5C125FBFE65D8E117
FB75434FD3280C18744FCCBDED887A5F696C5879C703E9AB03C26A11DB5E34C6
61DBDAA658097A0F3E30F5F63E9D4C62F0911B7F11537A60DFBA63F0CF8E1B93
AA05E997D9C9A692CAFAA72A6B226A07B4D337EA562C4B80CE69775DA6C04C24
94C6A0DCB9E04BAE62AE56F9DB92C75EC29190DF7EE25755CB9F49B72DCBE46D
535A087B650DE011F5D0EB243F926513AC01E4FE355C68E71CA3B664D904C512
0D46D0FC9934B61D2EB3BCFFBC0886A20B66A8E3A54A356F9EB696AE4991B5DE
EFFFF4DE60A2F6E398B715D822EC833354F24886A1DF0D15B87831062D93A49D
E7F5517A860179BF98B11972948F45EB35CC471B55FD83A8887A503AE3DC928C
F90E1BBD4E5B2EBC9814B6A4B33C567542F05816979CD264489EB7A7014296C8
E353DC4388FDB8F030E4FEC77B0D14333731FF8CBC4A61C147BE8A79BA1A174A
AA943353E49FD4E764B32677BF42BFA0F166A34B9CBD184F0E5C23806B7DE576
9ED630AB5AB63C610631B9E87D62C23A0A3E30210D2664BF91C73AD1A8116F0D
49978A5E4F311F587F6C3F6731BA0480D26DB5BA92A1A0175620A4601E0BCC65
D85C06234290D24870FAFC5768D40CB8DBCEE5CB3C08AA21E75E459BC2D272D5
0566ACA892A5809F6D43CDA4983D20B805962D3A5E8A49AD58461C1ADF5E734E
EEF91E7F40016A6092998E8BB20CB396FFF8038910C5E2C2D435F445B370DBED
DD16AA297732D1C0658EF313A78EF9FE4B498DA00E281EE100C8E2A29CC5D822
C902542159CD556307D2B515927B5BAC7460D9D22EB3E9292F3BB8C424114991
DB61CD6B9851361DC744F5BFCC58EDD5383B3CE52762DA92887905BAC61B9162
D40B28D8FA46D2F862CC94CE817C45F8617593AF2E03E83C630D01C326D9F6BF
6D302CD96F26402570CCD74CFE6975651A8B3C91D6970E78C2265000F53914FB
A82391C8994AAD34177E48CB498F4A7AB8951770E2410086D876F6133E6FC8AC
D526F3AB16F2A6F8BB1E84CE36E93B62AC496141256F6E98335E02EB4C8198B4
F567B9199C27D60E37548AE7743053B02ADC5A9E7C23059B6F27A22B475F221E
AB98AB0BD4E43DAB370F6E780467A3D43924F1AC2C3EBDE9E708F739A8955D42
A15332434667F08B1162068F1A1BD07C977506C61DF1ECDE085DFA9EEFC2FC8D
F8D10F0021D16B3B6B21A9CB3C04EE145CD2C4652DC518141E6BF49EF2E9D412
0E3A7D9238D2D61392BE9B0F7014B075F5DD768AF5492220864EA84119DCF942
AB65182D548C4B11EBAE20DBD250D5A29F0B3D9072C3E45ABFDAE6EDE99697B9
6FFB0D2DE04119EF111FC5B27CAEB1C0426CC356C00DB46CB828BA39482E44A9
7364946CACD1C1D18C1B6137CF5B686990B82E2E1A689BEF2A7BB645F8E223D8
B46EEECEE97D38FE3E05652900BB5282962120BB5AC613D9D12955B0B8525A25
9E25860A354FFB92CAD0D92646C1A6509EC4EFA5119F1803649A0E8403D5B865
E965837DCB8FCE52C2A13DEF135C81A880B657D84846762C9A709D0B3EF5BC74
3B7C74FE8F780FE25FDD96644AB40B4DF5FFCECF203CE27B1D9390CA634249AF
5D07D3DA9C41D7B68FA79E5F08BA7FD4014ADE3943EFAE3E4051B352122B8B7C
6EDB32C647E857160E1501B24377176347F5E03448345A599CB44606EF59FCDA
D248F6998036E7C22E9470B42AB812B8EAAE060D5B5A4FBE64B0D634328D15C8
7F9F0135A8561B67237367203424FF349C13D87EAE111CA21A00CDB6613D3A01
24F41CC2359EADCF98163A601B9B59A4516C6C2F014FAF7FF2D1998E5F3C3129
76040390CC6E60595D192A3B9F6ACCCF21A55CB96FC5C479393D9248E23F0F6D
ABD35EB11730B17AAA83238AB16221F9B2711285B001D05C2A929E47F0044C4B
549F63DB75FB0AE3EBDD1871C18015F399503A0B25A5ACCD01874DD2B92AD44A
3D432A78DB2A09204AED29AD4A7795E8E9B8B1F735002940A318A5A762114580
29A12F01FD25EDB0143C36A801C8F4C76315BC3528BBF43BA55B66ADF5E2A968
E3E2FDC7ED934D189DDC905D2BEB7880035C393797B336899FF5075B4D37B784
5BBABAF18354065F09DFAD491DC499382D5A75A6CC337F57FD7B23AE053293E9
ED0EF864C8DDC13FD76ECE0A2CA7C579EA6EFBAB0AC11C947FC65350DE088289
253B7B3266C5886E5A19E8D9AD7324AA50EABE80B07F94BD2AD13EAFA579F91F
534B15A83434C40DB9BFBFBB1AEE5185ADC53165413E187AC5656B3F87A0CE1D
458591A88B2F519385B4D63BE5BD37AD1DD6E8370F3F71E5D0556EFEBDF1B641
FB990D5656A704DAAF9E2F8CCF5C11F16886C45B54E4EA659F5CDF84FDD86AA6
28A5A3979AC926713FFAC8CC29AA2AC1A537B5994E481D5DC2DE545CC8A70F54
A1D16CB2A2DE37328539BB0DF1C0D625CA38427AC650B02080FCEFE43D6B22FA
A9B05EB2BD4799C81A3D08DF54D34CD5EA6407E71B7763DF35C102925FB4EC9A
232FBD092B9BDF2CC0504257CEF195D123599ED242D59D85992FEAD371AC53A7
D5846434F38165FE8D2714ED7BC5B6F9652CC71B3B327EBB7BB9D8EEAE791A42
52DC719341FC3A1621BAA79D9B3BF37A81C7860F6B884C186803F489738E1326
2E4D4ABC8BB52AA42E87FD05AF4A75B3DDBACBD0BB891885135D3599488D62E4
949895D672D12E5976B36E92DFD79694BE2F9A98E6FBC4CD47FAE682982FF1C6
B18892D19E1B10F1593163E121E6B3035DB6E0A12CF4B2481CE1206EC57EF3D0
C666BDCBA12A38A89BDAD63005E81F399D4F5A5278097E479EE8193CC59EA0A8
64F3339E0AF4CB954B8D0C0AB5D3B6498456CD0A86B9CE4053096A1DCF2FDE60
16B76397D56B5BD6BF109726F7FD1BC6B0D58828F2FBE07EF0C119B80A5EC560
CDEB48C3E3EF115A9737F881DDFE3539D7037F53F0FD64B08D85E00D6183D68A
FDF4663C6B9B234C91AB121EB8A905FABBEEFDBB65BC02923E61AD9B4F81FEE3
DAD53748ACD236AB49C7C80BF10F75456EED6A8EEA665D192C7474D68928C534
D63F193DFC2CD33787940852D65F162C00C38BDC6A55AE19B6A4B33C567542F0
5816979CD26449406ADA22BE7C8B5E04EBF216A6EE79233D7A5C7D0D12CAF0BE
60326D821BEFA38DFC70310F067EBB85D9935823E4FFA7E954CD1AAFB1BD9BFC
F14236A4113C3313CC1DB91BD912E28A02367023E3108296EE6A60042529E8BC
668B84CB77D92ED867A3C279A84356FC3367109DF267E5724951E3A798A5893D
5C950ED6687D627B1DF0E402CF17A63553F9515571DD710D88690A3845A54350
5BC61795E47B2195D64A6D403FD460619561A0187F2F737BDDF50E6867A00156
D51DE2862C1D6A6DB89B8B6E60BEB193B07081F5549CB5856F1323FBB439B470
1779D825795A9E3FE39167F836909824421ED6047FFE467DABB64C2C4C75F007
54B156921AA91CCCBF2490A0D62EAEFF156B5828234244B9A5BE19E1A0CB2353
495C0945D09871051840E64D51745BB0E9C861F78B7705482C7B03D975D2BF9F
EE69E7E58511EC1E2A09B074E4D69A045A364D2CC5E46BE9689B97DA45328063
974D2735AFF96C84071892EC521B51A0519C863CFCF41E4BD4B1E3053940E06A
4B31DB3B445277E8A76F9D5C4313D1537F4508DAB3A4522D0B8F81AED807A834
A076A2CF96968783A6BDA3D5C55971A9B2D926C9DFE4E452611228A8E64D8F94
0B7192A4DB1DC77E3DE5996B98B31C7C67DD2FCB858C899168D0E6F9ED5242BB
CD56A8FC6721C1AB201B43FF52EEA96F4EF87548DA6E422C4B6F82B8A21A45B5
E03A6D5C343AC7889E9CC2DECDC4B5D32AA948AE73886A2086EFAC31F513D734
21401719C5FDD1E32CB821E75AB38B81A1E7A12DE954F33710D0D187213CD6C5
785A4D900B71104E349CA597F3C06A8FF7B6AE3FF4E0C9A5C6D42971CC935486
628A5CC9CCD1B74F8D5C7D3F9F3134794C9DA6C11C0F962FB0309E6E87B7B4E3
6D332F828AE564EFA4D189AF425B82524E8F6C1F0ACFD7977455CB374C47E730
42683EF0456C3A0D74E8EFF35D7DB57FED668C189F3EB6F7E5F74B7603038D6B
8CEDE3CBEB057D9DCACC5F70504EEE4A86EEF77274C6725DE06E8716B41E8352
31B507606A90C0F27E9F1CF29D09D7DC8DDB893244C8C42A3C2B60BDBABBC4BE
4D042DB8EFDBDF5CACB2605BFEDAE595738B082B31C1116491939F10C0CA81E1
787F6C1979B658A3C0B52B9D2109125928B7EA8A00B2A42006F6CE7F883BBDEC
EDD21A48D20EA8C5D4041D62587CEECD9FD843D8CD9CF8AEE877BF790959990D
B0106744B80FB1086D9FA531314B72E0DAA0C76CD30C2768667D43F1B1C958E7
C13721EED11DD7ADFC2F88488296D62CBDB81D98072C8685F3F57B1439F87A23
4B984A7306593B164206DA5488E935E43C5CF356762F017792DD090F995CA9F0
10C31784462BA1C4C9F4CCEFE6131B6EB15B45993C90EE25CFCE43E7F7718BC3
5C7F5A2A46900CF4312389FD49B2F73B15AA06EF3AF347DB097598F65DF36FD0
B8FCB635C4EEC34F171D8C0536810ED16B94477FDF68D4092B1736CC153336D5
087E36E27E84DC336B246F7AB71C2E0DF5625E06F5C9317680A45B1000596F1D
9400DD80997E3A4304FFE78B0A8F345F57DE3B5CFC64C84C053D6EC9AEB13BB2
4497218073DA6929CD8D0028621E0AA686550271A75DE67D1303186A29C68383
3A1E8CABD37E561DCD7CEEF8BB47854C5E8A4729C10ABB26ED3FAB735FC84B26
8BA273DFD29BB99B3564DABBFB489A5D5A17DA283BB0F94AFBA79ACAF57A1CDD
7F732FA65818D910E7FD171D586DAECBE0FC2A3EF2C4F12044329E4892E17654
7628D54C119F143835DBB84418A9A09BE18BD5B107BB96EC4C05C5732460D17F
E2D2C14349C16D40213FB1CF73C5380BDCC8CD5337AB19458CCD1EF2DB99C331
87F22440526269DF5164F6F5F53E2175AC2C67E435D9433559E42458EE6A9AC2
64CAA46AFBED21C711B5CBD79300BF8BCB3B1F5310F7C8C0EC1FEACCF0618795
B1B3CB792E49FB9596AB55023097EE45B95F25568382B0594FBD382CB5FAE73C
4A53C193A3E1729921C790177F1E3645CB876D4A6026D01CC8DAE6E410E3CAC3
5801263EA2630072210F29D243A5B1CFC904F0D5204A11D4FF587253FB5D2AE5
FCD5C3DDC5ACEEDFB123E19F5D4A94575E588BEDC067020A3E8E8A08CE5ECFDC
C0092B005BDA7CD493582A43AAC254CEBCF49DD3964A6A23F89332971D04863D
A14FEBA63E4F7DABB64C2C4C75F00754B156921AA91B1E96E7468156CEB32029
5145F5AD77693EC2FBBDACD28CE9FF37A6EA74FCEB9A99DA1B8E6C652F24AA57
5B1BB559E8A05531F5DDC7FE95C2A9107BD5A5C188A6520AE4A17AC2985AAC42
91517EA4B3F8E59B6A58CAACF3F27316CA78B2E29575DBCDFEC0C5FE96F3FD64
1BEB4281190FC629E0028F16435A8002254BD7C9C080BBE48EF0740C6483864D
8BA7F038555572D81B73C127E2AED0AC4101C0C99E23ED1F8B2991F2D4CBF0C9
F61B80A9020E2132EA4658780B0271C67FDAA0252945263B0457985BE1E5715E
DA35581B65EC120F6276E58E092F359055F36352F99158CA4DDD40C84177BF74
6A6B8A8886926572B7D1780CA2D9BD874CC14F59A5DE9E082E99B2811E41A533
DA4BD4297DE5D1471A44EF782DD071B9BBACD26727D3CAD458EDD9D2C645D895
9C5D6CFCACBB089170A0053CA2FB84D667AB71B357C6B58B6AEE2B56D12D33F5
99194A0449CEAF43C54812B2A3359871C13209A1520D6E6AB2065F8AFEAF5299
534E244DE44F1EA724397BBCA1AEC23DB8161FFE697DB8569465217E3BBDBE9E
641671F81384535D232DE000C3E68E280067FD5B133594EC513B86B8FDE0403E
2EFA6AD3BE983B25B8B8CCA434FD9C66873C4480C5C6AF493594567AFB0555C8
6A1D460E37D63AF1865D70D499DD15190D5F7ABC5C96AB9053D145E742B8988A
D649E6549D62AB9455C29225888F5807A93198BA54FCD94646F6BFD96E5F3356
1A6630463630F2B61893A801FE050B0891F0E9B65F559576BE4C7F14151243D9
96CB0420F6C6D5DB9E784F19B1A14DCAD64BF8966C93DE18EB78FBA8079B1C3A
98969283EE663D985B9B7B5E797D9B6FBF0E493F3ECE53E795BF13216C8FCCE7
8BD74838921E315834B814917E562EDBEDF7646B64165A55DED9117F1CDA8C8C
77EFFF928A004444AD72A716B7E2102C994BEA29CF56B8B3192CEAAA9956CD18
1397B973A5D7803790D72A65F33BAB9CBD54651EF8D1752B10CBD559D5AA9872
6065CFAD208CF29AAFBB3C022BFB46EF94C0A14B2FF1E27963647A88D2401A80
CE279F62D9C9740033956BE1DBFB4DB60AF26BE64A59E3663D3B4CDBF3E8DC4D
7CD5BAFD65844A381CAB2ABF9122B7E2064A376461947BF3591E0382602A841C
F2E76DCB7725A5BF288CEA7C77C83EE8960904B7CBB3F118C7DA72CC7E3972DB
5E6E7B0CCC77178555FB330E3D4103A6A38E9FDE9003CCB878BCF9073087C2E4
F721B55FBD8E43A845AC4962F042CDE0FB79221DCFF97A6B18CD17E0F23DC030
7942FC86EE2AB3E0260FFE74D9A206E69BC7A08968C003BE208BA9E142F4F484
A2980013D8FC4D17166AE6DAD658C1BF33E4AF3DD20E48830C43DFC0956915D4
7A897EEE5DBD1BC54AE9DC266E503BB7DFF1402F623E4865D846B91CAA9CA0F5
9D92184C2BB959F9270F7B1AFC29A42FEB18883701480CA86F291743F03D99F2
7D9C937E3572CA2033CE401D6680CAAAAD0D1FC5818F220B2C713BA3B615E415
0A599506D21518B1264F6F62668E607240BE152645523464DB9F9470D9993CB8
B74430E8C8E5BFB97F824479739F7E8499E35E45F8F84BC0AF1CE0C751C53056
C2D99FF1DDB768507DA2CF9AB31CFF42FE6B48BF7E4A08724F976D689AD1966D
7C9FA16AEFB9914091449B9301BE832CFFAAA7F2FA6DF6F6020D4FFA4EA93262
76924D0A6D9CA37BB783E7D180777B7D8BFAB99B3E303D4ACE53688A7FCBA749
5A46507A85229A05181C1CB7D3D198D31BDBC17BB84E4E247797F8B80884B239
5DFB4DC616F94F8B0A798993449AB831CCED6D63849C5014DD8E112259433807
23DC47BC6EED6EC99EA0BE27897A6A32916161C97FF930CD87E12B261C02C93F
1C730D6B8827A0D1CE551CD445254C5E3E8D0BDE6837209674419AC653E47AE7
570EFA28478ECA87E565425E12DB8069DE7988D35B006CE68CE8944A6E2C486F
A4A8C81E93FA4F4C6B828FB5ADF35D8AF8738E98A2DA585C83533C4420EAF653
D8CC184E633B763D0C226C1C355541802B3DAB3D80EAE718B4D22872F901AC20
DE948752D692A493B841EAC820CBF4F6EBFC1B610F1DD718CB10253C973686E2
0557776CDABB96A9E568F4B42AF25C5DB5CB8E742E3C0BFC25098B4CAEF0722B
8B341918880657FA09342C7441E26079666376F158FDDF7153FA6C35E5A33D1A
1F5B52508854A5EC566863EC04D067E5893A6ECAEEB608DB723ABDF8D85707DA
A24000C61C6E632B079F701A3CD598DFF53D6DAF9A69AAAFD1EA8C09AA777F37
CBE074D111A8CBDBED34CE44DF13C892DA734EC628DD831095A3FC6B1AF9D1F8
95DD198C51BE09B2DA090C963C424A736495FDDA737BE911DAF05EBCA0F3AF41
0195B67FCB78FFAD6ED0FA5D424834BA1C6DF455ED32F1F0507C8E7044776784
3F348E7C40A19063D4A9CBAC61779855B854708FCF5DF0EFFCDF0035EEA1ACEE
8AEE3063502E8AE1F22FE47223EDE95F8A501075D71ECE13722709D6DD423540
BBC34A5E984726DE8679AF3A20BD36A54FA3CCB7B7408A2061914D1A646A3D06
624647BAAB2D0E01A054DA1FE6CC2CB727B8B6F4682205071379D9CCD989C5C7
2B6B090AEB1CB51D2B22607E1F31C019C17D22DB84BE7EDF9A162FD4A49C1F78
3A6172A1F73B7AAD1527E030B0C06E669B098D551E75C9A7EAA636155F639F44
33687731426096B8C805C5D6D7DE799F407755C5068C032EA11E70AC1EBF4C8E
5BEABB6F3003D45AEF6D9FAC332E958F8B6A8AA439F193E4F6C28ACCFDA97FA9
FA04A095C613D0CD3AA98F55C0D5DEBE4AEDEF5D73A717AB52924CD7598D47E8
EEC552365442CFEA7AE34F25F0D17F0AA5EBAC0A4962BB765356A35B01C1AFE4
B1CD5ABAD43EAE696FD1F1ACB6034A0BD56EC8C8B9C334CA6EA3F43CA5C3E509
6766260A3C12F300700FD18936C7578367F403527669BBA914BF6888BF534647
BD6BB45DBE9BC4A5BC84DAA4E59972358B4146FD5A5A0C87387BE8E85B7916A7
C4957EF58276C01093188DFD2CEDAC61D01C23F039FCA23EC2BE8AB364587223
CBA7E3AE8B0DDCB92F3B96485C0E1245ADAD0C79563E0AE050076B69CF2F4852
C673ECC4BAE7E78B7A9FD5860B46BDF91F6A2A228F699FB32A6523CA2E09A24C
D5D25484B3B77C285AF9440C63D352AC97BA6C33C080FE3E7B57B61F2D844063
AE49E45DC671B52239B9C7A5FBD53662D61BD17F67C4CC7445C3D8405E01FBF8
F76E843067E4D206CE80F1972C0ACE36BA2D9E3737F188D14FCF995883D46A30
3C13B370FCB1AF48FF3D47139387DB71EDD9EF5FB1F77A47386708DE0A8AC144
9E90E6144B8F50483110C6883279B473FB23788271A54FD580EA800363BEB4EE
1FA4B91739103839A6DF986041483D15289E27200220E95DF2A9585DA756D73E
4D9A8A395AF413C982A0A5FD4FDEAE62D927296DD0437B84A77A504629E4DCE8
2EE4A90FAFB87D416234FB98DB86938C50CD28A672F340F36EF535A1E14670B7
441772631EE4AC427DF83E4D5B9650D7C2DC3BCE2285432DA0B395523EFEB6E1
18FD1D42047C6F2EB77EFCB31DD2AB6FA0B35416AC8231DAAE8FDAD87E0D258C
C69754128BFBD1C42FD82A4B66D925743474C7454D9AD8241951A30ACB1C432E
3451392FDDDE2AC0E388C7C5AC0BFFF33DCF47D772E8E2779BC0C3A49CF17C7A
A412BFBDBB6B95C298D290F7E2E73B3A0286B45B18D71DABD43C463A144BC3FF
F579D0BA6AC7EBF6977DFA31F8FB6C65ACBAF7C1B8CCBF477AE6756D18A6944B
46A986553BC50A817ECB31744980B8DD4D8A45CDE2DB8169D82F227443D9A2F8
DAF73132183E4E53A5EC72D3196F99FB0C4DCBC754098A7069CCCE1AB81DFA80
2F219253753D44CA1453E7FF6B27E5C562AA6A205294214481C13BB3EBB7CF63
57CCACA878D1146ABF250917491FD16DB6B31C5C2516229CDAF73F36157B3A16
3FFBE3370898CCC03793FFEB5749E0AF065890A92679F3383A39D55BCC7EDA87
FE850F28C2C13147D2BF8D0E29997C508774069A906E35BA170993055F843A12
5DD10A68AC317CC09B448D45EEBF70B38338811848BADA5C8487291F0A2290F1
47A4D14A6F8B326088D169B911532AAF06343BF9BA4BDA9A00125164B86D7912
1158C9E35CD154105673588C1DBE83627C2270DFF57B832AAE954D0E9CA71D3D
1A7EF97A4F4A2BA777FC82B4A73B213A25947BE9947CF6BAB060153BF2E86069
66836EFEE13AC0E7AA280CE7A398A633DBC63149839E0973F0435AFA7D8DD823
096B7F4D62D3882B3BE0334D596E167FB5AF5127F1481E53EA7FF2FFD17A6B7E
D658ABFA3C313FB22E2EE1B5ED812CD2F3EC52CCAB33C0853F9AF629DA7E638C
3346BB7DA15263F0D0044C4AC6EB75616404C07814F639729EEFFEBA06DAD2AF
7ACAD20D87BCC16AFAFD4668EF25C04BC9D26913CE55BA9EE96AD5BB633ECC7E
500802E9B158A400A02B66A17673C0438691F4B576E35D7122F1E87AFBF49FBF
611DBE01673A1A38FEB95062E60A82EABF80388BD3F177CB73C7BDB04B55BA76
D448CE2D8DB1CF6EE4E0146BBEC848192D454208144261F7490D50CB35C74C8A
C5312EFCB418B5230D6EA03EDD7A5CC231DB5B12B9A5F00DCC529403C38B8923
85BE62E40E27A673CFFFD785162700BC9A14973CA15652474F572910CA7CF661
98F1F7E705C80D9847327517EA65F75BA912618D5B0BD050DE539213F78438F7
C5A6B6186993F9E15FF7FA6EC52F00BA36760C9A55D76203ACA18CD14FD71402
EB35028B31B8477BD0DFF1E2FAC66941D1FD87450DB7C075A83B71D79F2C3381
DEEEC6913AE1C75760FB5B5946C642094F6F34949DF870827683AF76BDC90FF1
692F84FCC3A3D588D038811FBC6CDB5E597C4C4388FC52AF9EB2A58C8B07C022
B7D8189A490BE962A195E9F1CF215D3923F74878797958D13BBD84E1216BDC6E
E925B3141F5D9F5BC97840EBD7706AA3991A01B83BA6D9C90867AD294030AA8C
580EAD9C5FF9E675CCF64208D863BFC85F5AF0545279FEDEC6CA70C32F297A56
F42B2F08AB449BE5CCF75860E73572CA7C2A2DEBB3A93BD9CEAF54746AD6FB42
89EC577976850D0BBD609E69100DCD6B322AAF048B8358CD2E558F73D7B2A912
08AAD4A9BBC5EC839EE5C6CC895C87C09E765DF15FC2AF3D08DE2677A9A461FC
A7D8EA099DEB237731AED0E39FD8BB62B3039DC126314700F5D18A1E76327DDB
5324DDD10C20B0E29BFB0A7C700AF041145D2F709DD5C4C6A2BAEA08092DFE29
6E2060B87D8778243E1B8148A9D2B92B55DEE274A3BEEC8A716507690BBD6918
A114CE3FE3D0767F5F8D8C67E5D888430C8426C440F76124893A413B5E994019
F309BAC5725EFB60A0B46592AE7310929CDB037B68EDDF89AE9F42A1B304C5FA
72E7E1CE3840FFAEDEE7979DF757694CB3AA582E11F8EA83238F90FC1B581A05
B27B4D3FD78AD94B194487B45B6B2EC3CD85FFE04C892764CF60D44B611750C6
D43D43344AF7008D737650D73C050BFABA8C25ECCF834388AA03B78164FD1D2B
F4B72BB65CDD62603303678EEF852D7940E850451C550EE27FB7E7CBE5170589
7726A57010027A649839E2E933F65C2AB16ACFC3994AF8C7DD778D6CBDA84E89
30E4F77D6F54DCBD0436502B2EAB8A5138B3B592E213FDACE75B90A7AA4CF7F1
F0DA5365D51132D645BB51058634BA2D531402CFC82417529679215E553E547D
4AD6135C7454B569C63DD36C11691114621B2A58926158845369A5329D3712BC
77E0A90E9BF73D77A377455531D12B66B036B8F53C6D793A3C199BACA52AAED6
F49FAF91EF531738DBD7B5D7F1422D5C8C6AB5DA72A4638434545D4167CC0601
5C1BA965B0A963BD200F018E2C9DAC90875869D90440AD786A856342C10A4476
C18FE51B5BA33A2802FD83DD3329783447E3279A0C38ED6060AD9785C29BC1EA
25212E870986F2048B2FADE579832CB8FCED1C2436D40594D2638D1315F79A8C
27735B542A06B52A8AE88261D1A394AD075ECBD0C1CCD32D869B691A57F7DC25
950E8A3508C80B1626455234DA3AEE4A45DBF6154FAA268B645F798DEBF67380
EAC7F3D7E3C3D25AE80CD09CCA3AECC5A817D20B033C7230DDA7C6AA1E297225
E9B71E240B60FC520DF6ABCA745AF62CA97D8A1619DB3AFB3BD612F0E3D37780
C8DE5A75A800C71BB4BF72081D933D6C6D35908235DA9CD3CA53DDF39CF6DBF0
B63B7BD77F8FF40806756E5D189D9E5A38D85FFEC197D1811989B0EC278124B7
28C240FF06E91F02530D9E6377590C399EC986740BEA6555E7BAA355E84F97D9
23240D02D3D2EAEA96CD84F9578FBA376C415B3CB916AB1236ED6CD887DDE839
4ED55F647E475AC08F47C9FF39AB782A87C82DE07945307F61BFB8EB317AFAC8
B993B2537C9C7AE65939F0BE1A965BBD4E918E13FCACE7738D374B81E44CC80E
7FD294A6AFD5D0A20EAF85E33699B8ECDC4A414247DC2BE2CD9BBC577B669940
214470FF787124288189F1F6AF410444171B85E54A5B530352EB560BE7A7F2D1
3F8E9F94DF7C809A9FF205BBAA2B902CE3D6D552F1035A688D9932A272352B29
D8C58E129D9669D16EB989D8CD134F35EAF5DA6DD4FAF82A06BDDBEE5F7885C8
74BD55DAE84009A1078E3309E6B07289F73A814CC1D1888AA132A1FA8DFD9033
259CE14F92668515111B0E91B6EE1BAA702B2BDC030A7C22AF17D2EA46F945FA
FE61A79B5AF6AB42EFAF16A9A569B58B7C88648A1B57D7D526F3E5D4F7038ABB
99ED56A7CB3931F40F5CE24B1DFE84E0DB878093E8A2DD06014EF06E5D80D1FA
129D4B91D340E5E2A6FA3E0E36CFB11E1A7A565EBCA2BA7A7FC2B9BECA2CAB86
F9F431B47A14D468A708A49D59471BF8DEC3507B488CF30E0252114E2E6B2F99
F6A436CAA8753BA47850C58F38BE90464ED342E264C79E9F46DADBF4E89ECF02
895F49790928AB0AD6F2FCBA16D45D86FF602FF447460D3C0D045863CAA575D4
8D06B9A9940B19CC8DF3342BD619B16D558C29DF1258CEEF9EA4683569CC4E81
3DCF9986E3638CDFE75968C2960818F761C1716F7EF6195B9E86CA753B9A3633
24F3DD29582B39491EE505C2BD8D5AB7DC6ACDD3BB40DEE894853D746023590B
630A240414C6819D7123ECBDCF6983E358A2B55FD59BDCA6F2695A518121CCCB
30FAEF4F591F2D2FDEB40D2B96028BBBB82FE5A4905CA5B793D83C4771268872
327C7252AE7BD515B347D3B4D728493F752CB17B56C7DC813D0104BB93374A27
24A79E387C4DE66CAF459EB5F406CA1C19FA299D189AF527ACD507F3A0FEEEB5
E2A79E4B5F3CADBDD9EA8D3E1988B59831D4D66CE81005806DFA7041281FE0C9
8AD2E512FA04F868D3A6E33047267C4BCE576AC0A7621091236996C9DD4897B7
7EB86B825A243FA0BDFA5800F47D7BC429573F2E676D54F6ABBDEB9A47F07145
6F41D6DF5BF5B1671891D3B981B9A95A70356CF9238CEC01F930BDE60AD48B88
5D9187F0EDE213D4A39CC755A7F66364B785AC52D55452571C4F0A0EC0EFC5A0
CAACD7C6B35F4B2FA773BE41A51631DF63224F7378A76737E3DF0A568298EB8D
923B30C2FFBA14BF888885FD36321869E57D526149A3506599D807A131EB3645
1A54D523B26491542736429124ADD7CDFF4A0E329CDAC69942EFF348F32EA56A
FB805C1EE6FE4F1BCA8056E9341BECDED99CD5ED33DB76F3AB46DE225CC01EFC
D5E74A99B4D07054D79A6AE5A8C45E3892C334CED7C050D1155D75943644E393
A05F7F9A43792AAC28522F4E96E7C4E54390F87DABCEEBE3232B78AB66D43F68
DDE709C819B44BA4C3259FC644C9F5DD8985EEDB2DB921F76E7629E58793FB15
97A826050FA05F2652F55CF027B7BF8EF5CCABCFC587A4EB36F491508CAB4417
7DDAAC745E63866C170275E0EE1CCCC8768B6CAF85653E10D4C1BEA3DD058AD3
31B401289B75A842E7D04F09E8601B36806F5A2B5898D5AA71F2C4240DCAEE62
0642B86CD0291C4F9EB1B55BE80FF68D59D7EE0C30E486DC760EDA0488FACF2E
780E3F2B86F09DF8112D776FDCF298FDC852E316B49D4C1F583B1DA5D78D4DE0
4498727AA59155089657D355C7301CC2A3FA52879D437900538F9F708D1DE820
D31C53D31A54FDE96E1A134E74D05B962DA71BFC9FDB4987A5D6810D19D87998
C375B4B3FF5385275189833BA85685CF5DBC47EC1C41E8E5E467366AE341709F
D2451D6C65D8182EC29951052D66340BFB218B2106B853F34C8EAEA556FAA5DE
53A3928A88FEF7421C51BB637E415310D27DCEF5D3667FA6E9B5799E6CD3433C
79DAE55856CCB548E54E18E1C3C2B5B0232788CB400E7AD74E0B007AF380493C
69A1CF005D98A8473FBE15352ADC34A3BC26538A738C3834793BB42ACF3E83BC
44B1BD72D30ACA720DBBF0C4884F4BBEDD5B7E023EC6F65514E5508315EA8F80
F52F4F64C729EAB178CBFDBB56200EC67F7C22FBD14ED40333678A802C09C092
AB5BE16FA2FDC7D3CA92DB6D19BB5FD0808CFF6691542F18E7FAC3353E750B38
DC7F5F212408C25B7C6CA4391F4E3A30465AAFE2D44A016755D81EFB2C4B3001
634DFF57BD4626A979DACFC54F7D95413DCF1F4E821AA57BDEEF3F26FE500920
4EC51DDC6436C0DDD2202B284AC0BE7EAECD66220CD954D491CE584777C4203B
2BD6BFD8AE5C8824A19D0E97AA41E6C0F2B7C3B020517359528C3FCBB02C8BE4
26B46C2EFF0EF3073CE21D1F5F2742FA6F1178DEB156EC57C1CAB853F2C78A00
01AEF8A5A0311EEA2380B694AC0E8B0C9E9011C9F1C251F02D73444B46D8DFC3
9A444603804B83B0CA8979CCBFEB440B56A8C0EED4320F875CF2ED577DCFA3DE
1DE3BA2C4D463A823051A117A93FA77F52AFB6445DBDE8708B06DBFD79D823C5
33D104B2089FF8AACB492415E43D02CA4C416FE37EB223A838751E1399B7E008
4A94D4A10EF88134DB56F565C2F25484CB22AA2E1F902994E777BCC06794D33F
94532E59F83EB9648025F0294D20CA8F50BD4BABF1F5995DAA30D16BC04E06C6
B16C4094253AC56154F44001FEA06BEAF367749193DEFD6B2658DF13AE125ABB
A8D268EBEE69C232CC4F5900B91E94C611E4B1E68DB514361DA70753153B5581
1255CA4E5247EB14E03CB98A254130CB59EBDF4F4C20ED9DF77C833AC79D007A
3BFFAEA7B13D044DB1EE35707D7C6E671CCDEA271B07CDB6B2CDF7C579AE513E
E4B3347F40171F2D347AD4C23CE5AF4D936E55B82B826B8AC68637989765BBD9
7804548E5B0F6A070302A544959437B451B344D39A61D738B3BEB9D11A68527C
A3AB1F1A1F0954E42BA77C653B5FBC95A5AC50F802E24753312D5921399CF158
6EA868F3F8A6C1B5500350CC37DEA5E856B51B7079F08F96B89B8280FE72347E
1E1BBB8BD2B46BBD8DAFD34FC26FFE228D090C61F810D3F018546DB26194160C
406F7430093A97F191B3FC069EC359243CB353CDEE3C9607DFA0F77ACB8CA1A9
1BCE02632EA39B8079A04A343D608975AA1D447D8F40ED5F659C7E826A2A4516
AAB0D193A1EDA22AD26E04DD0DCD56E0FC56DB386D71069B25183432EEBA3217
B12CE5F3C45755CEDCC2F2A9BD5FC9BD97DFFB1BD11DB7C79D555641491B276F
7618F31F7060DBB8F715331F7B32F6EBDDA3695F4EE5C3314996F67D9BD006F1
D962788C7BCAAF420D2A3E91DD5A15A1A390544528F99AE0359FB9F21A5C0C91
E38B461A53722A748C5C3CB6B72A2BA98F4A5DCFEB571C01C9EEF6B36B81F828
DA5F2DC587EB20AFF70FAAD0626A75F116F299DFCC7BB8070C9B69FB4BFEFD31
ADEF16596543A866B606D3452DB8DB0D0C7689D276FDB1FAE85D8269024D6253
7A8E83A9C9423145B975D5DA87D1FBCAD2458118E109728E5D8CD2D42AB7A141
0E35C0B5C6435C8CD2722B4D0F67CE0FBFD66458799A8154E6C63291BA8C3993
904D7A86BA22480F65D91EC9D63DDEDE1DEBFBBD1531A0BECD6FDC54C94EF6E8
2D848C667DF7DFE9ADB1A4CBB73D66338094B9C6513A7E50E17F28307600E74B
3B8FE740DFDF0B2666CBD4A548A495111E8E7E2CAC7BC95706458658D1FF2456
E5EBC6E69C72D6D0F794530955FBC607F547B7645E05EA21E363DC3FDB66B68B
308A723BFE4DF5A6F76242A0C76757FCD1A6851D10DC328DA9CCAC214A1C300B
5E1EB00CCFB126AD9A412720E6DB8FCE69AADF05208D4EDB5C20DDFB7FCA49D6
0CE9A5D092F84E0D96D287F660BA4952D18CC4A9B3AD84E5B295A8D42DD287E0
329EEACA444A20559DE531DAF354A880F3D12324AD8542403BE2883257428A48
7DA04BAE7C03D6E3E61AB7AEB64253C6D65336033559D038DFD11A1F451EF66C
0348218602CFACF2036EDFC9BB798252A0F1FDFF7ECAE713B4E980B5AFEDFC43
379B099E2AE41BD32695C9CF70055FC7764F38B0F69E8CBBADD932638C96DA10
A1D80CAA0067203DC6A5D09CCC414BD8A12EF4E9775400FDA4AEDC1499C07933
0D04AD3FAB5443EFEBC3A0483E7888718E3ADFFD1B50EDECB50C0C546350CA80
BE38ABCE843FB2792CF7390325C423D70133B718A2DF23B3E85CD09A63B8FF97
547715A44B4F1B4B2855E2EB8D22BFD23ED731D00DEC9711109368C000BCDB29
46F44AE0D5A5837BC44A89DB4A2C3D501BDA6BF7B3A0AFA7991E537232B098D7
B8B0D07FBAF00E899E8587227CFA9479A93654ACBF83631A93FB2D6A7AB37536
C944AB60D4AA139FEE753066E9B975D21B6157EA2724F83DE4E9AD416DCAC3EC
B656DFB465BFBA41C7E184B8D5047EBBFD4161814791A9D6E9949C1C31661795
4A32356573E2AE37B31B08924E928E06C86D54C55137EE58A217AC58688FA36C
6DBE68552A903483996C99C1EEB29C696AB2619D7DB0D1C875A0863133F11081
8F03FE4767A7D35A432F1A3B81050C5F9C189F762FB46FF60DAB85A391500F57
E0D507D15C845E9344442640062F9DBA46BB7B3A5FDE9E5DD48830E26254DE97
34A817E7B836DBAA9478B57A14F577977FC879461E84183D5EC438F9843FF7FF
F3B8647441B2B089B5F1490BAEBA948E13358CBD9CC23D2F06268ACCDD4D3D67
03DF81C369D29D80D843E6BD47631530D3F374B645E1614B1086E9636B021C09
198DDF5941543AA1FB758CBEF48F004845F44937753DFFEFE7C7A6F4AE677385
6F4E35D8189ABF27506A61015F23E174CA8EACA22871530DD6CAA64DDE21E37E
069579041766CF328D43FA7B275D292C5804A29EC5C70AAED85B491B33741A24
304B89E3AD8A7D635E14B1491577EAA80D7FB051BCF8C390CA0B3F6E38DE962C
ED6BD430E8D97CA00C75453D933AE1F27D154CF11F20F19FFD906B0108FAAF85
08868555B172966F272B0EC920714B54276A9B628B1B6BE30BAE3851B2C1952B
5FEB0C5A735562D04879FA7EAC6FD994F11A0E6ACC6802829CD1218795AD584E
864412A10CC4BE63E6A0C7549C58FDD43DA2BA0EE2DD6162648C1CB0A04500F8
E029B8111BF99D6426D7EB9EEF6F42535444654B5A47575F8FD6A2A23B3716F0
E108CE220E87CAF73A39CC562C1AD9851D9FBE8707D0E0323C7B9168D5B68C4E
D030E3043F72D7BA43F0AE52E6DE714486E6157F4BE56F7988C080C4E25A13C2
C60FD3DF3322D6F9A66D0C441CAFF1D0FD841702E3926CF6A75AB6E44D03AAFD
C226A11640B81CB3621EEF4D04DBCCD8197A36902D0B073EF9639AE6FEC0E7CC
70293A7CB24911822C1C49E18302D26F76AFCC25EAD72F19458B6FAB5A5ED616
1647B179F2C1CBFE3E5E67A305AB9ADCC90C892C66826D75DB7A2B0030F88E3B
0E709D1DB0A5B4125B7BF41FBA75AAD68CF84948F4E303BB89397130AFB993C0
547131671E4000F6DB46CAFEBA0DE4F6B9CDD76338C1234AB178571784590257
C2163C17C4A5C3019E19015E28FAFC6453D3743B3253104761965F9B4E1E23C2
32FF6E7C14809056F89348FDB797F3814E0DD2466FD4A56F21EFFE2CD57705CD
2D4471E3869BC1BE39BA44D6D037C064D146A7193AB5D7D77F221D5ED62DFF2A
EFFBC21C4EDC17D3E013DA735AF0AB72D4FB2A1524DD21EE68C510E434BEEA29
D41620B2AE477464669E6B06772ECE711A2171855CAF15FF0B38498B0FD13DFB
BA7D071CD09D488360A545748A5CB6C58A4E36229DB7D81BD0DE0B8D51F847E4
D2DFF7C128ECB98751460D810E2AE009CBD188868B4DC4133BB83B3764153013
9A489954B534AD797F901462D589F1DBB829EEC7955D01430A7B9F9152C0C4D8
2A59D8CD46142234F90AB3B7C299DB1B1032AEC67E803FBDB8C0357A1FD7B929
339CC0DC66A80B207A3E78EF3A155D486EA570FE9C1F950429BFA8412FF5BA11
E348CD0E93694301E696B0A6EDA847822FF9970CAE66EFA257D99155D5366ABA
093933EA852E0D78CC95A8AA618988DA3874BBAD03A6A931F8096A65E60642E3
439003040D03F28C15FC40D17CB43953CDD901401708DCB4744ADEBBB8EDC16B
367D0BE75C2E43C4D824506D56F2B07CB3A69BAAAF69FCD003AFCD79166D5E6E
5454D935A9BEC835E67A7B9A43532BE9998CE7E64BDF6EB467F81BC83CDBF2BB
5D29BBB7406DB724470629791AFC64940D8D6BFC521F660EE8832447A774C7FB
3CDD997A2C867FDD26AE2AE5601E28CB83BB428BDBCD5CFA3929464BC5B520A3
A3ADEC04527D8F8059A32BFD97E8A4A6D98A89AF3F7034F4BF040E40FC20213F
45E1451F3B226C01A1F3BAEA2A1A4995C9C120FA8BE834863999B071E32C550E
E05CFC27DCE322A859D1FD22241F23614F3714AF811156687D5AB7B3261BEFEE
5975115DF4364D284E6133695EF60784644CB0652E1D11152D8404287AE04C7B
632AFE434B4A39343048A4CE1B4997B8E007BADDF9C9510059068C3C80664B83
7E26C5DFE8D7B318FC0587D2DC26863A9FFC73A7D1DF6F8182473AD1C804A6B2
70BD52200290AF183F2873ED59D316E851BF7658F92D4828E89D5414019E1B57
A7F308CA6312F837C92B67B48B96DEE0B9A8F5F9A9810AA088D06D6EEF7DC690
41124B7A797A1905E8B5C12BA580E26E83EB7C96823953AFE4B0DE9BC68A325E
FE686E002CB4F40534D4AF11C2BF9C6D22722AF172C5A4D4266140D85E187B90
FE96A03B49EE6B2BE150A797C86933DA1B4D0D7C71EE169D25055382BFB95C87
9C8D471E5893A4ABA917F6A8D48A87838E70083A5EBDFE5868FD272FF7870B04
0BF573ED2EBE71E78A9ED8FFBC2FF18DFBB15DF6473165F12240CAFECC215723
C2694BFBA8251B22B15E1AD4973C6FD6E1C64B39517591AA0E4A15B05F7F0B49
6C8DCCA6433969165CBD4062B7EA4C5F83466EBA687949DB4AB2C1BC2A4918D2
95B4A8811B032643FB7DE81766564D22C16CF6C8B72A619ECD2037EDECF64318
360F527A29267FA3EBD0D0EEEEA3DD58415A2DFF0C07324652F32C34240007D9
2A32E80B060BB02F8009CFEFA804F991678605355B279A3F2DA961A50AED8AD9
33E419E6AE90E25732F213EFAB92AFB1131A163B480D1DFCAC079D417DEB4CAB
918192238153672BC3B6DCFF6EB4CA3517D275BDA7E6978B8B1668657FFDE866
976D87338DADA4DFD4BB62E17DF79178027691633ECB57B7444AA4464919FB58
E7C66DDDC9FD95F4AF496610B468C87F7084167C67DC9A4C8DD20051F0B8CDF4
94865DACA03E78CFDC7923E69F0785D41113C11BFF1ED5252006D893C3474140
7D5CD2D1CD86535F328BD0ED86E8860E14A733C627C4E7EF917F75876C75BD08
8B531BB19619C091B065DA3DB83D023CE86BC6EE37459DB01396297500CFDE3F
2EA99E7577DBF44D021597851C11440255872E2A3F15C14ADED5E3797E6AD3EE
8923724EBA7EFE27B6695F922611DE0F3F033CF03AE6AE4E2DF49A58E3AE634E
3D6DC872D0C0972015D240A33BC778F2848C698D2490BBD78D26FE5A0EE4750A
27DF9730FB8F9E725214AF58B1069D8E6F601E05E3E15D9C71C3210E57EC34A5
6C93657D97EE4B58DF3A2EB0D47EF02EEDAE1D2703122F09735EC63395AB11C1
1BDA082CFBC3D06702E32F06F1BC154691FDAA3A50151840234D91B147C090DC
671562D7F2DB7ED253087851E069ED650115CEE0218E6AF788E92B2B7029462C
26FDC8621E7EA2074B0DAB9A5AFA3C17039CFACEAFBDDF5B4D15E687756890B5
39E9592327CDD2A07B21FB999D39F22A0D575BBE14B283B22D846375A7A83F95
857F4EBC3C7147576D75FDC20517E2C62EF1AD9A96DE9B4AB99D5AE2B86353DE
FC7873C3669171755CCE39F17987E61D90AE265FAB146C37C59900ABC5D9E080
A421E2300609BC1547F6A65A1DCDEC0EB771C26AA81D6A91267E5B5CE074A5A7
4D2B911238EB96563E16B93632023BDE982D490EBD9C121F74DD9924C0180972
C5D1FFFE17C1C51CE46AB0B3E6CA7E6717E3A0662CE2DAB884383F3FCC23B608
3CEBA21B58D427BA5F2210A9A17FF004DFCA17AE9B44F9B8E4C80B749FFCCF0D
966BEC2C2BAF1D682755E358A39BFBC9A85D3125D042A30B6D4BD08E8BF0B3FA
CDF77D32AF6F34B807454AB50DB852664EA977D8B3A48F223B181FA8C16F4403
11F152D6A4F1E2522F9FD98CDE37FA80A989D853C40BBC6313008A4749552D2E
DAC2EDA92F430B3413C921A5E6833EAD1AB522D8EA1F41168FCF2AFB850685BA
6C485A30C4150443812E0D6C1861066C53137BED5D3DE75DF32D5103DCDFC28B
1B1142B6D40C2125FB92AB77A726182892A6F1EBD1924B925ADD04AA987A54B3
0E8D87157F74B14F5FFD0939765713AFCBBD720F48E64FD10525E1545AD5925C
2EF970ABF3B2ADB8E16E4652119095406CE00FC85C904E16AB45A9DF1A47F6FB
56F775361CBED8564C62200DB1D4847326CEC1DFF4D84BD3F7CD02BC8EDB3DEA
66535F8276FCA5B242DD4B9D56A12A58E6B14D245520F43B4F20E192E9FF02B1
6151E466A1A7A592A2C3068A34045666D8DFEAA05258390F485A878BF43D1D90
E9B96F0ACD9D21E5AE2E2F820C0A023BB53602C886FDF9DFCF14F789764B5A05
72E9FB31804EAC34167D27AC13ADB56543DCB1FE7689328F7186909A928D9428
57DC676244DB5C21880C085BDD4D5F54198B01289F0FD5A6E65FBA8C815A7EBE
B4FFEE1DC75817FDB84383BFC58BEEFAE6F7294751EAF51B516ABA32807F5AB6
D66DF1E013D466146B6E4B26D168978C5F71DEA4130E88769414E1345BF12148
AB87618D8EFB65EFB42BB651E4CD55821C414A0865F3DA2D09048E5B759C6469
8CC9F6491BD3AE819EBD284383DFD45C23F5D6A76B811869131289D540D0943C
DA5C1A3A7410B2B18F67913A0DDA56C26FF0BE5A85D3303B024464827B0B984D
8756E25A6946562323DBC6C312237A3AA9F03216BF456B5307824A7090DE5241
2D5C782C428BC5526C8DF605836F0E61F1FB60E94055D4A3BEB08B2BE276990A
C2C15EAFFA6C7BBA548E760C0F7CE5DD1CF777428A3BB3A157512DE99415290D
3595F1E6CD0EB089765C6138FACCF7B355F3DECF8AB2941E70565FB8AFAE4A92
B0DDCA424EB4D21643A6C8E434F9204F66976620F68EC49A3A78D8FCA06777EA
A05824A489748C0BDA38B6DF7CBE7E88CF051530A4A324B5DD5DFA23EAE85EFE
4BA1E58B00BB70FE8158ABC8F9F5EFA113077535DF806BCCE61F6A4561479648
7B7C8580C83047D268B40EFE9CB8C49C69653D3EB52A9AAD0F462C5F0E6175F7
603C0FE59D2157116E047BDAE3757A5E2402D815BFC31DC7238A14A8800381CE
1422F680B6063472B5AE10CED38DA4F70E2CF0CD82C70547A98B33AC1F45B15B
EC19FF8DE390505D4C37D501921CBAEC950F327AF71B491B049C101419873C9E
CB191990B0E5B7484F206D14D8EC76D6D9C4275CC177BAA3000F97A2A4F069C4
2B6F5633D30C8F10A66BCAD34047C147CE89DC9ED760166F53735393E8337F2F
FB31BB893818A8623720DDCABB7B799EB9A22C0FE45D696DBF1D1CCDF3FDCC13
3C3D4054BE5EF72B03B63F00407B24B9E330F346B0ABA2C20E016638FABB71FD
914AC727CE59768B8CCE1A7A611E07833EC9CA90CE091B97DB737BA0529B4202
A484795677A25F41B51AD9958AE2DDED56A4AACF219706AB0A0A95E17CF3E344
4263BD3E17E883C2706F6BAE03DB4B5C76104DD7B0C20E62BF04BED975B69A54
C035ADAC9DA483229201E7C6867272D9544BE41F5FDA19F33A60F717C1ABBFD9
BE95D0EEE176A14C835D52C39B27DDA7587687D35AFE95D28D2DCC52420EFE78
DA22F9CDC4CEBD0EB471A374912A139FC7B896884A1568A13D6ACEA121DDF051
A1CE13F6C4D513989A3F084ACEB24E70A0A708802E40E77190455B679832D9B6
F36CD71478F13D97264672DEFCAF2F31F43BEE8057259A4BF916774EB4AF4C26
A842B4AFDA712EFA3B5B00EDF8E65CE45E92C00BE6B05D9A9B383D20DC17DB5F
A25A9B7D2FE114B4A1BBF4F701FA4925B07F9CD148EF2DF8A070046B758A31D1
B0D94CF5657235FD42CAF0A3D3A89784926CB95D4A4C78647097B7E5F88CC95A
347340DC85209DB4615ACE2C8BE6DA590040F54F8FE9CEAFA8E211B66029E743
71A3DF38F45A4CDA3C8175B7F3536D16CE93FD2DB5C99061499A2C3D406F8035
A7D2A11E8E84190AC0B1A49405A7782B6E32163B88F33F298A7D9389219F0748
FC93C67429194E1201824C5B654B0C73AF917F9D5346F1FD077671325F3F429F
4CC4EDF5C6102BA05FABCCBFB3107C65D0D971914D970104E11ED8CDAD724BB0
FCCD7A04128B85B362FFA577278C5D4E013F16847DE1844738AE7F5F020E3E94
0BD7A0701DA0F3C3F736E52F6AA8C57657A5A7FA4C13655B6CEF6DDD700A6191
8AC6AAAB6114042DE990622FF91DF46B5CCAA718A438CCE628019D683BFED566
C80E2C0A33FC0354A3DE9D515D43230D88CC5DF7D5F2047A20CB434038042833
CC7D9EF31178CCAF30D52C5390541513B62A5C0BD539F120905A8F15D58ADCDE
86DEBEB1BAA59A7C1D026BBA1F65AF53C9A56A4D7CC66866252E56CF791F8E1E
1E7581D50626FA78CBAA0164BB30E83F2E43E2BBCBFEA46481B5AF233C3763AD
4AFEA677E62F75F4D77E2ADB4381C7E037A35BF8BEF754C9C3096C70C4122636
018B12D11B48398E332871F7472495E39DFFDB11FE7B32CB5FA9E61436D66BCB
1AE52E960784F8EA4F16F59A943637F47F3686FDA9F20B3430B18237059CC5AF
227F09E8130223EEA790DC71E7F264377D80507085C8651DC1F2A46127658F51
62D2D7B43E3DD9F88551A510F552AE8B99120B4070633458F9CA777958EF2AC4
918E8BEAE97BD2C7DB78EE84272E575CABA164D320F73181077B4E8AAFD24297
B393D761778DEE6BB3965A0DD0521B449A9B339387C52F3747CEB653E2654F51
04BDC0E97E690A717AC2E33FC284933420EAC00DFFB2B5BD2A6023300453ECB2
E15697F95A5C0C7515CE5BFE6EBCF60631ACB3157C9FEE580370A7432985F254
DF1DA56E5C3B732D0BA5EA17C34F95D3A24D512CE222356B22F93BD9BC4FB5A2
F187A30764135316596472D3C45799E2FB141C8E2C36FA611D47E7FB59A61624
11E391F87C23FF79D7298BBF8A4403C40A13FA039FC94DA1680C9F79CC43C834
07836A7CA40346CF5A8CF51CDC79FF02A5414BC2AB3007609B409C944949BE79
C6587D09E79497139EF442218DC5AC3A1B4C975920151CE0B53B0AF743480F7D
09DE80519470BC2E10642646AA60A0211A66D145660CE6CBFAE7F12B53A82CFD
16D3D991DB0B1B5B879987026BCB3F9F9B320A2B69554805EA3366DB8F937DE2
8E09A11BCBC89AF2EA03492063A9889085F8FD82F10E76865145D81724291037
04285F42553EF94A66AF44CC1B173F3575665F91FC97F13996C72D72E5F561B4
359F1AF85EB929804F39714A502BFD36EFE404D692D56CA17832CD373622373A
49E5C7332DF8DE7F3070A69476FC92F8BC8ED7C9555AE365392E94A077F358F4
82468908904380897032CBCAA67669D9266B9BA9128D3FF8D793E0FF9116246C
AE09C5E894490BD072A9FFF7919878F1C64A6821EF1E400165375095D21A807F
865D784C7ACFAEEEBCB12ABBF54A23B731705237D91B7EAFA85B978BC7FDFFA9
CB94393CE6A461275BF2837BEFFACDFE4BBB8CE0C8CF76A7278A04188BE958C0
AC6DA57A1AF763EF5841A3A46B1047E7708CB9A02D94D5A608942542558325F4
A84BEAE2C64967B38E524B7E032A1F91FDDC095B6F8A352ED115D030B44CEEC6
E4F860B4ED1186ECE02EBFBA29388CEDB54C261F08D59F5D5026BE16F6884A57
D54A7CC609BB3E720E5A101BE0D840BF0147028F5183A3E91B390DFFDC353AE8
62C34BAAC2457545B12C22E00924321CC3EB016F34C73DA79262E3017354BCED
C30EEE45C9AA859CF0787BA0DD3D942BF1BB872848E4C08E556D36B5396C4DD4
0888FC39108CE3D766D37A65F25ED9ED62769161F8E7969C1E83816ECA2396B3
5F39F58FA47A7AAC1DCAD9918D3708332077C63651BE0E76DEBF927F8AA9A8C5
6608DAB5826EAB3FE900DE2CCB1695AD13F2225139651C6C5404D4F0AC4E19B6
39EEF4897E7640861FB5B2768FA4D81D4D40A1F661C342B0486FE8B3D60D7820
D0FED5055FA6C621EC710F93CBC1BA88FDB34A314E938A82E558645C6EAA7C3D
CEF8ACD76935C4CA7377D63351130C58B69FF9E49289CCD72DC3BD76E1B892A8
D4F0DA9437ED4A2D76FF35D92E3EA42645C3D7DC6B0017170BAE4E43263C7B2C
F9CD4E6D804C5611C322294793109FDF31A53C82B34636328B226ED340712446
3D5ED9BBAAAB52DEE37AC1CE9D5D0567B87E5021FEDC3B2CC5136D4607E43453
5CB257CE27E4EA2821033B3AFD0147856442A8C7EE668CF43FDDF2ED6B02531B
9A541AB2A15FF9AA55735317932F55B5EE96D2F85979726E4860DC119291F519
F80D52EB11F057C63976C4BE03C0FB6A36A451187D8A45B9DD48358BA281FA09
F9C463BED6585023B00834BF54FC8F7D061C3352CEA8D2E2C45F5C3AFA2E509F
50D26998705CFBECAB9ECC28BEC5359E6C27A10FF2CCDB9197762E4A088053FD
32768F2F66417559E0B70A12F82F152D4C2D1AA40BD71ACAC32B8B205A9294BE
9BB8CD732132F5A97CE7961FC5A303DAC471DC37B44D578B203656E8571669D6
A54673749D83F88FB2BA2964886B5AB03B91FA240D9D3EAAF78C5185FBE3BEE4
84B24EDDCA32614D0B3CD5E7CBC1A9A4E93DEAACBDC4D3FB6388A3E094DCE2D2
1177C4C79A0539A47B27520E4B4E21B2EF6ACEFAB2E2B7F7DA03E9A183B4A5E1
8D7C61624E6D5F7131B0F345A866B213E3701C4D2AD590F2235DF68DE8E7EB2A
4A6B0942C8BA3161BCBEBB132FE8ACF896AFB28C1D41462A18AB58E271059366
77A706F8859BB64032FD1E954FBC12BF6D527282811C8AFF100984AEB9B50376
D93F81B9723ED9F30D129087BADFAD45E2FB74DACB463F2C73DA232FA536C677
00CB651CF21CA6D992ABD5301968DC2E100A65CC361C28916DBF424E2944BC97
13B03A17C6ACA30C3CFEC884D77D7DABE5BE14EE80FA50C3AC7C6827B3A8E211
194FB949262D4D51409F59D0E00A6296F8B0CDC8F193D330C04AF4C4E97E9A2E
E5815A3C9DD8D93B1D77F382230968A3DE55CB0EC0C88D09976F85B246F4AB82
CB57FD892D92DF36FC844FF69028513887F175C0935372A3CFDEA2164AF0AA7B
8CD5A8A75A6159F56ACDA2590F3A00312DD199A2CCE11175A0F83F8EBBBD74C4
D6EF2FD551C7302D31AB7FF34D46D9756115E7934AC1C235D9517CF6772C084A
9844482089AED938F5F30C12D74C03ABC23B4E973D321F547062AEDF91C084D0
1DA73319C99947519183FAF8FC3ABFD02843E25E3789A8073C390BABCF22BAE9
62308F8795805E47996A061C59663170232016C52184CB724CC4647B8EA06676
D7FC2B31F8FCC5CA9B715943663E8F2DF94CD655289E275C6AE8FE39B2D0648E
1E0BF38ECC55F6DE99A5BF27E1400171CEA24D6C26E06E258FA05191832742D4
1E8F5407CB650D543B353097DF9D1560A8E66E34FBF3D9F8E617604395FC8CED
69A17B35A6EF813356B4A77062814972F51B85A52574A30198CA0C9EAA8A6819
4A80A5590773D0ED68FED9C4E174ECCC88E83EC27C9379DD166D7290B54108B6
86BF1B74D177E056C102E6CA7C3F8331C9E141A68EA2BF09DF1454159372C4AF
D26C348A265AE801FAF8F95F82548A8EE449B6D7FC8326920D8833CE6C015EDA
3EB59FE8051EDBD5A7AD0797412009A46F0931040A329D1FA7412936D691DDF0
54E08952874C7FCECC1300C6D6CA6D95EFB3634C801BC0E774FD9059FC871ED2
95C2578BF4669EF8F13868884A4ED8A59D2CE291B39B0C75DDF62469C8CA3975
436415475892F5CE4C363216E70B0F25875C62213C1BC29FAD436CC09D9E1CDB
B30EB9FFEC790A90E50F12857CAF81B98EB6BFDC6AF502F625206DA8B464F6C7
D881D80EE3F78708E47963C1FB1556D7496EE158F1C92F9325F49F1E7C3D99E5
375E753DF391E026CC467B3346D135E7A5BC47E6F40EE68A5AB6D47101437DCF
480739145E45272B91D2A738884526FDAF57DDF74BFA991385EDEEDE186A3BA0
E743B7016A4A003143C03D81B2291A4026227C8881E93D5D037C6362022D364E
511F3CE71AEE9CCD9D9B13E4967E6B7B32A0AFEAF9A0BC1CE14FC71C2521035A
6D4A47A9AFB0061141458643226F5E4A42D28AA522ACB92CD74692F0B5D9A8A5
189467A5048FA80B25466AB371A4EF94A86DA32DF34A5A7EFC145D22E1E70AB8
BA91E9E1D4DB9BCF4774BE0EB6736C1CC4FEC53CB638D77616873CCAEB4CD558
E1F9901F71FDE2B714F8CF1B68DFF22FA88C55D0E35DAE21165BE8B393CB7F79
FCC28BECFCF54BB82F21660A28EFE5E840B86B5396DFB5E132B46A237289FA5D
F3F08771B7DB096D6E7770E04FB726A223FEA5CC28CB4A13C9A189FA79C809BF
0CA258527614E2DBFAAAE1503F11B1D20A4044A6E2F543B6DDBC81C8FBD46285
D89FCB1242CFE127356094A334B160B51FEC854B8A606D8BF591091932EDA1C7
C9A0C61B6F535FAE7E6F608FC7159FB6CC403550BBF8A812B367A20B29B469E9
2FC6C773361E8386C6492F72E90130AE9F04A81551B844AB055CD0A0B85DC429
4FD79D71EE64E7F4AAF1028F32FE341CA4BA81186FFD36FB2194EAC56A4A234A
F0EC6A93C9D1739F206344F74B58ABACF14971190DC6C6E7839F866A1F6B2A77
F8FF4CF7C6CDFBAEB9E7D341101FD62F4492ACED94F9AABFB5D131CFE9ED1CA2
0563E55C189AB6E5E4691DEF7491A12DEABFEAFABFE3FAD73DC41A98858B5A45
AAE8B4ABE2A9F07DB86AED7F5BF32F3C5F319AD56CDD1318BE0468A81144D8E3
78D9CB2808C00FC812BC5DBE9BD7547C87DB7388646AC4C08E95A02172E4C2DB
45314D92218F9E9786A8C8FEA6ED320C09AC158F07824DEC4EEE3CA7382B4CCF
9D3302084557C5F1F315B17CED0186F555EAAFFE52CB2D3E8673549FFFDB90BA
8BF8EF30FEE28213D406DD502200C28122D617DA52011B329FD16AA9A1E8257F
5BE1BE7BC8979A24768A167A5F3FA281B786A5CE3E799C4B9E99DB526586261A
325D6BA8B93C3C860F69DC8F09954F4C02E326B3DBAB73A17CEBBD64919D6C02
13EDAAA496E62E0BFB910E4D568766DE856CE116A86CC5F77303E1C5E464FBBC
761FCF13FFB6DB4F79CA444C04A88EFDFAA361BB5FC3ACB327281E210DD789C4
241ED856BD86FFCBDB5B791736862406734CBAB27766EB9E39A4D883EA48A556
5A79D6B230D48A8B0A80B31BBF871900DA354179A75E6838AEC2F27DF295D487
B7B26805EDECEECC5249B99289C8FEDF5FC87FDFAF7A577733553632387E51C6
711250CFC907E502EDDF4C7DF035951EDA423DF9DCE2F7D740864B43BD326DE0
75552A90744CB02213C9C49B569F4284A04EB47F965D8DBC3FE73977B3AE7931
E4FBA81549BA9255408A23D2284A320189DCA84C52C62E99777D7CAE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM2488
%!FontType1-1.0: SFRM2488 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm2488, tcrm2488, larm2488, lbrm2488, lcrm2488, rxrm2488.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM2488 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-167 -317 1298 954}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA30E93C1988EC251E6375C056C02BED93AA6ED91
DDB0036B6EA7D6B65A850F49CFD019F0045B4490E4C9AB9E6B61F92130B23625
2737AE3F50D2BE0C186B5054358E7E4E27EF7B7A40871D4E9327D0162A46472C
F05AAFD1ECAC84AF699165315738BD21E80013D5D128F0CE9B2D73AAE50E5110
E024C65DE5DFE64AEDEC8C50D7838B946B2B17A63189FC54941C9AD7633DE8A9
17DE0C922D516FABB8427312DA9F3F458274593C738E74E58E9A5BD96A10717E
AF7DB15ABC4244B5B8DCE13B01BB1FD392D7D7F067B1B5093870CEE2D271E96A
7D5DF1DF79B54854CA86CC4FE8859D1A612C2C9EF9925E5DA01943A1A57C7EBA
A1B8AE44B0348C900FAE2DD85082DF717E136FBF97B9E37F127826019C526BFA
6694013560F71D66767AFD383143AA0466104ECC9734992B9C21E9CC24DA0A0A
1223A7C74AF4A7BE587906B0618128A1CB6A47E4236229C71BAFF9061D20AFC7
CF537D4ECF5ECC83876AE9FF337F37DE025293F62AE18D88F609E2CE084EDB2B
17617007033A1A01771E6B6FF559DFDE4055D4DD61AA9970C916A9C67C1C896E
80A25047332D4C00F043385A0398AC953B9A9FDCF35EF3626D6A05F5E7C24BF3
554657EFE4D9B5F0F79743A714C528B64D54738FCD7E1FAC5FEDEBB96E66B91F
4F8CDE33B12C8CB77FD81A17755E2C3953062BA9888D3D04D08D5BDA3E3E01FF
A244491E3E4FFADA1579A8F7FDCE2B91A1022DBB679E32EA3DAC7D62D0926F7E
F8F31B3A12FB0B1E70D90BF6349D76D0057B6ED9ACC625BAD1C1C0DFF18FE2F5
30BDBD705FF2D23C1A58E472B553AD3D71F60EB402433D557A5639CBD91D4BC8
9357D38B9856F8419D057A413F7173EB2B0BD779F6F506AEC2009D38F97FA574
21A7482CE195E6475585DDACF70D7DF08890CCB66011C6813D4C564B381B470F
8ED3A187D2B618D4BF91169AD52A9AD5759B2D4B47FE5D96855512B0C468D667
65154C7E49EEF89C24404A9FB33E6D1F0BEBECE4294E49F4B9985D129B28EF11
8406138237886822F964EFFDA61220D9F1B8FDA4BFB0080737096E5A07D8049D
5A17102D7DB84C8245915F7242E54D4C579AAF814C1F93701CE87E6DA99688C1
45C4E10F2E7E9DF8620A4BDEE92FCEA136F517DB61E1D3039E588B12228B2971
C2FF6C210347ACAFBB9350C8ACF184707307CD76A60E8F85B83963C96DC3E56F
D29A98AE4EAACA821ACAA26818E92EFC5EBEA9C27006073134EA0620E1B64352
30D8FD3DD7A12E6590BF9DEB25654D7609EDF4C2991AA96DDF4F2CD0C85328B1
897FDD1C66A459E4322B655D19793B5C1DE396B43AA070D345E5916F705A0245
3314FB5E0E108D1A9FEA481C95E1982454888FE6A8F9B9C27FEE829EB2CBDCEF
C63C3590D52F450A808D2515E4FF0D00EFA7A3A8F37EF0877321C97DF1C78933
0F4986E648F9DC82107AB891157F74B14FF20415743D0DF6AD466476E4B4CAD2
EB0A6AFB8BB5FB7D35D75C247CB503BD14EF147F95578DC185918851F45A7F35
BB6AA673F84DB78BEB14FACF48B739DF9B3C9210EACBB0636880DC989346D9FB
2B7B442D8C057782853D263D86C20D062B180E105D60D7228F1E7999B350C1A9
12D379D9E37C8646D08681CE958A30C3362CDB0011775929B1296ED5DD1F0D91
866052BFDF3E7C73B00A43814BA6245DDC964419A8B9C3288D925D141F137547
8DBB41624E57F1F0D63E05E02FB5314AADB5D49A16531C0CB5BAD252A1D27034
0B2DA6E3FA3B012398F4F3E15ABA26CD8CAA224C0C7881088CC7E52DCCC85667
3F261B5076C4E761934A7FE175C64DE59E00E9253C9B160D225AB076A943D9AA
DB427BD76D04978EF48C083BB6ECEAB97DAB9A15A4BD6C8EC20E0CDD9EA1DFB6
038D0570259653C198D12DD90A79428D243AE6CAAC763D25AEFB1B9D048A7C29
55ABE3EB11A8503601BD8E781CC04E9131695F18870D52D97A6287BFCC3BE776
D8D3BA011EB3FBCC801CF053C768D6B239281D78FF32AB9F4CC828D90A79428D
243AE6CAAC763D25AEFB10FEFB9BA1F5DEF9B438A84377451081C798CACC15DA
6F5A9C5E0ADD9E18FD2DF96041484533527A21300B53164C8FE05B53B2F30BE2
45C026323F15A881F6A501D48C51E8B11DFF2D2A7E40E89F929B2508B78B19D9
1669C52BD49B98E5E0C77767C645B04FA6BA5BC7F80772C87D3002E235E4549E
8BBD49384B9C069FBDB7600DFBA54574721F1BC78F2BC224D1E4BA288D6BF0E6
223D6F14CEB825817320946573A6D0313F55091CC5BCC1A675A562D38917CAF5
511820BCB2E11A6248C1239DEFB6E683A7B6E729E56E422A2B7A9773CC7111BD
FEB0EC523EFBF17115FDFDEFB34C71480018AFF942D8DFEC803F21764E3CAEE3
B34119AC5A354551577247378F3589A96F311C63A8CB82690017FCBBBEB77295
A7B4F265303F2B31B251A1F764CF5BFDDE33C071E52A95CBEB7B12FC56E4CA56
302BF1093AC1F65CA5AF6D70FCCD46CD6181C42219D2B9018BEE92F66AAE7DD0
B979E7FEB4C62B1E485F8620718BC6C5B704B27655814D2B2F5CC58B90787A8B
0AC516FAA13CF74E32FB4D53A6D7C3532394EE499C0B677B80A609FF952FDB44
0C372344DA7BEF54369232C06001ABD2C65921B5520C6B36493C692BA5F4EDED
8B840CB46A3EBE62C485528620DCC921B6F0443FAC99C9C8E1773288AE47B1A3
5F0E7FF5C6995A1A5D31C88AC04A170C35D1CB9045D41824CD07992446AF463A
B935630253258830B85767F5DA3AF3F33A59C2A545C7B69D7443D52DE6BC422D
090457D4EC19E7B52C46EE2EC234BE533ECE9AFFF0C83C3FCCC8087FF83B554B
290734A0328838D780C6C6C20EC0DAB0F6BAFE616701D509BD10584123AA5D45
1F5B0020E2273B009DC8440D9435B786CF4611F67DF27C16D0F91307C9E07B89
8FBD8BA516A8FA566BD9B0D7A6FED0C03EFB23DF2A787EB15CF3E4E6E59AB7A5
29DA18607E071D71B1277A5A3A64A06CE2855691FF2033DB976A55583FDDE9B1
8DFC8633B29A8774F1AEC190FF038BE731299BD0D68DDE5A94B272519DBE0128
C6BD47FEBC7B5C780AE48604249A21545784B8974E823369EE16CD5FFC59DCA0
96554DAC221485323BE884E1C5DCF4C788F030D3BB8FDC8293967738F6DF0AF5
0B62E4E451218214A2A47DFF9A7F01AF160394A462D09B30D82966E313380377
DC32AFD8FB322403BF103510AD9197EDEF3865B7E7C258291AA9A291FC9CC8D8
58B3A16EBBC7164EC3B26724CD846EF296211C61795A7915464CB5AAE1498BD0
07818A0CC23A8013455A45EAA8840CFFBF6583446C384D09CD8FCDC6AA88DD08
0EE570E4B4350C40A598932B1E9B778700C60738496FB69C1F8EBE330E2C8533
0706294BCD0A2060E1F47F0B760AFD56D0F5F53BEA58A7E0DFA3C810B88268BA
C26927D21F35C5E859354790D7877935C571298FA247F28D7E5A9EA02CF70A46
A176EE5E2B4EC9EF1BEB07CB3803C83FC4B7BCECC43ACB5569CEDF46D479F136
1AF8C49EEB343ADDB2E667774D3E27D16964F9AB8E0D701FCB0003EC0186A79C
B288231E1218813AA74F0471B6C6F5ADEAAAEB4173E16E989275AA9AB337E0ED
236C4AD7C698D02EA7F4ADD949461DA9225354D9D00AEDB687D6567C31CEF205
45D9D5CBC391AC7A2B89E521FB507E6728240F8B1D0C319A466A615486C777E3
721D85508E159F2B9C855155D8BC284DE419E1536A3ACBE3D401AAFA47D729AC
F46425303E0DC5AE76E353293828B0B11E039B4E52B29323A686661BC2390429
EC7FAEFF9810F7D344307A4F6635EEE432E960E5869A967516CE23138B98E6C6
BF47E00BEF7C74684EBE137FF134434644666BFFC6B4B1BA4525028A5BB417EE
EE6403DDC45204CD4EA710BA946623426644091664F8DF9EBE2F3CB21C1E558D
2DB6E15AA96380692DFEF6A2400E9E98711CB717729BFE5FEACB4AE8299DDDB4
92309217E4AB54EAEA360723838577B10B51E13EF7681E8EF4DBCBAAB3E2FDC0
5E64C08215013ED4C49F706CA03D2EFCB2A22391F96B32977B4E1FBB8629179F
79B7C8C829545A65BB9E6B8C60F4496570C40701A5360FED33DD9AF1FE26C39F
81007380AB35506D9E406F24AF8581A764315D75B065F368B41BDCE88EA05BF7
E75218CE0A873A42666E1555A111A6FB06D77D4BEE659C17AA6CC356BFB3FEEA
D1993C2D970C03396904E36279CAB1712D343F056DA0F4C1EA5E5E98E65EE3D7
035182D7D5E6D4C266ACC900CBF17E8709DBFEBCD40702640C792B0D18CD2106
773B47C06467608076C2482A283694578C408CE8F2A4D013B5E0B81EBBC26AD3
9134D41DFE2F5D6A9B7EE808EA2C0FEB969BF710B6924832280992EA0CA12302
8690065CD69990992B70E7BEB81CBCF81E2BAA51CE0B606B17AB7BF6871C5708
8B3C645105D5307832DA5319691CB67089C9406EB30331EEE94F931DB0C12D98
5F4E5F9091D0103D072882FBE4578DEA7C24816993DCA62A7512D5DB32C8597A
ABAC62DB68D4A002851FCE51F5CAA798EC0E941233CB1264B8D0FC7705B8CB73
4B99AF825C4C153EB80F08464405DB2F1A27B0A1BEE4453796ABA3DEE590EFED
8E05E950B96EEC2C6D1EF65B6697FC6F0B64FE83171A2A3A8470801E75A2276E
B60903331E3D458A078E33418E7C2B2E9819017A8943683EA2D2753404AECFA3
FC10643EFCAC5E9ACB78754120C767307CCE056DCB6743B81F729B3878A8A79F
28435C9964D36FA58A130CC0964AD14295C3C1786622618FB04B277AF553DBD5
723A65B624B3E061AE38BB357F8FCB7BD46146824BCA64947B4B993E922426FD
B526474110592B7BA0CC537B3A48DAE65C046D67C5A6320DF9C0B9228880466A
7538C67B91BE2D2DB38A404768A6F534BB79BE229103559EC5765A12BDA0A288
0CEA07FBEBB74415E0E8AE43B43A148F00AD7FA9FA045C41D5986EB0A40B5CD8
A02372C756674C44C05AF6E5E4D192A766B5FA1F9E2DAD636B64CBE3178917EF
83A833EA5D6D61E7CA8AFFCAA4C6526AE5DA4C6020E7A9E2E1F20A6601977771
9D6D143380C2416447AF69B47636BE516106FEA51627238B378E605889C12DA4
B4F3E62A91CE34A3C00F03DE7AB28AB010DB07153312F14E836FDEE09D265192
AF69322B6309C10415B761168009FD6214A6BA9FE7F42F5A89CD2FA968FB6DEA
0DF3259F78035093E8FA0150E238EAECC3CC784F162B921A44CC93194862FA5D
565911E01080595C83054F207283AECCEBD35EAC888DC89585BE48BD6170074F
3862EC97081D32FF147266263D60D53DC7F146A92DB53B7D196F72328E586E3B
6E79063C21B95EB1B9971F2E3ABDC4CBE3ADB8EDCFD94F9E6FA59171BC12C8AD
6BA5555C27C73D19E9537688EF63012552E3761A3FCCBF9B37AD7801A32386E6
AA4FD565EF68CBA363E0DF26393180D394B56F9B5D127B844570BA810659F6E5
AB21231859C6514C58990E8C5F3EF9E3064BB81E636FB5EE31464B43801A35FB
CB962C4EA67E8CA8213AD146A5746D78BF1149CEBD1D0025838CCF5EAD897A39
29766FB0C0D5F5207FC5656B3F87A0CE1D458591A88B2F5192D2C93A9F9BAB01
2966720269F5EA83BF84FF54A2C908E03841B084F734FB454F1FD4CA87FF5D78
3A91D930D5576025CCD2128AF190E437DA62F7E7BB4805034C88696774E5306A
BD8035302ACE9F88A1DAFF1C095701C3051D729A6CD86D12D8111320E96D52F1
D57386CF43DF10286732ABC03561CD9EC0A3706325806A3956DBAF779D3937CF
C27D8EA3E50918E57C288783D93CA182B25A62E99BD62D2A4F751D17CDCA5EC9
CD3B6FEC8FCB80B1BE3C7B4D56B769CC7424783C099BA6FB664F3D46C9D6F863
B7C86D689FB1B8D29DF243E25F63B28C45AE5775EFA2D5C250593EC6B655303F
E43DE369C48C9DDDEE03C5DC5492A3FF08090DC5F5C74C0C99171BE1745695F1
DA047902F55E4CCF7702F5FD711072F4A195980113ACAB1D2AB96D978D5FEC92
B75D4F0D64BC4766A7C2E4547E26FACC0B8F01D9984313690F831AC50842F560
03338DD0537DF489AA0F486AAF99E0A5250A930E2B4D8EBE7C59A5807D20E44D
6A6969ABCF2DE204B8BF1FC7D06D3CBFFB09B609326206E0562B55EEE6F50ABA
CE565F3B6C224C908F7EC7337791DA2C023541DB05A80D19B6FCC918EC42FC0B
2299158DF9B21C8D4B202B93EDB4FC549FF3A53589A861DF1EE5024648F2A25A
D059D1F7378FB06BC224114991DB61CD6B9851361DC744F5B5DA9A17B0DF591A
1CDCAF76BA18203DF558CB2997C90C883A1A1F05535DA5839017A483CAD88307
A980645FBD42F195F758521142C93E83A2F86BCA507EF983AB01D8D59EA5BBE8
999D9FA5A6C956FB2938A9F76ADAF6537600333CC07438DA93DE407D800C5A1E
7644DA36BF7F2DB559C222FBF9C92E703D7E08D5AAC545FA14D690FE87FF6A52
3C0A40041806AEE0B726408567CC9606DDB1F8D491CB8468B6C238BF6BD40FF1
476BB3FF2128ADD8CB00F1FA2F3D083625FFCBB06A02CC601C2603D0E7712C21
917894DE95F78986451D3D7665C8288336BD21D97EDF311B5C6A817DB4E0D69B
3DF988E4DF9B9F3D9001E5DB53920200708A5BC1850FECC1C56E0C759F86EE60
03B2772ED03B3F7CDD4825F152F379BFD87F95C194F43CA7F7DBFDC3D4CC02C9
88E91FB39541B875787779ACCC56606309998AEED7E9E5A3AA58148F888B75FC
61ACD1E047AD1E2B4F57723AB6C00F1F16D4416D20AF9EBE003453658EBDA97B
F80C048C5F979C46B8785BFB6A8264C4550FE056156172131FC7BDA5A03B5B76
C6C6A9C596F7B4D62166D3C11D0D92D1E3A26A3F67C555F649C3151B48D38FA1
88E19936EDF49B15DE30D2F632825936EFCE49CF2385F7DEC39372DE576F582F
60F9AFD5E8A479134DCD0395B5E6E235A58C64DC142EA099BA54B105D0E5A9C7
3164C0B29DD2710BB9C0A40F45DDFE277292FD83B6E47952D4B007151805E749
745B4F1FA778D7168844F43D6C4C53DD1A9F536CF6FC0B6003F300A6BD9210AB
2C5585FCBEE927AA2331BCC551016F9AC6F5F8B0275FD32BD38A309F0E9B78FF
583B35C8F097D8DCDA6E1181BE9A8959A0E13A259D3CB47377A99EBA183254FC
8225D53D20EBE822C060B15F1F86EB33DEDA68BFE2934B6DF64D1B5101E70960
D744A980910A429B730A04B1BCEFB1408BC0A8479DB34AD871026E83292D310C
0356881B85E359A65F981841EE4F938CF3D0D775DE45C25091E497EDFB7A5536
05C5078500ACFED58772BDD4978BC0A27D0FD58C185B712F2C19A1C1AD46AA4B
BD9A1DD880CE06762991F88B99EF1737634F7C143EB0AC59E4694D7484E62FEA
C06AB90DF17297EE1F25E1198097FADA94D6502956CCA94CCB68CD066BA11756
9391D212BBF5C830B0D4EB4CCC732DF7C95328054B3D7DDACFC278B2EE2026AD
818632BAD5821F1DFC9DC5E044FF6D43B436FF7B4C70BBA2BA84739210E1EFB3
0685FE707D40587F16F3B41281415B98496F7C7C1E474D48E58E0D1105B6BDF4
0C0A431D263F22D091D0F560ABF144044F3BD194CDC5D8E7D0D7F73BDC406DAA
43BBE259BE4B02E0598B3AB259EEE0D991B8D017718DAB72E8DA89DBCA388B71
0F8752087B650DE011F5D0EB243F926513AC0E6899EC0DB35199319D490A767F
249796804AE1626F514DB92A3845B6086C41EBDAD6153A22757D6D62159B8B44
743B53CF0F69DBC125BCE18F8D9E2AEFE43856C7DAB41532D46EB2C53E77821D
5F4840F8BD0B8CF5FD91EF18458D29E3D4839679354CDA6F1E249584AC94EE9E
3B0CDC2F2C8CF8BC758C05C383C95269BDFC8CC341D405A20F45C77D1119D43C
307C07BA896BA4BBEDA04FCB94FE62748DA8DF0DB42F11D464546F580DB5F566
4316AA4465646F162FEAA8A165056AD50D42342167AAC20DA932BFA4FA7A2256
D3532166425DCAA0F0754D33163A4DE139306D67D26AFF97FF7A0DB12A7687AD
FEDCD4347343B8ED84508ED8F6F358A5E94E06854A23A623DA0A8AE12A177C7B
27FBB4B4C26E175FA8BFA903F17D2E82FFDAE68FF6316E6A62DCF819BF6E2C91
2C9FB616F1420C54576EA7559E6B6114267FC316FCFF513A4D1622A50F3EC458
7F197C1A3A1DBE698F1EFBF5280D035EA96FA15A36EEA04FA934AA8D3D190AC9
A6022EA2E47BAE8777F1FE9DE77B27D19B1A06180CE092968D2E27628E9FB0DB
AAC3CF582B00B7C92F1FD460453EECB1F931B95F0AEC70B39B88803F23688023
B4B5B33BE92A0310DD612A2B3ACF4DF45D8BCB795158D88E4D371BD41C6B2358
A7C163786FA8FAEFD6148A1C850ACB71728E3ADE56BE16435FAD2CA5EC36B174
7C8FB5DBBFEC0274A4A55773952F4CFA129653DCC6B1F182556DE91614CCC4AB
6295316F849B19310C1AB95C1E01F539C74B35D145A26A73BFEAE49F753B28EA
A745D51FFDD0D17C63527AFB2AC537B47C40271C8634A1595871E3ADD1369E83
B1F17EF1407DFDA915DB42B1598C48B0A57157A0C21BFA59340BB42AC67AA999
31BE50DE2B82BF808C3ECE5AEECAD488F5793581CA8BED6C7109AC71495F98E0
1CA4757961B663683348B44F4DCA0FF72D20614E2B3F22C9ADB20DBF4F7DD2E5
5EE43255E59F6BE280F5908F71342838C4D15EA105C471D23D61022A4A5AB2A9
6FCC6884E922BD1A37C24199F65D8CE903F5AF84F95A552C4318EF0BFB01B0A7
73647A8126C6D28845850181CD42EF2EC8AD094E294C7B3FAA216148BBB56367
EF01CF6C61D9780C7D8734A78055B6746E856EDDAFA8EDDC7A59305D602FC366
877A7912E4FA92F92D3803E4B2E89304B35D869CF78192AC3B962FFF77E19C41
69EF6B9A587645255047AE0F453862CA30E1349DE4BDFB8569C6E3514C568E5D
1DC854B10AEB7EAB2130B4D1D5EA98791C93C4398C60C1489AC2B8E48287CB2C
CCC4B3DE9A718677BB021F0B5EB75B99C856D4D9849DA945F7660FD206F68AB4
EABF4E9F025EFB9B17F2D3ABC58045984680200D25785FC7E54D643F7C28AF87
9BB5867002E14A2DA4C24B5910F2657D9139FF1541F40CA655FC4393E7A43B55
B1C3EEFDB885B39C4C44D8260A698AF73D1A4064545F979282A54E58F149C2EE
B29157F8F5298DC63089249E27C8A57E29AE4D79362041DC8E6923A275A78BF3
A39487DAE37755651D94B64527F7BB374956D581BA40E2FF4165FE35E1599736
DC754BC44145F4C6D52CBE9DA0CA518BB883B4550C5B6632F4FB686915B7D6CE
94A091A27E784620E51CF75FC1C671FA1CF98C60E797C1BB721B6047741E5427
78112A609DCF16C79417CF1F2B0CCBA4ADE95B4875B1D3A397665450C16A0186
CBF55205CE0D445E35317195860ACC7434A5CA181F14238FB896D5153A2EF498
0C05675BC7D859975D4F13D7B1D5B91C80C483A5444C0C0E04E917384FD7887B
9E41F97C6899E866C57E64287B2BE4DCA30A7224B90689B5A2A9B53230B0D079
72F57BD444F88C56AAABEE1E988B41207F5EAC8A672EC961071AD7E249F79C7C
E47DAC05EF61D744F4268D4C9B6DCE7D296F8B51CBE959C31B4CA1D1428FA0E1
47553296D28C08363325BA78488136AD46C835CE2E3E595F2D1E6DBC2DC6122E
A41E2EA012B331A64CB443921A2AF79A91B832331073236C664EDA4BDB1E08B7
036EDF70699C8678D908A44A632DFAAF369496844CAFAB1A979DCAE9D7AB5618
1E91DBCF67E24E0A032DBE37E53DDC02CF176AB5AAFA2A0D2ED22E34C2102EEE
09CC1C47BF21CB755AECDE8F606F2CF7234BBAAAA9D47400D400D1F79C0E880E
CE1D6544668A511FEE990DA3A11224FD2FAB43254E2F2B858DBC35ADD9A0941F
468BC0DDC72835A46F4CA8FA0A2A98C9BE730EAEF5934B2AC917DCFE5E9119FD
1EA072B5086381EE664A33D718B34A12550E115E47E0B930A9C18FE7CEC0699B
B12C33F00C4C7764977B7C9425CA10E69F746B0E460B791BE52F1EFCFD388B23
F459222FC6554E86F49114133CC430BE71C9771CB880E7F43225A73710FEE11B
6B3B23CD2AD46272540F89023A437A1CCEF030FAFDEFA9CDDF16B198B1197294
8F45EB35CC471B55FD82E9B71891283B252098408013C5AFCF78EE623C6F504F
36431A14AD355268BE490C9B865B4AC1889D4750CA03382F47AA2F4DD6658DD8
9EF23355B7E48F1B356C0EB3F5246E71622E19104B8C9C295586F4932783C4B1
9E170C6C32AE356FCDB08FCDA78622A9018A06BB95F29275875B7741AC9BFE11
7776F3D7739C0CE880DD6EA0C32C4D3183934A78E1C0BD1E7F808965475EBFA9
FFD298444E9C01500B01C7229F68E7C55F697AE616F5B4082229F8E6CD01C079
8A612BE0071CD06B72216A8BF29D1CD29AD839A9F792E06543BA82B093259080
6475C91E5D83A086F258E0AEDB13CA66BA189E3B7784FCB0635229F5FDA30906
69AAB659DEB9C7A4C75E2D43FCB5796F576773E7922488522C9DC2FEEC006AC2
0FA4CD966E77D75506A96A0C552536C5A5D8B2495AF6CAB1311AAA2954FAD83A
6356F227BBF51F56E66B4C65F0A2198DA913814FC86E27C16F06261573149CB3
F09A8EE927C57444753F21C7A6055D11B42D125CDC46DB778158B67FD31EAA48
4CEC36CCCB1F4AAD18BAEBFCC476FFA9AE09A7949E371C682AEE776A4C649CA7
973F216E6E0BB2251544AC539B2AD1B54FBFDED1986EE87417EA1BF25540F71D
FD1ED6996F3E4867ED0326E34A1A458570D34CF9B87E71BB127B5FA61604934B
B0E755913EA229A973607A3597AFCF778EC63AC1DB4CF52D7F1ECBF12A06CCA3
56C784B8DCB0359B583111DAA1EFA2B64AA2576C01B955ADE39CF879899F032B
1CF61111247C3D48E73CD777A75096B7F2964E02D045D789DFDDD1B462DE0CCD
D239C5F8797B31D36FD2B86E9CE505AE6A7955BDBA6E332BCE566E7E8B821E16
5A392DD20FB5C64128F8A754A0B7586F9E89F10236DA678CD63FA537DC16F4AE
CE844D633842DAD98F366C356BB2D2B4C83C1929578A0A2CE5EA0CA03E1371AA
EC11503F44C1393C229B7E90FB93DA0137C256536CDA59F5B47BA71B00E70587
B0B5FDDE90471FE24B1B33E19AEFEBCF2FBF5F357EB73DB0145DFFCD49C20B9E
D3AF254AC88A73D5ED1F39C5CE667998A9C49E999D0DE9164ACEA737E8E3C8C8
E9B3CB3E1F0CA37DF41B9F9268D5F81E3D6E8A8841393A4AC508AA2794DD6643
18CB792647BCCC9D4EC7BECDC20301348A77F4609FE8F37653B1BE12FF46572D
E19A678C694FE0B77BFD654BEF9A784045A2B4B581355D640904F8BDFF09084C
2F2AB3937BD19121AB2360B767454F096360986422BCC4FD49474B9F7A22A9A4
79A2925224510307B0AA781E4F3B7A5BF534EBDBCECF316EFF456A7B00CE2041
18E829454AAB5A71471629F9BDF8C36353EE3821E77C2DE30EEDDED0015D5BB0
B91C5CCC293F64DC3AA1B845C7298AB0083D038613BE88D602CAEE17B22E61B2
A769DBBFC078A7715BDF7A0290122F731EB12FEEE5F54623B58438229DFE16DD
EDF74AFFD0FA2E8E996AD760C3CE4E711A3F780AC6899440210E90B250322189
FE57C07AC6D5A6DF6E1BDFF545B28648329F842D99D37BBE029864BA7B209A63
786E1ED08F0F9B70CA6A0445DFCE8D97D1A1E2CE32197E36AD92461B90D8B28E
9ABABF2F2A8C93131518A2DDD6FD1469B445D206EBAF6983BCC5FB1915ED4190
3F329DA9A6E83A54161763315B51634CE440D49A51218AD4792C632AAEF42C19
D57034F26F38B7A5942F577D3F118736F859D7CE006A754E19D232B837FD9754
39ED377A6E76929A30E131A115E03B44779F3E75580FDD9BF02930A992EA0462
6203B5AFD7775D505BCF1329BF32F3AC462DF587A46B052718D840D105E97A49
F2B61B5E0B665AB8CDCB6449DD0F0FD8883BDDA8CED42E284D65C65BDEA74D83
F3ED1FE6F68A74799C673AC9FCFD66092DDFC2A27C68815CF9C5EEBC78452012
6FCBF51C075875374FB913BB62C6AFA907CE0D6CDF871B6D63BD76C8F65AD0AB
5D9069B43BDA0284091347DF6B354081981723F7682C8125F272CDFA52A9FAF1
494CD78FD95633C3A750B54CCC15AC0CB94966741732662F5444CB9623ED8229
CE30BF7E99576F21901E1381BCDDEDFF764186BAE0ECACC024F8A8FD740C4465
132488072F5FDB4798BFB8CA157EA97AA218F878037ABE979B20CEF363131568
083036A201ABD01294DE835ED43015E0D1F73D40043AD965A8205D7FC84C1AEB
BB49B9D12C27FF211BA091068B0AE760062253BCBAD4FE1944D73AF3CF7CE64D
2E619B86A01E389A9D07A4E1AC584D6B65EB2AFFA2135510358F4BF1564DA2F1
E264834FA567104B2C36D3688795B1B36EA9AAB0B4DBC10DE7032CBA0CAB5F59
7FF2336EA7787574C0D310BD21DC61CF9A04F4B484CFEFC6CE90C83D2597D83B
38F7E3E124317D2098579A2F229ED26FEA1CD029A5120CDEDE401D8E1C4584D9
BFE98F9BAC6344C64C875D0B6B97682357F0A2CC2AED9266FA4B5FF87E2BD21A
BFC6BE96159C789412938D61D457D59BFB1EA1561299AAAD988639BAB11BCEFD
ACE89BE2D86BE046B68F0CF2955BC6BF20ED8E02610D4E2F76EC47C9DB0FE3F9
EB4D88D7285FAE267E414CCFC1544712DA70C3CF9B0DB778BFC68A45D4D01889
4AD5C07A15C6E72186E7DD816ACE35CC2837FB5C59F9E0509EBACA73F1488F50
42121AA78D679A3F628F96AC90DE1F581FCFE288B58B02C0E84BB800C98E9BC7
19CD52BEC8D3951B469B5B3762AA1C20AC984675FC03938B245A2A5F3E48C1FF
7318D877AD05315F9C63AC425341C7ED748753664E4F59254D69A3D44E562338
1EE53F487AB08B6CBD893EF78AB771138DA8F38E990156B9DCF225472818083E
4957DA1637CA80F3F2232D0CE34ACF195B149761ACD615C434C2A0E8F92C4D02
476914DD6EC95BFC322274100AAED0350863FAACF236AEF9D2231101F1C998B6
8982157A8187FD67BAA1BFC52AD2A14F86B3B0CC686AA5E399F0A737A01946FF
EB441A7788A8C533006291C7E78109D69D59F1B79AA218F2915D788720F56216
B1495883823B6C8C9429AF71530C2CE0455A3CF74E761F6656A4840325DDBE91
830CAE18D5161CA09DBA22CA7CAF55FA88D24AA717676218CE252EF4F83F8305
848C538B7B4B269DEFFA3D88D2AE81E989D791B71F3905D45BD5737249CC3933
0DDA470BA0D7942D1001602D420519EAB99B7A11A8BE90B5D73F74C684884966
6BA67F8AE70C6BB2D63DA518D6408B2FB37168EF2B501A0D3C88A17B92C2C7AC
C2CB6E837A6FA6F8CB5566A7F21E9ED99F5FEA6049639125C63697312FD79649
F2467128507C9DC8471E4398C66E4D6D2B0EE26AA47F004605C4D23C5F9E60F2
BF88CF3113EA606BF7091BA049C148ADA1BC5D13A3F049D6640D942CD4872F26
01E476C12811E1A3F487CC514A099E1B1A1AA1C5343D82E80E366BE4FDCA4D5E
CA2ECEBE7DC70D9CA8D19674216D9C14CCF7C16A3D6B9BA88E7A5853EF04660F
C31DE6D040C80F9FB4D2AB102493D35E9583BA9E1A905BBE6055133C23C1D3CC
889710DAA25B95278A036A8DCFB200CC566F61A61E750A6D1DF9906DF881F486
D60E5E42A333AE613A3DBEF56C874A9B9614C26D2F5B67D372C5D361F0195631
2E27DAD3039EA9742D703699EBDC25D2CA2BDA3F13B2BD03F37EC4A952B2B888
B86AB60169ABBC680416B630E6C5B8341C7426EA5BEACBA24D520265E255F81C
227E3518A40D8E53C3AEA71658EC2F48430EE4C0FC8F2C4E5CD95CA0A78D5B82
23A2D4B1DD2084AC33CA17AF876C43CE1F86381980F6E4619EDC8AB2F70A35DD
78A31C2FE38B99EF1624B04B5148B5C7857B093664E6D25CFD9A80FFF9574FE3
1C0840C7746D28C684620B876B76F7AFD4D2B8794F42B4534C36A61BB20804B7
3FFF49FE1982DE06FA3DF5A543C8FD3688506F146B03C771B6155B7671CE52B3
F99C149D531E5754F11BB2CB8B57B48896FF094929A2E903B3AA05A9163BC172
41CEDCFD22124DF825DCE3570F4ECD54A518450072C3BD14C93AC27C7FC216FE
8D60A678954CEAA988E0FF863941F5E14B32C84D6F792FEA35F0A5E7E52E4A30
9C0EA7299DF47A83B55B56784E5A65A5BC34747E86F47D324EE7F303DC93C842
9FCC46E5A96FDB06E31D41F3631641F8A688A2BDE0494C74926FF4DE0362DB33
D461CE4D2C3152BC7DD60E170EB005FB526223A56CC10887782E49ABDE242EE8
45510CD8E2F4204F1279A2E90743497DC2471900A69BA88281A42B528E9CDFAF
B1EC081EC3FE68616A79AD9B7D60DA3E89468BDEF8DC00E3B1787BCA9E27C847
7334D20CD4D8EA0C61F8A75C94F64103647D7E6A956E29F11A1C12615D8D940D
720AFB05C378571B0B8AD53296086AB09A4E7D49EEFEA13FA16C0B65E75EF577
AC7D958889CEDF3F151E1E69999454FBC14B6C9FED0EE3B28BD761AD09EB8D80
1A4B3472B5E509700B4855EE8A767A8317C79BB16DF741DE5105B9BBEC0F17A7
D258A906CA052DF5BC5DCC2B2A26229C3FE8326811B66CC5DE48E4AEDF19FD43
E3EB5DDEA2C79A40E1270FFFC7A91DC677391E21AA3F396AB9F7BC4C15F25E6E
DB9393699600BD208D589F5A689C332230BDE247FAFE47E26455342F6B7C105A
5617093F81028710FC7695C2AE589289BD81F48F88C5F39B67AD7A82A784F711
C40322A915BCA777974FAB1A530B1B164EFF99C2C0AF585CF286749335F0B4A0
C2E14B0F81833CC408AD41F3BEE6C6A81EE53D86AEB807D6CB360CDE94FC04A4
3E6F1C8455F65E0BF97ED70CC60C8D46BBFC067C90FA32F6A6E6779315ABF559
C3879BE0B7F12490FE6D08639F11F401521A5CE94ED2FAA55C5AA080F1A04D8B
208F2B7B1FEE0E0336EB585EBF0DCE567D05B5FD20F393A0B921CD0B14B186D9
D7C665725F31634FBBA847800A1BE90A7253E30C9D279BC8CBDAD306E719E44D
EE13179BE75250A5450556781F188381A7D34E3E5565B3BEEB8C78F433CA1906
8994C0091E21D735C892A30D48F968DDEE4D2EA9A4B15C97E7C86C299A200A6F
AE31C6FED8A5CEDDDA47FE75114AC26D478D71D10A66BE83BC435B774A28728F
96BC9D8976E1D839E02F1262CAA1028085255A6F7C3D1DEBA47FA652A5E7C2B6
1DDA39F05949682601E8E7FC4E410E2544411D97D294342B0BFFDCCBB6347463
A94160AC1BE1C0C106B5F711FEF0AF37C2732A1C57328C0A7AE9C94213EBA008
0CA03F14F21C18D84A78E3988F74A034F12FFEB8AB52A3EA7D77407033CCD540
D64D88A8EB3E9E099B5077AD2CAC960175217C3CFC20C912C89EE241E2718E83
5DC0A41C4028E83E928783B6971942B4A689801C70DEC653984650DEDF3AEE8C
4D1AED95F57DB9B36DA5D4860E2799C57C36F74C661523B68901658EFC318F46
9629DA8E9002FE9297A355BE4926AB2CB691300F0FF8C68B7E0F2CC3259759C9
9B0C8358E1F6135623E7F84E3C6078E18188AB80F66EFB480D96286B56935A88
AF4F0890016441AC0C7E2C8EEBE54558E3D45FF4C8A352EECEFA83FCA2F49033
B490CF56B62465EB72960214807005CE5E1661E15AB21648BFB3DE7432A6FFFB
AA0A02C816D079668C315035F6B7464BE5D219C56EE0429106BC2504A4DC27FC
A34C941C185AEA09C56C7C58275106CC768796D5FA9FD85130E37DFD0ACED0E2
EDC57C10D74BEF4034C596EDB7D0B0479B7C851D55E035BCC70CD4E9EBE908CA
002B1FF150DEBA1F7E217FA58514E3C08070614FC3F59576D0B4959F9168FD80
FEEFAE94FC293851BE2270F07C685F786693CC196D9ADB67EF3BFDCD31236C32
8865C4A24BE7FF243A24D15B765CB6F9B899665D030BEA2FB6B707380E5BD021
B35996CC5A446D0914D9ACB450E4AFFF84B518B970DFFA2636DA2D2C45FF5D98
DF6D14218A71F03FA228A75062A0DDD91F958CE334CD5F78D33CC60919EB2890
2F07107144B12619C5B8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (OS_Linux.dvi)
@start /Fa 134[41 41 61 41 46 33 35 31 1[46 45 46 72
21 44 1[21 46 45 1[40 46 40 46 43 1[70 43[45 45 45 1[45
25 30 1[70 7[75 1[29 4[48 28[{ T1Encoding ReEncodeFont }33
90.9091 /SFSS1095 rf /Fb 139[40 41 43 1[58 52 58 87 3[29
1[52 1[47 58 46 58 50 20[62 21[52 52 52 52 52 52 3[35
3[40 41[{ T1Encoding ReEncodeFont }23 90.9091 /SFBX1095
rf /Fc 23[51 110[59 59 2[62 44 44 46 2[56 62 93 31 2[31
62 56 1[51 62 50 1[54 17[84 2[67 24[56 56 56 3[37 16[62
28[{ T1Encoding ReEncodeFont }25 99.6264 /SFBX1200 rf
/Fd 6[50 14[40 40 40 7[45 101[40 48 48 65 48 50 35 36
35 48 50 45 50 75 25 1[28 25 50 45 28 40 50 40 50 45
1[70 7[93 68 68 65 50 67 70 61 70 68 83 56 2[33 1[71
59 61 69 65 3[43 3[25 25 6[45 45 45 1[45 25 30 25 4[25
4[45 25 2[75 1[50 53 4[90 22[{ T1Encoding ReEncodeFont }66
90.9091 /SFRM1095 rf /Fe 22[84 84 110[100 100 1[100 105
73 74 2[105 94 105 157 52 2[52 3[84 105 84 1[94 13[105
17[141 6[52 18[52 39[{ T1Encoding ReEncodeFont }22 206.559
/SFRM2488 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref)/Author ()/Keywords () /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -372 -561
a
SDict begin H.S end
 -372 -561 a -372 -561 a
SDict begin H.R end
 -372 -561 a -372 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -372
-561 a 0 TeXcolorgray Black 0 TeXcolorgray -364 -246
a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -364 -246 a -364 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -364 -246 a -364 -246 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -364
-246 a -364 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -364 -246 a -364 -246 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -364 -246
a -364 -246 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -364 -246 a -364 -246 a
SDict begin H.S end
 -364 -246 a -364
-246 a
SDict begin 13.6 H.A end
 -364 -246 a -364 -246 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -364 -246 a -223 -103
a Fe(A)-5 b(ctivit\351)64 b(:)f(Syst\350me)g(d'exploitation)i(lin)-5
b(ux)p -364 -10 4489 4 v -223 294 a Fd(Le)30 b(syst\350me)f
(d'exploitation)i(GNU/Lin)m(ux)f(est)f(un)h(OS)g(\351quiv)-5
b(alen)m(t)30 b(au)g(syst\350me)f(d'exploitation)i(Windo)m(ws.)f(Il)f
(est)g(gratuit)-364 407 y(et)c(libre.)g(Il)f(disp)s(ose)f(d'une)i(in)m
(terface)h(graphique)f(bas\351e)g(sur)f(des)g(fen\352tre)h(qui)f(p)s
(ermetten)m(t)i(d'a\036c)m(her)g(les)e(con)m(ten)m(us)i(des)f(dossiers)
-364 520 y(et)f(des)g(\034c)m(hiers.)g(Il)g(disp)s(ose)f(de)h
(programmes)h(p)s(our)f(r\351aliser)g(des)f(tac)m(hes)i(de)f(base)f
(comme)i(le)f(traitemen)m(t)i(de)d(texte)h(ou)g(l'a\036c)m(hage)-364
633 y(de)31 b(photos.)-223 746 y(L'ob)5 b(jectif)31 b(de)g(cette)g
(activit\351)g(est)f(de)h(se)f(familiariser)h(a)m(v)m(ec)g(ce)g
(syst\350me)f(d'exploitation.)-364 989 y
SDict begin H.S end
 -364 989 a -364
989 a
SDict begin 14 H.A end
 -364 989 a -364 989 a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 -364 989 a Fc(-1-)38 b(Organisation)h(du)f
(syst\350me)g(de)g(\034c)m(hiers)-364 1052 y
SDict begin H.S end
 -364 1052
a -364 1052 a
SDict begin 13.6 H.A end
 -364 1052 a -364 1052 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -364 1052 a 0 TeXcolorgray
-274 1161 a Fb(1\))p 0 TeXcolorgray 45 w Fd(Commen)m(t)33
b(son)m(t)e(organis\351s)f(les)g(\034c)m(hiers)i(dans)e(l'OS)h(GNU/Lin)
m(ux)15 b(?)-364 1908 y
SDict begin H.S end
 -364 1908 a -364 1908 a
SDict begin 13.6 H.A end
 -364
1908 a -364 1908 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -364 1908 a 0 TeXcolorgray -274 2014
a Fb(2\))p 0 TeXcolorgray 45 w Fd(Commen)m(t)40 b(se)e(nomme)h(le)f
(dossier)f(con)m(tenan)m(t)k(tous)d(les)f(autres)h(dossiers)15
b(?)38 b(Quelle)g(est)g(la)g(principale)h(di\033\351rence)g(a)m(v)m(ec)
-137 2127 y(windo)m(ws)15 b(?)-364 2615 y
SDict begin H.S end
 -364 2615 a
-364 2615 a
SDict begin 13.6 H.A end
 -364 2615 a -364 2615 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -364 2615 a 0 TeXcolorgray
-274 2743 a Fb(3\))p 0 TeXcolorgray 45 w Fd(Quel)31 b(est)g(le)f
(dossier)g(r\351serv)m(\351)h(aux)f(utilisateurs)15 b(?)-364
3254 y
SDict begin H.S end
 -364 3254 a -364 3254 a
SDict begin 13.6 H.A end
 -364 3254 a -364 3254
a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 -364 3254 a 0 TeXcolorgray -274 3360 a Fb(4\))p 0 TeXcolorgray
45 w Fd(Commen)m(t)33 b(se)d(nomme)h(v)m(otre)g(dossier)f(p)s(ersonnel)
15 b(?)-364 3871 y
SDict begin H.S end
 -364 3871 a -364 3871 a
SDict begin 13.6 H.A end
 -364 3871
a -364 3871 a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 -364 3871 a 0 TeXcolorgray -274 3977 a
Fb(5\))p 0 TeXcolorgray 45 w Fd(Quel)31 b(est)g(le)f(dossier)g(con)m
(tenan)m(t)j(les)d(\034c)m(hiers)i(du)e(syst\350me)g(d'exploitation)15
b(?)-364 4487 y
SDict begin H.S end
 -364 4487 a -364 4487 a
SDict begin 13.6 H.A end
 -364 4487 a -364
4487 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 -364 4487 a 0 TeXcolorgray -274 4593 a Fb(6\))p
0 TeXcolorgray 45 w Fd(Que)31 b(con)m(tiennen)m(t)i(les)e(dossiers)f
Fa(bin)p Fd(,)h Fa(dev)h Fd(et)f Fa(usr)16 b Fd(?)-364
5782 y
SDict begin H.S end
 -364 5782 a -364 5782 a
SDict begin 14 H.A end
 -364 5782 a -364 5782
a
SDict begin [/View [/XYZ H.V]/Dest (section*.2) cvn /DEST pdfmark end
 -364 5782 a Fc(-2-)38 b(Organiser)h(ces)e(\034c)m(hiers)h(et)f
(dossiers)-223 5953 y Fd(On)31 b(consid\350re)g(l'arb)s(orescence)h(de)
e(\034c)m(hiers)i(suiv)-5 b(an)m(te)31 b(:)p 0 TeXcolorgray
1858 6310 a(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -372
-561 a
SDict begin H.S end
 -372 -561 a -372 -561 a
SDict begin H.R end
 -372 -561 a -372 -561
a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -372 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -223 55 a Fd(Cr\351e)34 b(dans)f(v)m(otre)g(espace)h
(utilisateur)g(la)f(m\352me)g(arb)s(orescence)h(de)f(dossiers)g(et)g
(de)g(\034c)m(hiers.)h(Les)f(\034c)m(hiers)h(son)m(t)g(\340)f(cr\351er)
g(et)-364 168 y(les)d(images)h(son)m(t)g(disp)s(onibles)g(sur)f(l'ENT.)
-364 411 y
SDict begin H.S end
 -364 411 a -364 411 a
SDict begin 14 H.A end
 -364 411 a -364 411
a
SDict begin [/View [/XYZ H.V]/Dest (section*.3) cvn /DEST pdfmark end
 -364 411 a Fc(-3-)38 b(Le)g(terminal)g(lin)m(ux)-223
583 y Fd(Lin)m(ux)30 b(p)s(eut)e(\352tre)h(utilis\351)g(sans)f(aucune)h
(in)m(terface)h(graphique.)g(L'utilisation)g(de)e(lin)m(ux)h(se)f(fait)
h(en)f(ligne)h(de)g(commandes.)h(Il)-364 696 y(existe)g(une)h
(application)h(qui)e(p)s(ermet)h(de)g(saisir)f(des)g(lignes)h(de)f
(commandes.)i(C'est)e(le)h(terminal.)-364 744 y
SDict begin H.S end
 -364
744 a -364 744 a
SDict begin 13.6 H.A end
 -364 744 a -364 744 a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 -364 744 a 0 TeXcolorgray
-274 854 a Fb(1\))p 0 TeXcolorgray 45 w Fd(Ouvrir)d(une)f(nouv)m(elle)h
(fen\352tre)f(de)g("T)-8 b(erminal".)30 b(Ce)d(terminal)h(est)e(aussi)h
(app)s(el\351)g(console.)h(Noter)f(l'in)m(vite)h(de)f(commande)-137
967 y(prop)s(os\351e,)k(c'est)g(\340)f(dire)h(tous)f(les)g
(caract\350res)i(situ\351s)e(a)m(v)-5 b(an)m(t)31 b(le)g(curseur)15
b(!)-364 1000 y
SDict begin H.S end
 -364 1000 a -364 1000 a
SDict begin 13.6 H.A end
 -364 1000 a -364
1000 a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 -364 1000 a 0 TeXcolorgray -274 1110 a Fb(2\))p
0 TeXcolorgray 45 w Fd(Il)27 b(existe)h(de)f(tr\350s)h(nom)m(breuses)g
(commandes.)h(On)f(v)-5 b(a)27 b(en)g(d\351couvrir)i(quelques)e(unes)g
(assez)g(simples)h(mais)f(tr\350s)h(utiles)f(que)-137
1223 y(v)m(ous)k(allez)g(tester.)-364 1269 y
SDict begin H.S end
 -364 1269
a -364 1269 a
SDict begin 13.6 H.A end
 -364 1269 a -364 1269 a
SDict begin [/View [/XYZ H.V]/Dest (Item.9) cvn /DEST pdfmark end
 -364 1269 a 0 TeXcolorgray
-73 1397 a Fb(a\))p 0 TeXcolorgray 46 w Fd(Rep)s(\351rez-v)m(ous)g
(dans)g(l'arb)s(orescence)g(de)g(\034c)m(hiers)g(a)m(v)m(ec)g(la)g
(commande)h Fa(p)m(wd)p Fd(.)g(O\371)f(\352tes-v)m(ous)15
b(?)-364 1907 y
SDict begin H.S end
 -364 1907 a -364 1907 a
SDict begin 13.6 H.A end
 -364 1907 a -364
1907 a
SDict begin [/View [/XYZ H.V]/Dest (Item.10) cvn /DEST pdfmark end
 -364 1907 a 0 TeXcolorgray -80 2013 a Fb(b\))p
0 TeXcolorgray 45 w Fd(Lister)31 b(le)g(con)m(ten)m(u)h(de)f(v)m(otre)g
(r\351p)s(ertoire)g(a)m(v)m(ec)h(la)e(commande)i Fa(ls)p
Fd(.)e(Quels)h(son)m(t)g(les)f(dossiers)g(et)g(\034c)m(hiers)i(a\036c)m
(h\351s)15 b(?)-364 2523 y
SDict begin H.S end
 -364 2523 a -364 2523 a
SDict begin 13.6 H.A end
 -364
2523 a -364 2523 a
SDict begin [/View [/XYZ H.V]/Dest (Item.11) cvn /DEST pdfmark end
 -364 2523 a 0 TeXcolorgray -69 2628
a Fb(c\))p 0 TeXcolorgray 46 w Fd(Lister)31 b(le)e(con)m(ten)m(u)j(de)e
(v)m(otre)h(r\351p)s(ertoire)f(a)m(v)m(ec)h(la)f(commande)h
Fa(ls)e(-l)p Fd(.)h(Quelle)h(di\033\351rence)g(a-t-on)f(a)m(v)m(ec)h
(la)f(commande)63 2741 y(pr\351c\351den)m(te)15 b(?)-364
3247 y
SDict begin H.S end
 -364 3247 a -364 3247 a
SDict begin 13.6 H.A end
 -364 3247 a -364 3247
a
SDict begin [/View [/XYZ H.V]/Dest (Item.12) cvn /DEST pdfmark end
 -364 3247 a 0 TeXcolorgray -80 3357 a Fb(d\))p 0 TeXcolorgray
45 w Fd(D\351placez-v)m(ous)34 b(dans)d(ce)h(r\351p)s(ertoire)h
Fa(textes)e Fd(a)m(v)m(ec)i(la)e Fa(cd)i Fd(/c)m(hemin/v)m(ers/r\351p)s
(ertoire.)i(V\351ri\034er)d(a)m(v)m(ec)h(la)f(commande)63
3470 y Fa(ls)f Fd(que)f(v)m(ous)g(\352tes)h(au)f(b)s(on)g(endroit.)-364
3503 y
SDict begin H.S end
 -364 3503 a -364 3503 a
SDict begin 13.6 H.A end
 -364 3503 a -364 3503
a
SDict begin [/View [/XYZ H.V]/Dest (Item.13) cvn /DEST pdfmark end
 -364 3503 a 0 TeXcolorgray -70 3613 a Fb(e\))p 0 TeXcolorgray
46 w Fd(P)m(our)35 b(remon)m(ter)g(d'un)e(niv)m(eau)h(l'arb)s
(orescence,)g(on)f(utilise)h(la)f(commande)h Fa(ls)f(..)p
Fd(.)g(Remon)m(ter)h(jusqu'\340)e(la)h(racine)h(de)63
3726 y(v)m(otre)e(r\351p)s(ertoire)f(p)s(ersonnel.)-137
4372 y(On)g(a)5 b(joute)31 b(aux)f(commandes)i(lin)m(ux)f(d\351j\340)f
(vues,)g(les)g(commandes)i(suiv)-5 b(an)m(tes)31 b(:)p
0 TeXcolorgray -72 4546 a(\026)p 0 TeXcolorgray 45 w(P)m(our)k
(cr\351er)f(un)f(\034c)m(hier,)i(il)e(existe)g(un)g(\351diteur)h(qui)f
(se)g(lance)h(a)m(v)m(ec)g(la)f(commande)i Fa(nano)p
Fd(.)f(On)f(enregistre)i(le)e(\034c)m(hier)63 4659 y(a)m(v)m(ec)f(les)e
(touc)m(hes)h Fa(ctrl)f(+)h(o)f Fd(et)h(on)f(quitte)h(l'\351diteur)g(a)
m(v)m(ec)h(les)e(touc)m(hes)h Fa(ctrl)f(+)h(x)p Fd(.)p
0 TeXcolorgray -72 4802 a(\026)p 0 TeXcolorgray 45 w(La)g(commande)h
Fa(cat)e Fd(p)s(ermet)h(d'a\036c)m(her)i(le)d(con)m(ten)m(u)i(d'un)f
(\034c)m(hier.)p 0 TeXcolorgray -72 4945 a(\026)p 0 TeXcolorgray
45 w(P)m(our)40 b(copier)g(un)e(\034c)m(hier)i(d'un)f(dossier)f(\340)h
(un)f(autre,)i(on)e(utilise)h(la)f(commande)i Fa(cp)f
Fd(en)g(indiquan)m(t)h(le)e(r\351p)s(ertoire)63 5058
y(source)31 b(puis)g(le)f(r\351p)s(ertoire)h(de)g(destination.)p
0 TeXcolorgray -72 5202 a(\026)p 0 TeXcolorgray 45 w(P)m(our)j
(d\351placer)g(un)f(\034c)m(hier)h(v)m(ers)f(un)g(autre)g(dossier,)g
(on)f(utilise)h(la)g(commande)h Fa(mv)g Fd(en)f(indiquan)m(t)h(la)e
(source)h(et)g(la)63 5315 y(destination.)p 0 TeXcolorgray
-72 5458 a(\026)p 0 TeXcolorgray 45 w(P)m(our)f(cr\351er)f(un)g(nouv)m
(eau)g(r\351p)s(ertoire,)h(on)e(utilise)h(la)g(commande)g
Fa(mkdir)h Fd(nom_r\351p)s(ertoire_a_cr\351er.)-364 5524
y
SDict begin H.S end
 -364 5524 a -364 5524 a
SDict begin 13.6 H.A end
 -364 5524 a -364 5524 a
SDict begin [/View [/XYZ H.V]/Dest (Item.14) cvn /DEST pdfmark end
 -364
5524 a 0 TeXcolorgray -73 5632 a Fb(a\))p 0 TeXcolorgray
46 w Fd(Cr\351er)g(dans)e(v)m(otre)h(dossier)f(utilisateur)i(l'arb)s
(orescence)f(d\351\034nie)h(ci-dessus.)-364 5669 y
SDict begin H.S end
 -364
5669 a -364 5669 a
SDict begin 13.6 H.A end
 -364 5669 a -364 5669 a
SDict begin [/View [/XYZ H.V]/Dest (Item.15) cvn /DEST pdfmark end
 -364 5669
a 0 TeXcolorgray -80 5775 a Fb(b\))p 0 TeXcolorgray 45
w Fd(Cr\351er)d(le)e(programme)i(p)m(ython)g Fa(pgm_1.p)m(y)h
Fd(et)e(le)f(\034c)m(hier)i(texte)f Fa(essai.txt)f Fd(en)h(ligne)g(de)f
(commande)i(dans)f(la)g(console.)-364 5813 y
SDict begin H.S end
 -364 5813
a -364 5813 a
SDict begin 13.6 H.A end
 -364 5813 a -364 5813 a
SDict begin [/View [/XYZ H.V]/Dest (Item.16) cvn /DEST pdfmark end
 -364 5813 a 0 TeXcolorgray
-69 5918 a Fb(c\))p 0 TeXcolorgray 46 w Fd(Le)d(\034c)m(hier)h(p)m
(ython)f Fa(pgm_2.p)m(y)j Fd(est)c(dans)g(le)g(dossier)h
Fa(/srv)p Fd(.)f(F)-8 b(aites)25 b(une)f(copie)h(de)g(ce)f(\034c)m
(hier)i(dans)e(le)h(dossier)f Fa(/p)m(ython)p Fd(.)-364
5956 y
SDict begin H.S end
 -364 5956 a -364 5956 a
SDict begin 13.6 H.A end
 -364 5956 a -364 5956
a
SDict begin [/View [/XYZ H.V]/Dest (Item.17) cvn /DEST pdfmark end
 -364 5956 a 0 TeXcolorgray -80 6061 a Fb(d\))p 0 TeXcolorgray
45 w Fd(Les)31 b(\034c)m(hiers)g(images)g(son)m(t)g(disp)s(onibles)g
(sur)f(le)g(serv)m(eur)h(dans)g(le)f(r\351p)s(ertoire)h
Fa(/srv)p Fd(.)g(R\351cup)s(\351rer)f(ces)g(deux)h(images.)p
0 TeXcolorgray 1858 6310 a(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -372
-561 a
SDict begin H.S end
 -372 -561 a -372 -561 a
SDict begin H.R end
 -372 -561 a -372 -561
a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -372 -561 a 0 TeXcolorgray 0 TeXcolorgray -364 -154
a
SDict begin H.S end
 -364 -154 a -364 -154 a
SDict begin 13.6 H.A end
 -364 -154 a -364 -154 a
SDict begin [/View [/XYZ H.V]/Dest (section*.4) cvn /DEST pdfmark end
 -364
-154 a Fb(-4-)34 b(La)i(gestion)e(des)h(p)s(ermissions)-223
17 y Fd(Il)30 b(y)g(a)g(trois)h(cat\351gories)g(de)g(p)s(ermissions)f
(sur)g(les)g(dossiers)g(et)h(les)f(\034c)m(hiers)h(dans)g(lin)m(ux.)p
0 TeXcolorgray -272 161 a(\026)p 0 TeXcolorgray 45 w(Les)g(p)s
(ermissions)f(accord\351es)h(\340)g(l'utilisateur)g(propri\351taire)i
(:)d Fa(u)15 b Fd(;)p 0 TeXcolorgray -272 306 a(\026)p
0 TeXcolorgray 45 w(Les)31 b(p)s(ermissions)f(accord\351es)h(au)g
(group)s(e)g(d'utilisateurs)g(qui)f(ne)h(son)m(t)g(pas)f
(propri\351taires)i(:)e Fa(g)17 b Fd(;)p 0 TeXcolorgray
-272 450 a(\026)p 0 TeXcolorgray 45 w(Les)31 b(p)s(ermissions)f
(accord\351es)h(\340)g(tous)f(les)g(autres)h(utilisateurs)g(:)f
Fa(o)p Fd(.)-223 594 y(P)m(our)i(c)m(haque)f(cat\351gorie,)h(on)f(a)f
(trois)h(p)s(ermissions)f(p)s(ossibles)f(:)p 0 TeXcolorgray
-272 738 a(\026)p 0 TeXcolorgray 45 w(Le)i(droit)g(en)g(lecture)g(:)f
Fa(r)p 0 TeXcolorgray -272 883 a Fd(\026)p 0 TeXcolorgray
45 w(Le)h(droit)g(en)g(\351criture)g(:)g Fa(w)p 0 TeXcolorgray
-272 1027 a Fd(\026)p 0 TeXcolorgray 45 w(Le)g(droit)g(en)g
(ex\351cution)g(:)f Fa(x)-223 1171 y Fd(Ces)h(p)s(ermissions)f(son)m(t)
h(a\036c)m(h\351es)g(lorsqu'on)g(utilise)g(la)f(commande)i
Fa(ls)e Fd(a)m(v)m(ec)i(l'option)f Fa(l)p Fd(.)-364 1220
y
SDict begin H.S end
 -364 1220 a -364 1220 a
SDict begin 13.6 H.A end
 -364 1220 a -364 1220 a
SDict begin [/View [/XYZ H.V]/Dest (Item.18) cvn /DEST pdfmark end
 -364
1220 a 0 TeXcolorgray -274 1331 a Fb(1\))p 0 TeXcolorgray
45 w Fd(Relev)m(er)g(les)f(p)s(ermissions)g(des)h(\034c)m(hiers)g(p)m
(ython)g(et)g(des)f(images.)-364 1842 y
SDict begin H.S end
 -364 1842 a -364
1842 a
SDict begin 13.6 H.A end
 -364 1842 a -364 1842 a
SDict begin [/View [/XYZ H.V]/Dest (Item.19) cvn /DEST pdfmark end
 -364 1842 a 0 TeXcolorgray
-274 1948 a Fb(2\))p 0 TeXcolorgray 45 w Fd(Il)g(est)h(p)s(ossible)f
(d'ex\351cuter)h(les)f(programmes)i(p)m(ython)f(en)g(utilisan)m(t)g(la)
g(commande)h Fa(p)m(ython)g(nom_p)m(rogramme.p)m(y)p
Fd(.)-137 2076 y(Ex\351cuter)g(les)e(deux)g(programmes.)-364
2109 y
SDict begin H.S end
 -364 2109 a -364 2109 a
SDict begin 13.6 H.A end
 -364 2109 a -364 2109
a
SDict begin [/View [/XYZ H.V]/Dest (Item.20) cvn /DEST pdfmark end
 -364 2109 a 0 TeXcolorgray -274 2220 a Fb(3\))p 0 TeXcolorgray
45 w Fd(Il)g(est)h(p)s(ossible)f(d'ex\351cuter)h(des)f(programmes)i(p)m
(ython)f(en)g(utilisan)m(t)g(la)g(commande)h Fa(./nom_p)m(rogramme.p)m
(y)p Fd(.)-137 2349 y(P)m(our)g(cela,)f(il)g(faut)f(a)5
b(jouter)31 b(sur)f(la)g(premi\350re)i(ligne)f(du)g(\034c)m(hier)g
(programme,)i(l'instruction)e Fa(#)15 b(!/usr/bin/p)m(ython3)p
Fd(.)-137 2527 y(Mo)s(di\034er)31 b(v)m(os)f(\034c)m(hiers)i(p)m
(ython.)-364 2561 y
SDict begin H.S end
 -364 2561 a -364 2561 a
SDict begin 13.6 H.A end
 -364 2561
a -364 2561 a
SDict begin [/View [/XYZ H.V]/Dest (Item.21) cvn /DEST pdfmark end
 -364 2561 a 0 TeXcolorgray -274 2671 a
Fb(4\))p 0 TeXcolorgray 45 w Fd(Les)f(scripts)f(p)m(ython)i(son)m
(t-ils)f(ex\351cutables)15 b(?)30 b(P)m(ourquoi)15 b(?)-364
3418 y
SDict begin H.S end
 -364 3418 a -364 3418 a
SDict begin 13.6 H.A end
 -364 3418 a -364 3418
a
SDict begin [/View [/XYZ H.V]/Dest (Item.22) cvn /DEST pdfmark end
 -364 3418 a 0 TeXcolorgray -274 3524 a Fb(5\))p 0 TeXcolorgray
45 w Fd(P)m(our)38 b(mo)s(di\034er)f(une)g(p)s(ermission,)g(on)g
(utilise)f(la)h(commande)h(lin)m(ux)f Fa(chmo)s(d)f Fd(\340)h(laquelle)
g(on)f(pr\351cise)h(la)g(cat\351gorie)h(et)e(la)-137
3637 y(p)s(ermission)31 b(\340)f(a)5 b(jouter.)-137 3766
y(P)m(ar)32 b(exemple)f(:)p 0 TeXcolorgray -72 3910 a(\026)p
0 TeXcolorgray 45 w Fa(chmo)s(d)g(g+w)g(nom_\034chier)i
Fd(a)5 b(joute)30 b(la)h(p)s(ermission)f(\351crire)h(au)g(group)s(e.)p
0 TeXcolorgray -72 4054 a(\026)p 0 TeXcolorgray 45 w
Fa(chmo)s(d)g(o-r)f(nom_\034chier)j Fd(enl\350v)m(e)e(la)f(p)s
(ermission)h(lire)g(aux)f(autres)h(utilisateurs.)-137
4198 y(Quelles)g(son)m(t)g(les)f(p)s(ermissions)h(\340)f(mo)s(di\034er)
h(p)s(our)f(rendre)i(v)m(os)e(\034c)m(hiers)h(ex\351cutables)15
b(?)p 0 TeXcolorgray 1858 6310 a(3)p 0 TeXcolorgray eop
end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
